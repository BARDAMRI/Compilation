     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 4
    84 00000007 040000000000000001-     	dq 4, 1
    84 00000010 00000000000000     
    85                                  
    86                                  section .bss
    87                                  free_var_0:	; location of null?
    88 00000000 ????????????????        	resq 1
    89                                  free_var_1:	; location of pair?
    90 00000008 ????????????????        	resq 1
    91                                  free_var_2:	; location of void?
    92 00000010 ????????????????        	resq 1
    93                                  free_var_3:	; location of char?
    94 00000018 ????????????????        	resq 1
    95                                  free_var_4:	; location of string?
    96 00000020 ????????????????        	resq 1
    97                                  free_var_5:	; location of symbol?
    98 00000028 ????????????????        	resq 1
    99                                  free_var_6:	; location of vector?
   100 00000030 ????????????????        	resq 1
   101                                  free_var_7:	; location of procedure?
   102 00000038 ????????????????        	resq 1
   103                                  free_var_8:	; location of real?
   104 00000040 ????????????????        	resq 1
   105                                  free_var_9:	; location of rational?
   106 00000048 ????????????????        	resq 1
   107                                  free_var_10:	; location of boolean?
   108 00000050 ????????????????        	resq 1
   109                                  free_var_11:	; location of number?
   110 00000058 ????????????????        	resq 1
   111                                  free_var_12:	; location of collection?
   112 00000060 ????????????????        	resq 1
   113                                  free_var_13:	; location of cons
   114 00000068 ????????????????        	resq 1
   115                                  free_var_14:	; location of display-sexpr
   116 00000070 ????????????????        	resq 1
   117                                  free_var_15:	; location of write-char
   118 00000078 ????????????????        	resq 1
   119                                  free_var_16:	; location of car
   120 00000080 ????????????????        	resq 1
   121                                  free_var_17:	; location of cdr
   122 00000088 ????????????????        	resq 1
   123                                  free_var_18:	; location of string-length
   124 00000090 ????????????????        	resq 1
   125                                  free_var_19:	; location of vector-length
   126 00000098 ????????????????        	resq 1
   127                                  free_var_20:	; location of real->integer
   128 000000A0 ????????????????        	resq 1
   129                                  free_var_21:	; location of exit
   130 000000A8 ????????????????        	resq 1
   131                                  free_var_22:	; location of integer->real
   132 000000B0 ????????????????        	resq 1
   133                                  free_var_23:	; location of rational->real
   134 000000B8 ????????????????        	resq 1
   135                                  free_var_24:	; location of char->integer
   136 000000C0 ????????????????        	resq 1
   137                                  free_var_25:	; location of integer->char
   138 000000C8 ????????????????        	resq 1
   139                                  free_var_26:	; location of trng
   140 000000D0 ????????????????        	resq 1
   141                                  free_var_27:	; location of zero?
   142 000000D8 ????????????????        	resq 1
   143                                  free_var_28:	; location of integer?
   144 000000E0 ????????????????        	resq 1
   145                                  free_var_29:	; location of __bin-apply
   146 000000E8 ????????????????        	resq 1
   147                                  free_var_30:	; location of __bin-add-rr
   148 000000F0 ????????????????        	resq 1
   149                                  free_var_31:	; location of __bin-sub-rr
   150 000000F8 ????????????????        	resq 1
   151                                  free_var_32:	; location of __bin-mul-rr
   152 00000100 ????????????????        	resq 1
   153                                  free_var_33:	; location of __bin-div-rr
   154 00000108 ????????????????        	resq 1
   155                                  free_var_34:	; location of __bin-add-qq
   156 00000110 ????????????????        	resq 1
   157                                  free_var_35:	; location of __bin-sub-qq
   158 00000118 ????????????????        	resq 1
   159                                  free_var_36:	; location of __bin-mul-qq
   160 00000120 ????????????????        	resq 1
   161                                  free_var_37:	; location of __bin-div-qq
   162 00000128 ????????????????        	resq 1
   163                                  free_var_38:	; location of error
   164 00000130 ????????????????        	resq 1
   165                                  free_var_39:	; location of __bin-less-than-rr
   166 00000138 ????????????????        	resq 1
   167                                  free_var_40:	; location of __bin-less-than-qq
   168 00000140 ????????????????        	resq 1
   169                                  free_var_41:	; location of __bin-equal-rr
   170 00000148 ????????????????        	resq 1
   171                                  free_var_42:	; location of __bin-equal-qq
   172 00000150 ????????????????        	resq 1
   173                                  free_var_43:	; location of quotient
   174 00000158 ????????????????        	resq 1
   175                                  free_var_44:	; location of remainder
   176 00000160 ????????????????        	resq 1
   177                                  free_var_45:	; location of set-car!
   178 00000168 ????????????????        	resq 1
   179                                  free_var_46:	; location of set-cdr!
   180 00000170 ????????????????        	resq 1
   181                                  free_var_47:	; location of string-ref
   182 00000178 ????????????????        	resq 1
   183                                  free_var_48:	; location of vector-ref
   184 00000180 ????????????????        	resq 1
   185                                  free_var_49:	; location of vector-set!
   186 00000188 ????????????????        	resq 1
   187                                  free_var_50:	; location of string-set!
   188 00000190 ????????????????        	resq 1
   189                                  free_var_51:	; location of make-vector
   190 00000198 ????????????????        	resq 1
   191                                  free_var_52:	; location of make-string
   192 000001A0 ????????????????        	resq 1
   193                                  free_var_53:	; location of numerator
   194 000001A8 ????????????????        	resq 1
   195                                  free_var_54:	; location of denominator
   196 000001B0 ????????????????        	resq 1
   197                                  free_var_55:	; location of eq?
   198 000001B8 ????????????????        	resq 1
   199                                  free_var_56:	; location of x
   200 000001C0 ????????????????        	resq 1
   201                                  
   202                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   203                                  global main
   204                                  section .text
   205                                  main:
   206 00000000 C8000000                        enter 0, 0
   207                                          
   208                                  	; building closure for null?
   209 00000004 48BF-                   	mov rdi, free_var_0
   209 00000006 [0000000000000000] 
   210 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   210 00000010 [400C000000000000] 
   211 00000018 E8FB0B0000              	call bind_primitive
   212                                  
   213                                  	; building closure for pair?
   214 0000001D 48BF-                   	mov rdi, free_var_1
   214 0000001F [0800000000000000] 
   215 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   215 00000029 [760C000000000000] 
   216 00000031 E8E20B0000              	call bind_primitive
   217                                  
   218                                  	; building closure for void?
   219 00000036 48BF-                   	mov rdi, free_var_2
   219 00000038 [1000000000000000] 
   220 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   220 00000042 [AC0C000000000000] 
   221 0000004A E8C90B0000              	call bind_primitive
   222                                  
   223                                  	; building closure for char?
   224 0000004F 48BF-                   	mov rdi, free_var_3
   224 00000051 [1800000000000000] 
   225 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   225 0000005B [E20C000000000000] 
   226 00000063 E8B00B0000              	call bind_primitive
   227                                  
   228                                  	; building closure for string?
   229 00000068 48BF-                   	mov rdi, free_var_4
   229 0000006A [2000000000000000] 
   230 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   230 00000074 [180D000000000000] 
   231 0000007C E8970B0000              	call bind_primitive
   232                                  
   233                                  	; building closure for symbol?
   234 00000081 48BF-                   	mov rdi, free_var_5
   234 00000083 [2800000000000000] 
   235 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   235 0000008D [4E0D000000000000] 
   236 00000095 E87E0B0000              	call bind_primitive
   237                                  
   238                                  	; building closure for vector?
   239 0000009A 48BF-                   	mov rdi, free_var_6
   239 0000009C [3000000000000000] 
   240 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   240 000000A6 [840D000000000000] 
   241 000000AE E8650B0000              	call bind_primitive
   242                                  
   243                                  	; building closure for procedure?
   244 000000B3 48BF-                   	mov rdi, free_var_7
   244 000000B5 [3800000000000000] 
   245 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   245 000000BF [BA0D000000000000] 
   246 000000C7 E84C0B0000              	call bind_primitive
   247                                  
   248                                  	; building closure for real?
   249 000000CC 48BF-                   	mov rdi, free_var_8
   249 000000CE [4000000000000000] 
   250 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   250 000000D8 [F00D000000000000] 
   251 000000E0 E8330B0000              	call bind_primitive
   252                                  
   253                                  	; building closure for rational?
   254 000000E5 48BF-                   	mov rdi, free_var_9
   254 000000E7 [4800000000000000] 
   255 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   255 000000F1 [260E000000000000] 
   256 000000F9 E81A0B0000              	call bind_primitive
   257                                  
   258                                  	; building closure for boolean?
   259 000000FE 48BF-                   	mov rdi, free_var_10
   259 00000100 [5000000000000000] 
   260 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   260 0000010A [5C0E000000000000] 
   261 00000112 E8010B0000              	call bind_primitive
   262                                  
   263                                  	; building closure for number?
   264 00000117 48BF-                   	mov rdi, free_var_11
   264 00000119 [5800000000000000] 
   265 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   265 00000123 [940E000000000000] 
   266 0000012B E8E80A0000              	call bind_primitive
   267                                  
   268                                  	; building closure for collection?
   269 00000130 48BF-                   	mov rdi, free_var_12
   269 00000132 [6000000000000000] 
   270 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   270 0000013C [CC0E000000000000] 
   271 00000144 E8CF0A0000              	call bind_primitive
   272                                  
   273                                  	; building closure for cons
   274 00000149 48BF-                   	mov rdi, free_var_13
   274 0000014B [6800000000000000] 
   275 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   275 00000155 [040F000000000000] 
   276 0000015D E8B60A0000              	call bind_primitive
   277                                  
   278                                  	; building closure for display-sexpr
   279 00000162 48BF-                   	mov rdi, free_var_14
   279 00000164 [7000000000000000] 
   280 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   280 0000016E [380F000000000000] 
   281 00000176 E89D0A0000              	call bind_primitive
   282                                  
   283                                  	; building closure for write-char
   284 0000017B 48BF-                   	mov rdi, free_var_15
   284 0000017D [7800000000000000] 
   285 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   285 00000187 [620F000000000000] 
   286 0000018F E8840A0000              	call bind_primitive
   287                                  
   288                                  	; building closure for car
   289 00000194 48BF-                   	mov rdi, free_var_16
   289 00000196 [8000000000000000] 
   290 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   290 000001A0 [B90F000000000000] 
   291 000001A8 E86B0A0000              	call bind_primitive
   292                                  
   293                                  	; building closure for cdr
   294 000001AD 48BF-                   	mov rdi, free_var_17
   294 000001AF [8800000000000000] 
   295 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   295 000001B9 [E10F000000000000] 
   296 000001C1 E8520A0000              	call bind_primitive
   297                                  
   298                                  	; building closure for string-length
   299 000001C6 48BF-                   	mov rdi, free_var_18
   299 000001C8 [9000000000000000] 
   300 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   300 000001D2 [0910000000000000] 
   301 000001DA E8390A0000              	call bind_primitive
   302                                  
   303                                  	; building closure for vector-length
   304 000001DF 48BF-                   	mov rdi, free_var_19
   304 000001E1 [9800000000000000] 
   305 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   305 000001EB [3610000000000000] 
   306 000001F3 E8200A0000              	call bind_primitive
   307                                  
   308                                  	; building closure for real->integer
   309 000001F8 48BF-                   	mov rdi, free_var_20
   309 000001FA [A000000000000000] 
   310 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   310 00000204 [6310000000000000] 
   311 0000020C E8070A0000              	call bind_primitive
   312                                  
   313                                  	; building closure for exit
   314 00000211 48BF-                   	mov rdi, free_var_21
   314 00000213 [A800000000000000] 
   315 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   315 0000021D [9610000000000000] 
   316 00000225 E8EE090000              	call bind_primitive
   317                                  
   318                                  	; building closure for integer->real
   319 0000022A 48BF-                   	mov rdi, free_var_22
   319 0000022C [B000000000000000] 
   320 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   320 00000236 [B310000000000000] 
   321 0000023E E8D5090000              	call bind_primitive
   322                                  
   323                                  	; building closure for rational->real
   324 00000243 48BF-                   	mov rdi, free_var_23
   324 00000245 [B800000000000000] 
   325 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   325 0000024F [F010000000000000] 
   326 00000257 E8BC090000              	call bind_primitive
   327                                  
   328                                  	; building closure for char->integer
   329 0000025C 48BF-                   	mov rdi, free_var_24
   329 0000025E [C000000000000000] 
   330 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   330 00000268 [2F11000000000000] 
   331 00000270 E8A3090000              	call bind_primitive
   332                                  
   333                                  	; building closure for integer->char
   334 00000275 48BF-                   	mov rdi, free_var_25
   334 00000277 [C800000000000000] 
   335 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   335 00000281 [6411000000000000] 
   336 00000289 E88A090000              	call bind_primitive
   337                                  
   338                                  	; building closure for trng
   339 0000028E 48BF-                   	mov rdi, free_var_26
   339 00000290 [D000000000000000] 
   340 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   340 0000029A [BE11000000000000] 
   341 000002A2 E871090000              	call bind_primitive
   342                                  
   343                                  	; building closure for zero?
   344 000002A7 48BF-                   	mov rdi, free_var_27
   344 000002A9 [D800000000000000] 
   345 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   345 000002B3 [E111000000000000] 
   346 000002BB E858090000              	call bind_primitive
   347                                  
   348                                  	; building closure for integer?
   349 000002C0 48BF-                   	mov rdi, free_var_28
   349 000002C2 [E000000000000000] 
   350 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   350 000002CC [3C12000000000000] 
   351 000002D4 E83F090000              	call bind_primitive
   352                                  
   353                                  	; building closure for __bin-apply
   354 000002D9 48BF-                   	mov rdi, free_var_29
   354 000002DB [E800000000000000] 
   355 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   355 000002E5 [400C000000000000] 
   356 000002ED E826090000              	call bind_primitive
   357                                  
   358                                  	; building closure for __bin-add-rr
   359 000002F2 48BF-                   	mov rdi, free_var_30
   359 000002F4 [F000000000000000] 
   360 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   360 000002FE [7912000000000000] 
   361 00000306 E80D090000              	call bind_primitive
   362                                  
   363                                  	; building closure for __bin-sub-rr
   364 0000030B 48BF-                   	mov rdi, free_var_31
   364 0000030D [F800000000000000] 
   365 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   365 00000317 [BD12000000000000] 
   366 0000031F E8F4080000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-mul-rr
   369 00000324 48BF-                   	mov rdi, free_var_32
   369 00000326 [0001000000000000] 
   370 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   370 00000330 [0113000000000000] 
   371 00000338 E8DB080000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-div-rr
   374 0000033D 48BF-                   	mov rdi, free_var_33
   374 0000033F [0801000000000000] 
   375 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   375 00000349 [4513000000000000] 
   376 00000351 E8C2080000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-add-qq
   379 00000356 48BF-                   	mov rdi, free_var_34
   379 00000358 [1001000000000000] 
   380 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   380 00000362 [9713000000000000] 
   381 0000036A E8A9080000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-sub-qq
   384 0000036F 48BF-                   	mov rdi, free_var_35
   384 00000371 [1801000000000000] 
   385 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   385 0000037B [FF13000000000000] 
   386 00000383 E890080000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-mul-qq
   389 00000388 48BF-                   	mov rdi, free_var_36
   389 0000038A [2001000000000000] 
   390 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   390 00000394 [6714000000000000] 
   391 0000039C E877080000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-div-qq
   394 000003A1 48BF-                   	mov rdi, free_var_37
   394 000003A3 [2801000000000000] 
   395 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   395 000003AD [BF14000000000000] 
   396 000003B5 E85E080000              	call bind_primitive
   397                                  
   398                                  	; building closure for error
   399 000003BA 48BF-                   	mov rdi, free_var_38
   399 000003BC [3001000000000000] 
   400 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   400 000003C6 [8D15000000000000] 
   401 000003CE E845080000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-less-than-rr
   404 000003D3 48BF-                   	mov rdi, free_var_39
   404 000003D5 [3801000000000000] 
   405 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   405 000003DF [4416000000000000] 
   406 000003E7 E82C080000              	call bind_primitive
   407                                  
   408                                  	; building closure for __bin-less-than-qq
   409 000003EC 48BF-                   	mov rdi, free_var_40
   409 000003EE [4001000000000000] 
   410 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   410 000003F8 [9B16000000000000] 
   411 00000400 E813080000              	call bind_primitive
   412                                  
   413                                  	; building closure for __bin-equal-rr
   414 00000405 48BF-                   	mov rdi, free_var_41
   414 00000407 [4801000000000000] 
   415 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   415 00000411 [FE16000000000000] 
   416 00000419 E8FA070000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-equal-qq
   419 0000041E 48BF-                   	mov rdi, free_var_42
   419 00000420 [5001000000000000] 
   420 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   420 0000042A [5517000000000000] 
   421 00000432 E8E1070000              	call bind_primitive
   422                                  
   423                                  	; building closure for quotient
   424 00000437 48BF-                   	mov rdi, free_var_43
   424 00000439 [5801000000000000] 
   425 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   425 00000443 [B817000000000000] 
   426 0000044B E8C8070000              	call bind_primitive
   427                                  
   428                                  	; building closure for remainder
   429 00000450 48BF-                   	mov rdi, free_var_44
   429 00000452 [6001000000000000] 
   430 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   430 0000045C [1E18000000000000] 
   431 00000464 E8AF070000              	call bind_primitive
   432                                  
   433                                  	; building closure for set-car!
   434 00000469 48BF-                   	mov rdi, free_var_45
   434 0000046B [6801000000000000] 
   435 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   435 00000475 [8418000000000000] 
   436 0000047D E896070000              	call bind_primitive
   437                                  
   438                                  	; building closure for set-cdr!
   439 00000482 48BF-                   	mov rdi, free_var_46
   439 00000484 [7001000000000000] 
   440 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   440 0000048E [BA18000000000000] 
   441 00000496 E87D070000              	call bind_primitive
   442                                  
   443                                  	; building closure for string-ref
   444 0000049B 48BF-                   	mov rdi, free_var_47
   444 0000049D [7801000000000000] 
   445 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   445 000004A7 [F018000000000000] 
   446 000004AF E864070000              	call bind_primitive
   447                                  
   448                                  	; building closure for vector-ref
   449 000004B4 48BF-                   	mov rdi, free_var_48
   449 000004B6 [8001000000000000] 
   450 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   450 000004C0 [5B19000000000000] 
   451 000004C8 E84B070000              	call bind_primitive
   452                                  
   453                                  	; building closure for vector-set!
   454 000004CD 48BF-                   	mov rdi, free_var_49
   454 000004CF [8801000000000000] 
   455 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   455 000004D9 [B719000000000000] 
   456 000004E1 E832070000              	call bind_primitive
   457                                  
   458                                  	; building closure for string-set!
   459 000004E6 48BF-                   	mov rdi, free_var_50
   459 000004E8 [9001000000000000] 
   460 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   460 000004F2 [211A000000000000] 
   461 000004FA E819070000              	call bind_primitive
   462                                  
   463                                  	; building closure for make-vector
   464 000004FF 48BF-                   	mov rdi, free_var_51
   464 00000501 [9801000000000000] 
   465 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   465 0000050B [961A000000000000] 
   466 00000513 E800070000              	call bind_primitive
   467                                  
   468                                  	; building closure for make-string
   469 00000518 48BF-                   	mov rdi, free_var_52
   469 0000051A [A001000000000000] 
   470 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   470 00000524 [001B000000000000] 
   471 0000052C E8E7060000              	call bind_primitive
   472                                  
   473                                  	; building closure for numerator
   474 00000531 48BF-                   	mov rdi, free_var_53
   474 00000533 [A801000000000000] 
   475 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   475 0000053D [721B000000000000] 
   476 00000545 E8CE060000              	call bind_primitive
   477                                  
   478                                  	; building closure for denominator
   479 0000054A 48BF-                   	mov rdi, free_var_54
   479 0000054C [B001000000000000] 
   480 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   480 00000556 [9F1B000000000000] 
   481 0000055E E8B5060000              	call bind_primitive
   482                                  
   483                                  	; building closure for eq?
   484 00000563 48BF-                   	mov rdi, free_var_55
   484 00000565 [B801000000000000] 
   485 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   485 0000056F [CC1B000000000000] 
   486 00000577 E89C060000              	call bind_primitive
   487                                  
   488                                  	; code generated for ScmConst
   489 0000057C 48B8-                   	mov rax, L_constants + 6
   489 0000057E [0600000000000000] 
   490 00000586 48890425[C0010000]      	mov qword [free_var_56], rax
   491 0000058E 48B8-                   	mov rax, sob_void
   491 00000590 [0000000000000000] 
   492                                  
   493 00000598 4889C7                  	mov rdi, rax
   494 0000059B E8F8000000              	call print_sexpr_if_not_void
   495                                  
   496                                  	; code generated for ScmVarGet' (Free))
   497 000005A0 488B0425[C0010000]      	mov rax, qword [free_var_56]
   498                                  
   499 000005A8 4889C7                  	mov rdi, rax
   500 000005AB E8E8000000              	call print_sexpr_if_not_void
   501                                  
   502 000005B0 48BF-                           mov rdi, fmt_memory_usage
   502 000005B2 [7600000000000000] 
   503 000005BA 488B3425[FD000000]              mov rsi, qword [top_of_memory]
   504 000005C2 4881EE[C8010000]                sub rsi, memory
   505 000005C9 B800000000                      mov rax, 0
   506                                  	ENTER
    33 000005CE C8000000            <1>  enter 0, 0
    34 000005D2 4883E4F0            <1>  and rsp, ~15
   507 000005D6 E8(00000000)                    call printf
   508                                  	LEAVE
    38 000005DB C9                  <1>  leave
   509 000005DC C9                      	leave
   510 000005DD C3                      	ret
   511                                  
   512                                  L_error_non_closure:
   513 000005DE 488B3C25[00000000]              mov rdi, qword [stderr]
   514 000005E6 48BE-                           mov rsi, fmt_non_closure
   514 000005E8 [AD00000000000000] 
   515 000005F0 B800000000                      mov rax, 0
   516                                  	ENTER
    33 000005F5 C8000000            <1>  enter 0, 0
    34 000005F9 4883E4F0            <1>  and rsp, ~15
   517 000005FD E8(00000000)                    call fprintf
   518                                  	LEAVE
    38 00000602 C9                  <1>  leave
   519 00000603 48C7C0FEFFFFFF                  mov rax, -2
   520 0000060A E8(00000000)                    call exit
   521                                  
   522                                  L_error_improper_list:
   523 0000060F 488B3C25[00000000]      	mov rdi, qword [stderr]
   524 00000617 48BE-                   	mov rsi, fmt_error_improper_list
   524 00000619 [D500000000000000] 
   525 00000621 B800000000              	mov rax, 0
   526                                  	ENTER
    33 00000626 C8000000            <1>  enter 0, 0
    34 0000062A 4883E4F0            <1>  and rsp, ~15
   527 0000062E E8(00000000)            	call fprintf
   528                                  	LEAVE
    38 00000633 C9                  <1>  leave
   529 00000634 48C7C0F9FFFFFF          	mov rax, -7
   530 0000063B E8(00000000)            	call exit
   531                                  
   532                                  L_error_incorrect_arity_simple:
   533 00000640 488B3C25[00000000]              mov rdi, qword [stderr]
   534 00000648 48BE-                           mov rsi, fmt_incorrect_arity_simple
   534 0000064A [1700000000000000] 
   535 00000652 EB12                            jmp L_error_incorrect_arity_common
   536                                  L_error_incorrect_arity_opt:
   537 00000654 488B3C25[00000000]              mov rdi, qword [stderr]
   538 0000065C 48BE-                           mov rsi, fmt_incorrect_arity_opt
   538 0000065E [4200000000000000] 
   539                                  L_error_incorrect_arity_common:
   540 00000666 5A                              pop rdx
   541 00000667 59                              pop rcx
   542 00000668 B800000000                      mov rax, 0
   543                                  	ENTER
    33 0000066D C8000000            <1>  enter 0, 0
    34 00000671 4883E4F0            <1>  and rsp, ~15
   544 00000675 E8(00000000)                    call fprintf
   545                                  	LEAVE
    38 0000067A C9                  <1>  leave
   546 0000067B 48C7C0FAFFFFFF                  mov rax, -6
   547 00000682 E8(00000000)                    call exit
   548                                  
   549                                  section .data
   550                                  fmt_incorrect_arity_simple:
   551 00000017 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   551 00000020 74656420256C642061-
   551 00000029 7267756D656E74732C-
   551 00000032 206275742067697665-
   551 0000003B 6E20256C640A00     
   552                                  fmt_incorrect_arity_opt:
   553 00000042 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   553 0000004B 746564206174206C65-
   553 00000054 61737420256C642061-
   553 0000005D 7267756D656E74732C-
   553 00000066 206275742067697665-
   553 0000006F 6E20256C640A00     
   554                                  fmt_memory_usage:
   555 00000076 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   555 0000007F 6420256C6420627974-
   555 00000088 6573206F662064796E-
   555 00000091 616D6963616C6C792D-
   555 0000009A 616C6C6F6361746564-
   555 000000A3 206D656D6F72790A0A-
   555 000000AC 00                 
   556                                  fmt_non_closure:
   557 000000AD 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   557 000000B6 7074696E6720746F20-
   557 000000BF 6170706C792061206E-
   557 000000C8 6F6E2D636C6F737572-
   557 000000D1 65210A00           
   558                                  fmt_error_improper_list:
   559 000000D5 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   559 000000DE 7267756D656E742069-
   559 000000E7 73206E6F7420612070-
   559 000000F0 726F706572206C6973-
   559 000000F9 74210A00           
   560                                  
   561                                  section .bss
   562                                  memory:
   563 000001C8 <res 40000000h>         	resb gbytes(1)
   564                                  
   565                                  section .data
   566                                  top_of_memory:
   567 000000FD [C801000000000000]              dq memory
   568                                  
   569                                  section .text
   570                                  malloc:
   571 00000687 488B0425[FD000000]              mov rax, qword [top_of_memory]
   572 0000068F 48013C25[FD000000]              add qword [top_of_memory], rdi
   573 00000697 C3                              ret
   574                                          
   575                                  print_sexpr_if_not_void:
   576 00000698 4881FF[00000000]        	cmp rdi, sob_void
   577 0000069F 7501                    	jne print_sexpr
   578 000006A1 C3                      	ret
   579                                  
   580                                  section .data
   581                                  fmt_void:
   582 00000105 233C766F69643E00        	db `#<void>\0`
   583                                  fmt_nil:
   584 0000010D 282900                  	db `()\0`
   585                                  fmt_boolean_false:
   586 00000110 236600                  	db `#f\0`
   587                                  fmt_boolean_true:
   588 00000113 237400                  	db `#t\0`
   589                                  fmt_char_backslash:
   590 00000116 235C5C00                	db `#\\\\\0`
   591                                  fmt_char_dquote:
   592 0000011A 235C2200                	db `#\\"\0`
   593                                  fmt_char_simple:
   594 0000011E 235C256300              	db `#\\%c\0`
   595                                  fmt_char_null:
   596 00000123 235C6E756C00            	db `#\\nul\0`
   597                                  fmt_char_bell:
   598 00000129 235C62656C6C00          	db `#\\bell\0`
   599                                  fmt_char_backspace:
   600 00000130 235C6261636B737061-     	db `#\\backspace\0`
   600 00000139 636500             
   601                                  fmt_char_tab:
   602 0000013C 235C74616200            	db `#\\tab\0`
   603                                  fmt_char_newline:
   604 00000142 235C6E65776C696E65-     	db `#\\newline\0`
   604 0000014B 00                 
   605                                  fmt_char_formfeed:
   606 0000014C 235C7061676500          	db `#\\page\0`
   607                                  fmt_char_return:
   608 00000153 235C72657475726E00      	db `#\\return\0`
   609                                  fmt_char_escape:
   610 0000015C 235C65736300            	db `#\\esc\0`
   611                                  fmt_char_space:
   612 00000162 235C737061636500        	db `#\\space\0`
   613                                  fmt_char_hex:
   614 0000016A 235C782530325800        	db `#\\x%02X\0`
   615                                  fmt_closure:
   616 00000172 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   616 0000017B 206174203078253038-
   616 00000184 5820656E763D307825-
   616 0000018D 30385820636F64653D-
   616 00000196 3078253038583E00   
   617                                  fmt_lparen:
   618 0000019E 2800                    	db `(\0`
   619                                  fmt_dotted_pair:
   620 000001A0 202E2000                	db ` . \0`
   621                                  fmt_rparen:
   622 000001A4 2900                    	db `)\0`
   623                                  fmt_space:
   624 000001A6 2000                    	db ` \0`
   625                                  fmt_empty_vector:
   626 000001A8 23282900                	db `#()\0`
   627                                  fmt_vector:
   628 000001AC 232800                  	db `#(\0`
   629                                  fmt_real:
   630 000001AF 256600                  	db `%f\0`
   631                                  fmt_fraction:
   632 000001B2 256C642F256C6400        	db `%ld/%ld\0`
   633                                  fmt_zero:
   634 000001BA 3000                    	db `0\0`
   635                                  fmt_int:
   636 000001BC 256C6400                	db `%ld\0`
   637                                  fmt_unknown_sexpr_error:
   638 000001C0 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   638 000001C9 6F723A20556E6B6E6F-
   638 000001D2 776E2074797065206F-
   638 000001DB 662073657870722028-
   638 000001E4 3078253032582920   
   639 000001EC 617420616464726573-     	db `at address 0x%08X\n\n\0`
   639 000001F5 73203078253038580A-
   639 000001FE 0A00               
   640                                  fmt_dquote:
   641 00000200 2200                    	db `\"\0`
   642                                  fmt_string_char:
   643 00000202 256300                          db `%c\0`
   644                                  fmt_string_char_7:
   645 00000205 5C6100                          db `\\a\0`
   646                                  fmt_string_char_8:
   647 00000208 5C6200                          db `\\b\0`
   648                                  fmt_string_char_9:
   649 0000020B 5C7400                          db `\\t\0`
   650                                  fmt_string_char_10:
   651 0000020E 5C6E00                          db `\\n\0`
   652                                  fmt_string_char_11:
   653 00000211 5C7600                          db `\\v\0`
   654                                  fmt_string_char_12:
   655 00000214 5C6600                          db `\\f\0`
   656                                  fmt_string_char_13:
   657 00000217 5C7200                          db `\\r\0`
   658                                  fmt_string_char_34:
   659 0000021A 5C2200                          db `\\"\0`
   660                                  fmt_string_char_92:
   661 0000021D 5C5C00                          db `\\\\\0`
   662                                  fmt_string_char_hex:
   663 00000220 5C7825583B00                    db `\\x%X;\0`
   664                                  
   665                                  section .text
   666                                  
   667                                  print_sexpr:
   668                                  	ENTER
    33 000006A2 C8000000            <1>  enter 0, 0
    34 000006A6 4883E4F0            <1>  and rsp, ~15
   669 000006AA 8A07                    	mov al, byte [rdi]
   670 000006AC 3C00                    	cmp al, T_void
   671 000006AE 744D                    	je .Lvoid
   672 000006B0 3C01                    	cmp al, T_nil
   673 000006B2 7458                    	je .Lnil
   674 000006B4 3C09                    	cmp al, T_boolean_false
   675 000006B6 7463                    	je .Lboolean_false
   676 000006B8 3C0A                    	cmp al, T_boolean_true
   677 000006BA 746E                    	je .Lboolean_true
   678 000006BC 3C02                    	cmp al, T_char
   679 000006BE 7479                    	je .Lchar
   680 000006C0 3C04                    	cmp al, T_symbol
   681 000006C2 0F84BB010000            	je .Lsymbol
   682 000006C8 3C21                    	cmp al, T_pair
   683 000006CA 0F84D6010000            	je .Lpair
   684 000006D0 3C22                    	cmp al, T_vector
   685 000006D2 0F849F020000            	je .Lvector
   686 000006D8 3C05                    	cmp al, T_closure
   687 000006DA 0F8489010000            	je .Lclosure
   688 000006E0 3C12                    	cmp al, T_real
   689 000006E2 0F8430030000            	je .Lreal
   690 000006E8 3C11                    	cmp al, T_rational
   691 000006EA 0F8456030000            	je .Lrational
   692 000006F0 3C03                    	cmp al, T_string
   693 000006F2 0F848F030000            	je .Lstring
   694                                  
   695 000006F8 E9C7040000              	jmp .Lunknown_sexpr_type
   696                                  
   697                                  .Lvoid:
   698 000006FD 48BF-                   	mov rdi, fmt_void
   698 000006FF [0501000000000000] 
   699 00000707 E9F5040000              	jmp .Lemit
   700                                  
   701                                  .Lnil:
   702 0000070C 48BF-                   	mov rdi, fmt_nil
   702 0000070E [0D01000000000000] 
   703 00000716 E9E6040000              	jmp .Lemit
   704                                  
   705                                  .Lboolean_false:
   706 0000071B 48BF-                   	mov rdi, fmt_boolean_false
   706 0000071D [1001000000000000] 
   707 00000725 E9D7040000              	jmp .Lemit
   708                                  
   709                                  .Lboolean_true:
   710 0000072A 48BF-                   	mov rdi, fmt_boolean_true
   710 0000072C [1301000000000000] 
   711 00000734 E9C8040000              	jmp .Lemit
   712                                  
   713                                  .Lchar:
   714 00000739 8A4701                  	mov al, byte [rdi + 1]
   715 0000073C 3C20                    	cmp al, ' '
   716 0000073E 7E28                    	jle .Lchar_whitespace
   717 00000740 3C5C                    	cmp al, 92 		; backslash
   718 00000742 0F847C000000            	je .Lchar_backslash
   719 00000748 3C22                    	cmp al, '"'
   720 0000074A 0F8483000000            	je .Lchar_dquote
   721 00000750 4825FF000000            	and rax, 255
   722 00000756 48BF-                   	mov rdi, fmt_char_simple
   722 00000758 [1E01000000000000] 
   723 00000760 4889C6                  	mov rsi, rax
   724 00000763 E999040000              	jmp .Lemit
   725                                  
   726                                  .Lchar_whitespace:
   727 00000768 3C00                    	cmp al, 0
   728 0000076A 7476                    	je .Lchar_null
   729 0000076C 3C07                    	cmp al, 7
   730 0000076E 0F847D000000            	je .Lchar_bell
   731 00000774 3C08                    	cmp al, 8
   732 00000776 0F8484000000            	je .Lchar_backspace
   733 0000077C 3C09                    	cmp al, 9
   734 0000077E 0F848B000000            	je .Lchar_tab
   735 00000784 3C0A                    	cmp al, 10
   736 00000786 0F8492000000            	je .Lchar_newline
   737 0000078C 3C0C                    	cmp al, 12
   738 0000078E 0F8499000000            	je .Lchar_formfeed
   739 00000794 3C0D                    	cmp al, 13
   740 00000796 0F84A0000000            	je .Lchar_return
   741 0000079C 3C1B                    	cmp al, 27
   742 0000079E 0F84A7000000            	je .Lchar_escape
   743 000007A4 4825FF000000            	and rax, 255
   744 000007AA 3C20                    	cmp al, ' '
   745 000007AC 0F84A8000000            	je .Lchar_space
   746 000007B2 48BF-                   	mov rdi, fmt_char_hex
   746 000007B4 [6A01000000000000] 
   747 000007BC 4889C6                  	mov rsi, rax
   748 000007BF E93D040000              	jmp .Lemit	
   749                                  
   750                                  .Lchar_backslash:
   751 000007C4 48BF-                   	mov rdi, fmt_char_backslash
   751 000007C6 [1601000000000000] 
   752 000007CE E92E040000              	jmp .Lemit
   753                                  
   754                                  .Lchar_dquote:
   755 000007D3 48BF-                   	mov rdi, fmt_char_dquote
   755 000007D5 [1A01000000000000] 
   756 000007DD E91F040000              	jmp .Lemit
   757                                  
   758                                  .Lchar_null:
   759 000007E2 48BF-                   	mov rdi, fmt_char_null
   759 000007E4 [2301000000000000] 
   760 000007EC E910040000              	jmp .Lemit
   761                                  
   762                                  .Lchar_bell:
   763 000007F1 48BF-                   	mov rdi, fmt_char_bell
   763 000007F3 [2901000000000000] 
   764 000007FB E901040000              	jmp .Lemit
   765                                  
   766                                  .Lchar_backspace:
   767 00000800 48BF-                   	mov rdi, fmt_char_backspace
   767 00000802 [3001000000000000] 
   768 0000080A E9F2030000              	jmp .Lemit
   769                                  
   770                                  .Lchar_tab:
   771 0000080F 48BF-                   	mov rdi, fmt_char_tab
   771 00000811 [3C01000000000000] 
   772 00000819 E9E3030000              	jmp .Lemit
   773                                  
   774                                  .Lchar_newline:
   775 0000081E 48BF-                   	mov rdi, fmt_char_newline
   775 00000820 [4201000000000000] 
   776 00000828 E9D4030000              	jmp .Lemit
   777                                  
   778                                  .Lchar_formfeed:
   779 0000082D 48BF-                   	mov rdi, fmt_char_formfeed
   779 0000082F [4C01000000000000] 
   780 00000837 E9C5030000              	jmp .Lemit
   781                                  
   782                                  .Lchar_return:
   783 0000083C 48BF-                   	mov rdi, fmt_char_return
   783 0000083E [5301000000000000] 
   784 00000846 E9B6030000              	jmp .Lemit
   785                                  
   786                                  .Lchar_escape:
   787 0000084B 48BF-                   	mov rdi, fmt_char_escape
   787 0000084D [5C01000000000000] 
   788 00000855 E9A7030000              	jmp .Lemit
   789                                  
   790                                  .Lchar_space:
   791 0000085A 48BF-                   	mov rdi, fmt_char_space
   791 0000085C [6201000000000000] 
   792 00000864 E998030000              	jmp .Lemit
   793                                  
   794                                  .Lclosure:
   795 00000869 4889FE                  	mov rsi, qword rdi
   796 0000086C 48BF-                   	mov rdi, fmt_closure
   796 0000086E [7201000000000000] 
   797 00000876 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   798 0000087A 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   799 0000087E E97E030000              	jmp .Lemit
   800                                  
   801                                  .Lsymbol:
   802 00000883 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   803 00000887 BE01000000              	mov rsi, 1		 ; size = 1 byte
   804 0000088C 488B5701                	mov rdx, qword [rdi + 1] ; length
   805 00000890 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   806 00000894 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   807 0000089C E8(00000000)            	call fwrite
   808 000008A1 E970030000              	jmp .Lend
   809                                  	
   810                                  .Lpair:
   811 000008A6 57                      	push rdi
   812 000008A7 48BF-                   	mov rdi, fmt_lparen
   812 000008A9 [9E01000000000000] 
   813 000008B1 B800000000              	mov rax, 0
   814                                          ENTER
    33 000008B6 C8000000            <1>  enter 0, 0
    34 000008BA 4883E4F0            <1>  and rsp, ~15
   815 000008BE E8(00000000)            	call printf
   816                                          LEAVE
    38 000008C3 C9                  <1>  leave
   817 000008C4 488B3C24                	mov rdi, qword [rsp] 	; pair
   818 000008C8 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   819 000008CC E8D1FDFFFF              	call print_sexpr
   820 000008D1 5F                      	pop rdi 		; pair
   821 000008D2 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   822                                  .Lcdr:
   823 000008D6 8A07                    	mov al, byte [rdi]
   824 000008D8 3C01                    	cmp al, T_nil
   825 000008DA 7447                    	je .Lcdr_nil
   826 000008DC 3C21                    	cmp al, T_pair
   827 000008DE 7462                    	je .Lcdr_pair
   828 000008E0 57                      	push rdi
   829 000008E1 48BF-                   	mov rdi, fmt_dotted_pair
   829 000008E3 [A001000000000000] 
   830 000008EB B800000000              	mov rax, 0
   831                                  	ENTER
    33 000008F0 C8000000            <1>  enter 0, 0
    34 000008F4 4883E4F0            <1>  and rsp, ~15
   832 000008F8 E8(00000000)            	call printf
   833                                  	LEAVE
    38 000008FD C9                  <1>  leave
   834 000008FE 5F                      	pop rdi
   835 000008FF E89EFDFFFF              	call print_sexpr
   836 00000904 48BF-                   	mov rdi, fmt_rparen
   836 00000906 [A401000000000000] 
   837 0000090E B800000000              	mov rax, 0
   838                                  	ENTER
    33 00000913 C8000000            <1>  enter 0, 0
    34 00000917 4883E4F0            <1>  and rsp, ~15
   839 0000091B E8(00000000)            	call printf
   840                                  	LEAVE
    38 00000920 C9                  <1>  leave
   841                                  	LEAVE
    38 00000921 C9                  <1>  leave
   842 00000922 C3                      	ret
   843                                  
   844                                  .Lcdr_nil:
   845 00000923 48BF-                   	mov rdi, fmt_rparen
   845 00000925 [A401000000000000] 
   846 0000092D B800000000              	mov rax, 0
   847                                  	ENTER
    33 00000932 C8000000            <1>  enter 0, 0
    34 00000936 4883E4F0            <1>  and rsp, ~15
   848 0000093A E8(00000000)            	call printf
   849                                  	LEAVE
    38 0000093F C9                  <1>  leave
   850                                  	LEAVE
    38 00000940 C9                  <1>  leave
   851 00000941 C3                      	ret
   852                                  
   853                                  .Lcdr_pair:
   854 00000942 57                      	push rdi
   855 00000943 48BF-                   	mov rdi, fmt_space
   855 00000945 [A601000000000000] 
   856 0000094D B800000000              	mov rax, 0
   857                                  	ENTER
    33 00000952 C8000000            <1>  enter 0, 0
    34 00000956 4883E4F0            <1>  and rsp, ~15
   858 0000095A E8(00000000)            	call printf
   859                                  	LEAVE
    38 0000095F C9                  <1>  leave
   860 00000960 488B3C24                	mov rdi, qword [rsp]
   861 00000964 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   862 00000968 E835FDFFFF              	call print_sexpr
   863 0000096D 5F                      	pop rdi
   864 0000096E 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   865 00000972 E95FFFFFFF              	jmp .Lcdr
   866                                  
   867                                  .Lvector:
   868 00000977 488B4701                	mov rax, qword [rdi + 1] ; length
   869 0000097B 4883F800                	cmp rax, 0
   870 0000097F 0F8484000000            	je .Lvector_empty
   871 00000985 57                      	push rdi
   872 00000986 48BF-                   	mov rdi, fmt_vector
   872 00000988 [AC01000000000000] 
   873 00000990 B800000000              	mov rax, 0
   874                                  	ENTER
    33 00000995 C8000000            <1>  enter 0, 0
    34 00000999 4883E4F0            <1>  and rsp, ~15
   875 0000099D E8(00000000)            	call printf
   876                                  	LEAVE
    38 000009A2 C9                  <1>  leave
   877 000009A3 488B3C24                	mov rdi, qword [rsp]
   878 000009A7 FF7701                  	push qword [rdi + 1]
   879 000009AA 6A01                    	push 1
   880 000009AC 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   881 000009B0 E8EDFCFFFF              	call print_sexpr
   882                                  .Lvector_loop:
   883                                  	; [rsp] index
   884                                  	; [rsp + 8*1] limit
   885                                  	; [rsp + 8*2] vector
   886 000009B5 488B0424                	mov rax, qword [rsp]
   887 000009B9 483B442408              	cmp rax, qword [rsp + 8*1]
   888 000009BE 7436                    	je .Lvector_end
   889 000009C0 48BF-                   	mov rdi, fmt_space
   889 000009C2 [A601000000000000] 
   890 000009CA B800000000              	mov rax, 0
   891                                  	ENTER
    33 000009CF C8000000            <1>  enter 0, 0
    34 000009D3 4883E4F0            <1>  and rsp, ~15
   892 000009D7 E8(00000000)            	call printf
   893                                  	LEAVE
    38 000009DC C9                  <1>  leave
   894 000009DD 488B0424                	mov rax, qword [rsp]
   895 000009E1 488B5C2410              	mov rbx, qword [rsp + 8*2]
   896 000009E6 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   897 000009EB E8B2FCFFFF              	call print_sexpr
   898 000009F0 48FF0424                	inc qword [rsp]
   899 000009F4 EBBF                    	jmp .Lvector_loop
   900                                  
   901                                  .Lvector_end:
   902 000009F6 4883C418                	add rsp, 8*3
   903 000009FA 48BF-                   	mov rdi, fmt_rparen
   903 000009FC [A401000000000000] 
   904 00000A04 E9F8010000              	jmp .Lemit	
   905                                  
   906                                  .Lvector_empty:
   907 00000A09 48BF-                   	mov rdi, fmt_empty_vector
   907 00000A0B [A801000000000000] 
   908 00000A13 E9E9010000              	jmp .Lemit
   909                                  
   910                                  .Lreal:
   911 00000A18 FF7701                  	push qword [rdi + 1]
   912 00000A1B F20F100424              	movsd xmm0, qword [rsp]
   913 00000A20 4883C408                	add rsp, 8*1
   914 00000A24 48BF-                   	mov rdi, fmt_real
   914 00000A26 [AF01000000000000] 
   915 00000A2E B801000000              	mov rax, 1
   916                                  	ENTER
    33 00000A33 C8000000            <1>  enter 0, 0
    34 00000A37 4883E4F0            <1>  and rsp, ~15
   917 00000A3B E8(00000000)            	call printf
   918                                  	LEAVE
    38 00000A40 C9                  <1>  leave
   919 00000A41 E9D0010000              	jmp .Lend
   920                                  
   921                                  .Lrational:
   922 00000A46 488B7701                	mov rsi, qword [rdi + 1]
   923 00000A4A 488B5709                	mov rdx, qword [rdi + 1 + 8]
   924 00000A4E 4883FE00                	cmp rsi, 0
   925 00000A52 7415                    	je .Lrat_zero
   926 00000A54 4883FA01                	cmp rdx, 1
   927 00000A58 741E                    	je .Lrat_int
   928 00000A5A 48BF-                   	mov rdi, fmt_fraction
   928 00000A5C [B201000000000000] 
   929 00000A64 E998010000              	jmp .Lemit
   930                                  
   931                                  .Lrat_zero:
   932 00000A69 48BF-                   	mov rdi, fmt_zero
   932 00000A6B [BA01000000000000] 
   933 00000A73 E989010000              	jmp .Lemit
   934                                  
   935                                  .Lrat_int:
   936 00000A78 48BF-                   	mov rdi, fmt_int
   936 00000A7A [BC01000000000000] 
   937 00000A82 E97A010000              	jmp .Lemit
   938                                  
   939                                  .Lstring:
   940 00000A87 488D4709                	lea rax, [rdi + 1 + 8]
   941 00000A8B 50                      	push rax
   942 00000A8C FF7701                  	push qword [rdi + 1]
   943 00000A8F 48BF-                   	mov rdi, fmt_dquote
   943 00000A91 [0002000000000000] 
   944 00000A99 B800000000              	mov rax, 0
   945                                  	ENTER
    33 00000A9E C8000000            <1>  enter 0, 0
    34 00000AA2 4883E4F0            <1>  and rsp, ~15
   946 00000AA6 E8(00000000)            	call printf
   947                                  	LEAVE
    38 00000AAB C9                  <1>  leave
   948                                  .Lstring_loop:
   949                                  	; qword [rsp]: limit
   950                                  	; qword [rsp + 8*1]: char *
   951 00000AAC 48833C2400              	cmp qword [rsp], 0
   952 00000AB1 0F84FD000000            	je .Lstring_end
   953 00000AB7 488B442408              	mov rax, qword [rsp + 8*1]
   954 00000ABC 8A00                    	mov al, byte [rax]
   955 00000ABE 4825FF000000            	and rax, 255
   956 00000AC4 3C07                    	cmp al, 7
   957 00000AC6 7468                            je .Lstring_char_7
   958 00000AC8 3C08                            cmp al, 8
   959 00000ACA 7470                            je .Lstring_char_8
   960 00000ACC 3C09                            cmp al, 9
   961 00000ACE 7478                            je .Lstring_char_9
   962 00000AD0 3C0A                            cmp al, 10
   963 00000AD2 0F847C000000                    je .Lstring_char_10
   964 00000AD8 3C0B                            cmp al, 11
   965 00000ADA 0F8480000000                    je .Lstring_char_11
   966 00000AE0 3C0C                            cmp al, 12
   967 00000AE2 0F8484000000                    je .Lstring_char_12
   968 00000AE8 3C0D                            cmp al, 13
   969 00000AEA 0F8488000000                    je .Lstring_char_13
   970 00000AF0 3C22                            cmp al, 34
   971 00000AF2 0F848C000000                    je .Lstring_char_34
   972 00000AF8 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   974 00000AFA 3C20                            cmp al, ' '
   975 00000AFC 0F8CA0000000                    jl .Lstring_char_hex
   976 00000B02 48BF-                           mov rdi, fmt_string_char
   976 00000B04 [0202000000000000] 
   977 00000B0C 4889C6                          mov rsi, rax
   978                                  .Lstring_char_emit:
   979 00000B0F B800000000                      mov rax, 0
   980                                          ENTER
    33 00000B14 C8000000            <1>  enter 0, 0
    34 00000B18 4883E4F0            <1>  and rsp, ~15
   981 00000B1C E8(00000000)                    call printf
   982                                          LEAVE
    38 00000B21 C9                  <1>  leave
   983 00000B22 48FF0C24                        dec qword [rsp]
   984 00000B26 48FF442408                      inc qword [rsp + 8*1]
   985 00000B2B E97CFFFFFF                      jmp .Lstring_loop
   986                                  
   987                                  .Lstring_char_7:
   988 00000B30 48BF-                           mov rdi, fmt_string_char_7
   988 00000B32 [0502000000000000] 
   989 00000B3A EBD3                            jmp .Lstring_char_emit
   990                                  
   991                                  .Lstring_char_8:
   992 00000B3C 48BF-                           mov rdi, fmt_string_char_8
   992 00000B3E [0802000000000000] 
   993 00000B46 EBC7                            jmp .Lstring_char_emit
   994                                          
   995                                  .Lstring_char_9:
   996 00000B48 48BF-                           mov rdi, fmt_string_char_9
   996 00000B4A [0B02000000000000] 
   997 00000B52 EBBB                            jmp .Lstring_char_emit
   998                                  
   999                                  .Lstring_char_10:
  1000 00000B54 48BF-                           mov rdi, fmt_string_char_10
  1000 00000B56 [0E02000000000000] 
  1001 00000B5E EBAF                            jmp .Lstring_char_emit
  1002                                  
  1003                                  .Lstring_char_11:
  1004 00000B60 48BF-                           mov rdi, fmt_string_char_11
  1004 00000B62 [1102000000000000] 
  1005 00000B6A EBA3                            jmp .Lstring_char_emit
  1006                                  
  1007                                  .Lstring_char_12:
  1008 00000B6C 48BF-                           mov rdi, fmt_string_char_12
  1008 00000B6E [1402000000000000] 
  1009 00000B76 EB97                            jmp .Lstring_char_emit
  1010                                  
  1011                                  .Lstring_char_13:
  1012 00000B78 48BF-                           mov rdi, fmt_string_char_13
  1012 00000B7A [1702000000000000] 
  1013 00000B82 EB8B                            jmp .Lstring_char_emit
  1014                                  
  1015                                  .Lstring_char_34:
  1016 00000B84 48BF-                           mov rdi, fmt_string_char_34
  1016 00000B86 [1A02000000000000] 
  1017 00000B8E E97CFFFFFF                      jmp .Lstring_char_emit
  1018                                  
  1019                                  .Lstring_char_92:
  1020 00000B93 48BF-                           mov rdi, fmt_string_char_92
  1020 00000B95 [1D02000000000000] 
  1021 00000B9D E96DFFFFFF                      jmp .Lstring_char_emit
  1022                                  
  1023                                  .Lstring_char_hex:
  1024 00000BA2 48BF-                           mov rdi, fmt_string_char_hex
  1024 00000BA4 [2002000000000000] 
  1025 00000BAC 4889C6                          mov rsi, rax
  1026 00000BAF E95BFFFFFF                      jmp .Lstring_char_emit        
  1027                                  
  1028                                  .Lstring_end:
  1029 00000BB4 4883C410                	add rsp, 8 * 2
  1030 00000BB8 48BF-                   	mov rdi, fmt_dquote
  1030 00000BBA [0002000000000000] 
  1031 00000BC2 EB3D                    	jmp .Lemit
  1032                                  
  1033                                  .Lunknown_sexpr_type:
  1034 00000BC4 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1034 00000BC6 [C001000000000000] 
  1035 00000BCE 4825FF000000            	and rax, 255
  1036 00000BD4 4889C2                  	mov rdx, rax
  1037 00000BD7 4889F9                  	mov rcx, rdi
  1038 00000BDA 488B3C25[00000000]      	mov rdi, qword [stderr]
  1039 00000BE2 B800000000              	mov rax, 0
  1040                                  	ENTER
    33 00000BE7 C8000000            <1>  enter 0, 0
    34 00000BEB 4883E4F0            <1>  and rsp, ~15
  1041 00000BEF E8(00000000)            	call fprintf
  1042                                  	LEAVE
    38 00000BF4 C9                  <1>  leave
  1043 00000BF5 48C7C0FFFFFFFF          	mov rax, -1
  1044 00000BFC E8(00000000)            	call exit
  1045                                  
  1046                                  .Lemit:
  1047 00000C01 B800000000              	mov rax, 0
  1048                                  	ENTER
    33 00000C06 C8000000            <1>  enter 0, 0
    34 00000C0A 4883E4F0            <1>  and rsp, ~15
  1049 00000C0E E8(00000000)            	call printf
  1050                                  	LEAVE
    38 00000C13 C9                  <1>  leave
  1051 00000C14 EB00                    	jmp .Lend
  1052                                  
  1053                                  .Lend:
  1054                                  	LEAVE
    38 00000C16 C9                  <1>  leave
  1055 00000C17 C3                      	ret
  1056                                  
  1057                                  ;;; rdi: address of free variable
  1058                                  ;;; rsi: address of code-pointer
  1059                                  bind_primitive:
  1060                                          ENTER
    33 00000C18 C8000000            <1>  enter 0, 0
    34 00000C1C 4883E4F0            <1>  and rsp, ~15
  1061 00000C20 57                              push rdi
  1062 00000C21 BF11000000                      mov rdi, (1 + 8 + 8)
  1063 00000C26 E85CFAFFFF                      call malloc
  1064 00000C2B 5F                              pop rdi
  1065 00000C2C C60005                          mov byte [rax], T_closure
  1066 00000C2F 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1067 00000C37 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1068 00000C3B 488907                          mov qword [rdi], rax
  1069                                          LEAVE
    38 00000C3E C9                  <1>  leave
  1070 00000C3F C3                              ret
  1071                                  
  1072                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1073                                  L_code_ptr_bin_apply:
  1074                                  	
  1075                                  L_code_ptr_is_null:
  1076                                          ENTER
    33 00000C40 C8000000            <1>  enter 0, 0
    34 00000C44 4883E4F0            <1>  and rsp, ~15
  1077 00000C48 48837D1801                      cmp COUNT, 1
  1078 00000C4D 0F85A5100000                    jne L_error_arg_count_1
  1079 00000C53 488B4520                        mov rax, PARAM(0)
  1080 00000C57 803801                          cmp byte [rax], T_nil
  1081 00000C5A 750C                            jne .L_false
  1082 00000C5C 48B8-                           mov rax, sob_boolean_true
  1082 00000C5E [0300000000000000] 
  1083 00000C66 EB0A                            jmp .L_end
  1084                                  .L_false:
  1085 00000C68 48B8-                           mov rax, sob_boolean_false
  1085 00000C6A [0200000000000000] 
  1086                                  .L_end:
  1087                                          LEAVE
    38 00000C72 C9                  <1>  leave
  1088 00000C73 C21800                          ret AND_KILL_FRAME(1)
  1089                                  
  1090                                  L_code_ptr_is_pair:
  1091                                          ENTER
    33 00000C76 C8000000            <1>  enter 0, 0
    34 00000C7A 4883E4F0            <1>  and rsp, ~15
  1092 00000C7E 48837D1801                      cmp COUNT, 1
  1093 00000C83 0F856F100000                    jne L_error_arg_count_1
  1094 00000C89 488B4520                        mov rax, PARAM(0)
  1095 00000C8D 803821                          cmp byte [rax], T_pair
  1096 00000C90 750C                            jne .L_false
  1097 00000C92 48B8-                           mov rax, sob_boolean_true
  1097 00000C94 [0300000000000000] 
  1098 00000C9C EB0A                            jmp .L_end
  1099                                  .L_false:
  1100 00000C9E 48B8-                           mov rax, sob_boolean_false
  1100 00000CA0 [0200000000000000] 
  1101                                  .L_end:
  1102                                          LEAVE
    38 00000CA8 C9                  <1>  leave
  1103 00000CA9 C21800                          ret AND_KILL_FRAME(1)
  1104                                          
  1105                                  L_code_ptr_is_void:
  1106                                          ENTER
    33 00000CAC C8000000            <1>  enter 0, 0
    34 00000CB0 4883E4F0            <1>  and rsp, ~15
  1107 00000CB4 48837D1801                      cmp COUNT, 1
  1108 00000CB9 0F8539100000                    jne L_error_arg_count_1
  1109 00000CBF 488B4520                        mov rax, PARAM(0)
  1110 00000CC3 803800                          cmp byte [rax], T_void
  1111 00000CC6 750C                            jne .L_false
  1112 00000CC8 48B8-                           mov rax, sob_boolean_true
  1112 00000CCA [0300000000000000] 
  1113 00000CD2 EB0A                            jmp .L_end
  1114                                  .L_false:
  1115 00000CD4 48B8-                           mov rax, sob_boolean_false
  1115 00000CD6 [0200000000000000] 
  1116                                  .L_end:
  1117                                          LEAVE
    38 00000CDE C9                  <1>  leave
  1118 00000CDF C21800                          ret AND_KILL_FRAME(1)
  1119                                  
  1120                                  L_code_ptr_is_char:
  1121                                          ENTER
    33 00000CE2 C8000000            <1>  enter 0, 0
    34 00000CE6 4883E4F0            <1>  and rsp, ~15
  1122 00000CEA 48837D1801                      cmp COUNT, 1
  1123 00000CEF 0F8503100000                    jne L_error_arg_count_1
  1124 00000CF5 488B4520                        mov rax, PARAM(0)
  1125 00000CF9 803802                          cmp byte [rax], T_char
  1126 00000CFC 750C                            jne .L_false
  1127 00000CFE 48B8-                           mov rax, sob_boolean_true
  1127 00000D00 [0300000000000000] 
  1128 00000D08 EB0A                            jmp .L_end
  1129                                  .L_false:
  1130 00000D0A 48B8-                           mov rax, sob_boolean_false
  1130 00000D0C [0200000000000000] 
  1131                                  .L_end:
  1132                                          LEAVE
    38 00000D14 C9                  <1>  leave
  1133 00000D15 C21800                          ret AND_KILL_FRAME(1)
  1134                                  
  1135                                  L_code_ptr_is_string:
  1136                                          ENTER
    33 00000D18 C8000000            <1>  enter 0, 0
    34 00000D1C 4883E4F0            <1>  and rsp, ~15
  1137 00000D20 48837D1801                      cmp COUNT, 1
  1138 00000D25 0F85CD0F0000                    jne L_error_arg_count_1
  1139 00000D2B 488B4520                        mov rax, PARAM(0)
  1140 00000D2F 803803                          cmp byte [rax], T_string
  1141 00000D32 750C                            jne .L_false
  1142 00000D34 48B8-                           mov rax, sob_boolean_true
  1142 00000D36 [0300000000000000] 
  1143 00000D3E EB0A                            jmp .L_end
  1144                                  .L_false:
  1145 00000D40 48B8-                           mov rax, sob_boolean_false
  1145 00000D42 [0200000000000000] 
  1146                                  .L_end:
  1147                                          LEAVE
    38 00000D4A C9                  <1>  leave
  1148 00000D4B C21800                          ret AND_KILL_FRAME(1)
  1149                                  
  1150                                  L_code_ptr_is_symbol:
  1151                                          ENTER
    33 00000D4E C8000000            <1>  enter 0, 0
    34 00000D52 4883E4F0            <1>  and rsp, ~15
  1152 00000D56 48837D1801                      cmp COUNT, 1
  1153 00000D5B 0F85970F0000                    jne L_error_arg_count_1
  1154 00000D61 488B4520                        mov rax, PARAM(0)
  1155 00000D65 803804                          cmp byte [rax], T_symbol
  1156 00000D68 750C                            jne .L_false
  1157 00000D6A 48B8-                           mov rax, sob_boolean_true
  1157 00000D6C [0300000000000000] 
  1158 00000D74 EB0A                            jmp .L_end
  1159                                  .L_false:
  1160 00000D76 48B8-                           mov rax, sob_boolean_false
  1160 00000D78 [0200000000000000] 
  1161                                  .L_end:
  1162                                          LEAVE
    38 00000D80 C9                  <1>  leave
  1163 00000D81 C21800                          ret AND_KILL_FRAME(1)
  1164                                  
  1165                                  L_code_ptr_is_vector:
  1166                                          ENTER
    33 00000D84 C8000000            <1>  enter 0, 0
    34 00000D88 4883E4F0            <1>  and rsp, ~15
  1167 00000D8C 48837D1801                      cmp COUNT, 1
  1168 00000D91 0F85610F0000                    jne L_error_arg_count_1
  1169 00000D97 488B4520                        mov rax, PARAM(0)
  1170 00000D9B 803822                          cmp byte [rax], T_vector
  1171 00000D9E 750C                            jne .L_false
  1172 00000DA0 48B8-                           mov rax, sob_boolean_true
  1172 00000DA2 [0300000000000000] 
  1173 00000DAA EB0A                            jmp .L_end
  1174                                  .L_false:
  1175 00000DAC 48B8-                           mov rax, sob_boolean_false
  1175 00000DAE [0200000000000000] 
  1176                                  .L_end:
  1177                                          LEAVE
    38 00000DB6 C9                  <1>  leave
  1178 00000DB7 C21800                          ret AND_KILL_FRAME(1)
  1179                                  
  1180                                  L_code_ptr_is_closure:
  1181                                          ENTER
    33 00000DBA C8000000            <1>  enter 0, 0
    34 00000DBE 4883E4F0            <1>  and rsp, ~15
  1182 00000DC2 48837D1801                      cmp COUNT, 1
  1183 00000DC7 0F852B0F0000                    jne L_error_arg_count_1
  1184 00000DCD 488B4520                        mov rax, PARAM(0)
  1185 00000DD1 803805                          cmp byte [rax], T_closure
  1186 00000DD4 750C                            jne .L_false
  1187 00000DD6 48B8-                           mov rax, sob_boolean_true
  1187 00000DD8 [0300000000000000] 
  1188 00000DE0 EB0A                            jmp .L_end
  1189                                  .L_false:
  1190 00000DE2 48B8-                           mov rax, sob_boolean_false
  1190 00000DE4 [0200000000000000] 
  1191                                  .L_end:
  1192                                          LEAVE
    38 00000DEC C9                  <1>  leave
  1193 00000DED C21800                          ret AND_KILL_FRAME(1)
  1194                                  
  1195                                  L_code_ptr_is_real:
  1196                                          ENTER
    33 00000DF0 C8000000            <1>  enter 0, 0
    34 00000DF4 4883E4F0            <1>  and rsp, ~15
  1197 00000DF8 48837D1801                      cmp COUNT, 1
  1198 00000DFD 0F85F50E0000                    jne L_error_arg_count_1
  1199 00000E03 488B4520                        mov rax, PARAM(0)
  1200 00000E07 803812                          cmp byte [rax], T_real
  1201 00000E0A 750C                            jne .L_false
  1202 00000E0C 48B8-                           mov rax, sob_boolean_true
  1202 00000E0E [0300000000000000] 
  1203 00000E16 EB0A                            jmp .L_end
  1204                                  .L_false:
  1205 00000E18 48B8-                           mov rax, sob_boolean_false
  1205 00000E1A [0200000000000000] 
  1206                                  .L_end:
  1207                                          LEAVE
    38 00000E22 C9                  <1>  leave
  1208 00000E23 C21800                          ret AND_KILL_FRAME(1)
  1209                                  
  1210                                  L_code_ptr_is_rational:
  1211                                          ENTER
    33 00000E26 C8000000            <1>  enter 0, 0
    34 00000E2A 4883E4F0            <1>  and rsp, ~15
  1212 00000E2E 48837D1801                      cmp COUNT, 1
  1213 00000E33 0F85BF0E0000                    jne L_error_arg_count_1
  1214 00000E39 488B4520                        mov rax, PARAM(0)
  1215 00000E3D 803811                          cmp byte [rax], T_rational
  1216 00000E40 750C                            jne .L_false
  1217 00000E42 48B8-                           mov rax, sob_boolean_true
  1217 00000E44 [0300000000000000] 
  1218 00000E4C EB0A                            jmp .L_end
  1219                                  .L_false:
  1220 00000E4E 48B8-                           mov rax, sob_boolean_false
  1220 00000E50 [0200000000000000] 
  1221                                  .L_end:
  1222                                          LEAVE
    38 00000E58 C9                  <1>  leave
  1223 00000E59 C21800                          ret AND_KILL_FRAME(1)
  1224                                  
  1225                                  L_code_ptr_is_boolean:
  1226                                          ENTER
    33 00000E5C C8000000            <1>  enter 0, 0
    34 00000E60 4883E4F0            <1>  and rsp, ~15
  1227 00000E64 48837D1801                      cmp COUNT, 1
  1228 00000E69 0F85890E0000                    jne L_error_arg_count_1
  1229 00000E6F 488B4520                        mov rax, PARAM(0)
  1230 00000E73 8A18                            mov bl, byte [rax]
  1231 00000E75 80E308                          and bl, T_boolean
  1232 00000E78 740C                            je .L_false
  1233 00000E7A 48B8-                           mov rax, sob_boolean_true
  1233 00000E7C [0300000000000000] 
  1234 00000E84 EB0A                            jmp .L_end
  1235                                  .L_false:
  1236 00000E86 48B8-                           mov rax, sob_boolean_false
  1236 00000E88 [0200000000000000] 
  1237                                  .L_end:
  1238                                          LEAVE
    38 00000E90 C9                  <1>  leave
  1239 00000E91 C21800                          ret AND_KILL_FRAME(1)
  1240                                          
  1241                                  L_code_ptr_is_number:
  1242                                          ENTER
    33 00000E94 C8000000            <1>  enter 0, 0
    34 00000E98 4883E4F0            <1>  and rsp, ~15
  1243 00000E9C 48837D1801                      cmp COUNT, 1
  1244 00000EA1 0F85510E0000                    jne L_error_arg_count_1
  1245 00000EA7 488B4520                        mov rax, PARAM(0)
  1246 00000EAB 8A18                            mov bl, byte [rax]
  1247 00000EAD 80E310                          and bl, T_number
  1248 00000EB0 740C                            je .L_false
  1249 00000EB2 48B8-                           mov rax, sob_boolean_true
  1249 00000EB4 [0300000000000000] 
  1250 00000EBC EB0A                            jmp .L_end
  1251                                  .L_false:
  1252 00000EBE 48B8-                           mov rax, sob_boolean_false
  1252 00000EC0 [0200000000000000] 
  1253                                  .L_end:
  1254                                          LEAVE
    38 00000EC8 C9                  <1>  leave
  1255 00000EC9 C21800                          ret AND_KILL_FRAME(1)
  1256                                          
  1257                                  L_code_ptr_is_collection:
  1258                                          ENTER
    33 00000ECC C8000000            <1>  enter 0, 0
    34 00000ED0 4883E4F0            <1>  and rsp, ~15
  1259 00000ED4 48837D1801                      cmp COUNT, 1
  1260 00000ED9 0F85190E0000                    jne L_error_arg_count_1
  1261 00000EDF 488B4520                        mov rax, PARAM(0)
  1262 00000EE3 8A18                            mov bl, byte [rax]
  1263 00000EE5 80E320                          and bl, T_collection
  1264 00000EE8 740C                            je .L_false
  1265 00000EEA 48B8-                           mov rax, sob_boolean_true
  1265 00000EEC [0300000000000000] 
  1266 00000EF4 EB0A                            jmp .L_end
  1267                                  .L_false:
  1268 00000EF6 48B8-                           mov rax, sob_boolean_false
  1268 00000EF8 [0200000000000000] 
  1269                                  .L_end:
  1270                                          LEAVE
    38 00000F00 C9                  <1>  leave
  1271 00000F01 C21800                          ret AND_KILL_FRAME(1)
  1272                                  
  1273                                  L_code_ptr_cons:
  1274                                          ENTER
    33 00000F04 C8000000            <1>  enter 0, 0
    34 00000F08 4883E4F0            <1>  and rsp, ~15
  1275 00000F0C 48837D1802                      cmp COUNT, 2
  1276 00000F11 0F85160E0000                    jne L_error_arg_count_2
  1277 00000F17 BF11000000                      mov rdi, (1 + 8 + 8)
  1278 00000F1C E866F7FFFF                      call malloc
  1279 00000F21 C60021                          mov byte [rax], T_pair
  1280 00000F24 488B5D20                        mov rbx, PARAM(0)
  1281 00000F28 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1282 00000F2C 488B5D28                        mov rbx, PARAM(1)
  1283 00000F30 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1284                                          LEAVE
    38 00000F34 C9                  <1>  leave
  1285 00000F35 C22000                          ret AND_KILL_FRAME(2)
  1286                                  
  1287                                  L_code_ptr_display_sexpr:
  1288                                          ENTER
    33 00000F38 C8000000            <1>  enter 0, 0
    34 00000F3C 4883E4F0            <1>  and rsp, ~15
  1289 00000F40 48837D1801                      cmp COUNT, 1
  1290 00000F45 0F85AD0D0000                    jne L_error_arg_count_1
  1291 00000F4B 488B7D20                        mov rdi, PARAM(0)
  1292 00000F4F E84EF7FFFF                      call print_sexpr
  1293 00000F54 48B8-                           mov rax, sob_void
  1293 00000F56 [0000000000000000] 
  1294                                          LEAVE
    38 00000F5E C9                  <1>  leave
  1295 00000F5F C21800                          ret AND_KILL_FRAME(1)
  1296                                  
  1297                                  L_code_ptr_write_char:
  1298                                          ENTER
    33 00000F62 C8000000            <1>  enter 0, 0
    34 00000F66 4883E4F0            <1>  and rsp, ~15
  1299 00000F6A 48837D1801                      cmp COUNT, 1
  1300 00000F6F 0F85830D0000                    jne L_error_arg_count_1
  1301 00000F75 488B4520                        mov rax, PARAM(0)
  1302                                          assert_char(rax)
    42 00000F79 803802              <1>  cmp byte [%1], %2
    43 00000F7C 0F854A0E0000        <1>  jne L_error_incorrect_type
  1303 00000F82 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1304 00000F85 4825FF000000                    and rax, 255
  1305 00000F8B 48BF-                           mov rdi, fmt_char
  1305 00000F8D [2602000000000000] 
  1306 00000F95 4889C6                          mov rsi, rax
  1307 00000F98 B800000000                      mov rax, 0
  1308                                  	ENTER
    33 00000F9D C8000000            <1>  enter 0, 0
    34 00000FA1 4883E4F0            <1>  and rsp, ~15
  1309 00000FA5 E8(00000000)                    call printf
  1310                                  	LEAVE
    38 00000FAA C9                  <1>  leave
  1311 00000FAB 48B8-                           mov rax, sob_void
  1311 00000FAD [0000000000000000] 
  1312                                          LEAVE
    38 00000FB5 C9                  <1>  leave
  1313 00000FB6 C21800                          ret AND_KILL_FRAME(1)
  1314                                  
  1315                                  L_code_ptr_car:
  1316                                          ENTER
    33 00000FB9 C8000000            <1>  enter 0, 0
    34 00000FBD 4883E4F0            <1>  and rsp, ~15
  1317 00000FC1 48837D1801                      cmp COUNT, 1
  1318 00000FC6 0F852C0D0000                    jne L_error_arg_count_1
  1319 00000FCC 488B4520                        mov rax, PARAM(0)
  1320                                          assert_pair(rax)
    42 00000FD0 803821              <1>  cmp byte [%1], %2
    43 00000FD3 0F85F30D0000        <1>  jne L_error_incorrect_type
  1321 00000FD9 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1322                                          LEAVE
    38 00000FDD C9                  <1>  leave
  1323 00000FDE C21800                          ret AND_KILL_FRAME(1)
  1324                                          
  1325                                  L_code_ptr_cdr:
  1326                                          ENTER
    33 00000FE1 C8000000            <1>  enter 0, 0
    34 00000FE5 4883E4F0            <1>  and rsp, ~15
  1327 00000FE9 48837D1801                      cmp COUNT, 1
  1328 00000FEE 0F85040D0000                    jne L_error_arg_count_1
  1329 00000FF4 488B4520                        mov rax, PARAM(0)
  1330                                          assert_pair(rax)
    42 00000FF8 803821              <1>  cmp byte [%1], %2
    43 00000FFB 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1331 00001001 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1332                                          LEAVE
    38 00001005 C9                  <1>  leave
  1333 00001006 C21800                          ret AND_KILL_FRAME(1)
  1334                                          
  1335                                  L_code_ptr_string_length:
  1336                                          ENTER
    33 00001009 C8000000            <1>  enter 0, 0
    34 0000100D 4883E4F0            <1>  and rsp, ~15
  1337 00001011 48837D1801                      cmp COUNT, 1
  1338 00001016 0F85DC0C0000                    jne L_error_arg_count_1
  1339 0000101C 488B4520                        mov rax, PARAM(0)
  1340                                          assert_string(rax)
    42 00001020 803803              <1>  cmp byte [%1], %2
    43 00001023 0F85A30D0000        <1>  jne L_error_incorrect_type
  1341 00001029 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1342 0000102D E83A0C0000                      call make_integer
  1343                                          LEAVE
    38 00001032 C9                  <1>  leave
  1344 00001033 C21800                          ret AND_KILL_FRAME(1)
  1345                                  
  1346                                  L_code_ptr_vector_length:
  1347                                          ENTER
    33 00001036 C8000000            <1>  enter 0, 0
    34 0000103A 4883E4F0            <1>  and rsp, ~15
  1348 0000103E 48837D1801                      cmp COUNT, 1
  1349 00001043 0F85AF0C0000                    jne L_error_arg_count_1
  1350 00001049 488B4520                        mov rax, PARAM(0)
  1351                                          assert_vector(rax)
    42 0000104D 803822              <1>  cmp byte [%1], %2
    43 00001050 0F85760D0000        <1>  jne L_error_incorrect_type
  1352 00001056 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1353 0000105A E80D0C0000                      call make_integer
  1354                                          LEAVE
    38 0000105F C9                  <1>  leave
  1355 00001060 C21800                          ret AND_KILL_FRAME(1)
  1356                                  
  1357                                  L_code_ptr_real_to_integer:
  1358                                          ENTER
    33 00001063 C8000000            <1>  enter 0, 0
    34 00001067 4883E4F0            <1>  and rsp, ~15
  1359 0000106B 48837D1801                      cmp COUNT, 1
  1360 00001070 0F85820C0000                    jne L_error_arg_count_1
  1361 00001076 488B5D20                        mov rbx, PARAM(0)
  1362                                          assert_real(rbx)
    42 0000107A 803B12              <1>  cmp byte [%1], %2
    43 0000107D 0F85490D0000        <1>  jne L_error_incorrect_type
  1363 00001083 F20F104301                      movsd xmm0, qword [rbx + 1]
  1364 00001088 F2480F2CF8                      cvttsd2si rdi, xmm0
  1365 0000108D E8DA0B0000                      call make_integer
  1366                                          LEAVE
    38 00001092 C9                  <1>  leave
  1367 00001093 C21800                          ret AND_KILL_FRAME(1)
  1368                                  
  1369                                  L_code_ptr_exit:
  1370                                          ENTER
    33 00001096 C8000000            <1>  enter 0, 0
    34 0000109A 4883E4F0            <1>  and rsp, ~15
  1371 0000109E 48837D1800                      cmp COUNT, 0
  1372 000010A3 0F851A0C0000                    jne L_error_arg_count_0
  1373 000010A9 B800000000                      mov rax, 0
  1374 000010AE E8(00000000)                    call exit
  1375                                  
  1376                                  L_code_ptr_integer_to_real:
  1377                                          ENTER
    33 000010B3 C8000000            <1>  enter 0, 0
    34 000010B7 4883E4F0            <1>  and rsp, ~15
  1378 000010BB 48837D1801                      cmp COUNT, 1
  1379 000010C0 0F85320C0000                    jne L_error_arg_count_1
  1380 000010C6 488B4520                        mov rax, PARAM(0)
  1381                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010CA 803811              <2>  cmp byte [%1], %2
    43 000010CD 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000010D3 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010D8 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1382 000010DE FF7001                          push qword [rax + 1]
  1383 000010E1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1384 000010E7 E8640B0000                      call make_real
  1385                                          LEAVE
    38 000010EC C9                  <1>  leave
  1386 000010ED C21800                          ret AND_KILL_FRAME(1)
  1387                                  
  1388                                  L_code_ptr_rational_to_real:
  1389                                          ENTER
    33 000010F0 C8000000            <1>  enter 0, 0
    34 000010F4 4883E4F0            <1>  and rsp, ~15
  1390 000010F8 48837D1801                      cmp COUNT, 1
  1391 000010FD 0F85F50B0000                    jne L_error_arg_count_1
  1392 00001103 488B4520                        mov rax, PARAM(0)
  1393                                          assert_rational(rax)
    42 00001107 803811              <1>  cmp byte [%1], %2
    43 0000110A 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1394 00001110 FF7001                          push qword [rax + 1]
  1395 00001113 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1396 00001119 FF7009                          push qword [rax + 1 + 8]
  1397 0000111C F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1398 00001122 F20F5EC1                        divsd xmm0, xmm1
  1399 00001126 E8250B0000                      call make_real
  1400                                          LEAVE
    38 0000112B C9                  <1>  leave
  1401 0000112C C21800                          ret AND_KILL_FRAME(1)
  1402                                  
  1403                                  L_code_ptr_char_to_integer:
  1404                                          ENTER
    33 0000112F C8000000            <1>  enter 0, 0
    34 00001133 4883E4F0            <1>  and rsp, ~15
  1405 00001137 48837D1801                      cmp COUNT, 1
  1406 0000113C 0F85B60B0000                    jne L_error_arg_count_1
  1407 00001142 488B4520                        mov rax, PARAM(0)
  1408                                          assert_char(rax)
    42 00001146 803802              <1>  cmp byte [%1], %2
    43 00001149 0F857D0C0000        <1>  jne L_error_incorrect_type
  1409 0000114F 8A4001                          mov al, byte [rax + 1]
  1410 00001152 4825FF000000                    and rax, 255
  1411 00001158 4889C7                          mov rdi, rax
  1412 0000115B E80C0B0000                      call make_integer
  1413                                          LEAVE
    38 00001160 C9                  <1>  leave
  1414 00001161 C21800                          ret AND_KILL_FRAME(1)
  1415                                  
  1416                                  L_code_ptr_integer_to_char:
  1417                                          ENTER
    33 00001164 C8000000            <1>  enter 0, 0
    34 00001168 4883E4F0            <1>  and rsp, ~15
  1418 0000116C 48837D1801                      cmp COUNT, 1
  1419 00001171 0F85810B0000                    jne L_error_arg_count_1
  1420 00001177 488B4520                        mov rax, PARAM(0)
  1421                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000117B 803811              <2>  cmp byte [%1], %2
    43 0000117E 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001184 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001189 0F853D0C0000        <1>  jne L_error_incorrect_type
  1422 0000118F 488B5801                        mov rbx, qword [rax + 1]
  1423 00001193 4883FB00                        cmp rbx, 0
  1424 00001197 0F8EF50A0000                    jle L_error_integer_range
  1425 0000119D 4881FB00010000                  cmp rbx, 256
  1426 000011A4 0F8DE80A0000                    jge L_error_integer_range
  1427 000011AA BF02000000                      mov rdi, (1 + 1)
  1428 000011AF E8D3F4FFFF                      call malloc
  1429 000011B4 C60002                          mov byte [rax], T_char
  1430 000011B7 885801                          mov byte [rax + 1], bl
  1431                                          LEAVE
    38 000011BA C9                  <1>  leave
  1432 000011BB C21800                          ret AND_KILL_FRAME(1)
  1433                                  
  1434                                  L_code_ptr_trng:
  1435                                          ENTER
    33 000011BE C8000000            <1>  enter 0, 0
    34 000011C2 4883E4F0            <1>  and rsp, ~15
  1436 000011C6 48837D1800                      cmp COUNT, 0
  1437 000011CB 0F85F20A0000                    jne L_error_arg_count_0
  1438 000011D1 480FC7F7                        rdrand rdi
  1439 000011D5 48D1EF                          shr rdi, 1
  1440 000011D8 E88F0A0000                      call make_integer
  1441                                          LEAVE
    38 000011DD C9                  <1>  leave
  1442 000011DE C21000                          ret AND_KILL_FRAME(0)
  1443                                  
  1444                                  L_code_ptr_is_zero:
  1445                                          ENTER
    33 000011E1 C8000000            <1>  enter 0, 0
    34 000011E5 4883E4F0            <1>  and rsp, ~15
  1446 000011E9 48837D1801                      cmp COUNT, 1
  1447 000011EE 0F85040B0000                    jne L_error_arg_count_1
  1448 000011F4 488B4520                        mov rax, PARAM(0)
  1449 000011F8 803811                          cmp byte [rax], T_rational
  1450 000011FB 740A                            je .L_rational
  1451 000011FD 803812                          cmp byte [rax], T_real
  1452 00001200 740E                            je .L_real
  1453 00001202 E9C50B0000                      jmp L_error_incorrect_type
  1454                                  .L_rational:
  1455 00001207 4883780100                      cmp qword [rax + 1], 0
  1456 0000120C 7420                            je .L_zero
  1457 0000120E EB12                            jmp .L_not_zero
  1458                                  .L_real:
  1459 00001210 660FEFC0                        pxor xmm0, xmm0
  1460 00001214 FF7001                          push qword [rax + 1]
  1461 00001217 F20F100C24                      movsd xmm1, qword [rsp]
  1462 0000121C 660F2EC1                        ucomisd xmm0, xmm1
  1463 00001220 740C                            je .L_zero
  1464                                  .L_not_zero:
  1465 00001222 48B8-                           mov rax, sob_boolean_false
  1465 00001224 [0200000000000000] 
  1466 0000122C EB0A                            jmp .L_end
  1467                                  .L_zero:
  1468 0000122E 48B8-                           mov rax, sob_boolean_true
  1468 00001230 [0300000000000000] 
  1469                                  .L_end:
  1470                                          LEAVE
    38 00001238 C9                  <1>  leave
  1471 00001239 C21800                          ret AND_KILL_FRAME(1)
  1472                                  
  1473                                  L_code_ptr_is_integer:
  1474                                          ENTER
    33 0000123C C8000000            <1>  enter 0, 0
    34 00001240 4883E4F0            <1>  and rsp, ~15
  1475 00001244 48837D1801                      cmp COUNT, 1
  1476 00001249 0F85A90A0000                    jne L_error_arg_count_1
  1477 0000124F 488B4520                        mov rax, PARAM(0)
  1478 00001253 803811                          cmp byte [rax], T_rational
  1479 00001256 7513                            jne .L_false
  1480 00001258 4883780901                      cmp qword [rax + 1 + 8], 1
  1481 0000125D 750C                            jne .L_false
  1482 0000125F 48B8-                           mov rax, sob_boolean_true
  1482 00001261 [0300000000000000] 
  1483 00001269 EB0A                            jmp .L_exit
  1484                                  .L_false:
  1485 0000126B 48B8-                           mov rax, sob_boolean_false
  1485 0000126D [0200000000000000] 
  1486                                  .L_exit:
  1487                                          LEAVE
    38 00001275 C9                  <1>  leave
  1488 00001276 C21800                          ret AND_KILL_FRAME(1)
  1489                                  
  1490                                  L_code_ptr_raw_bin_add_rr:
  1491                                          ENTER
    33 00001279 C8000000            <1>  enter 0, 0
    34 0000127D 4883E4F0            <1>  and rsp, ~15
  1492 00001281 48837D1802                      cmp COUNT, 2
  1493 00001286 0F85A10A0000                    jne L_error_arg_count_2
  1494 0000128C 488B5D20                        mov rbx, PARAM(0)
  1495                                          assert_real(rbx)
    42 00001290 803B12              <1>  cmp byte [%1], %2
    43 00001293 0F85330B0000        <1>  jne L_error_incorrect_type
  1496 00001299 488B4D28                        mov rcx, PARAM(1)
  1497                                          assert_real(rcx)
    42 0000129D 803912              <1>  cmp byte [%1], %2
    43 000012A0 0F85260B0000        <1>  jne L_error_incorrect_type
  1498 000012A6 F20F104301                      movsd xmm0, qword [rbx + 1]
  1499 000012AB F20F104901                      movsd xmm1, qword [rcx + 1]
  1500 000012B0 F20F58C1                        addsd xmm0, xmm1
  1501 000012B4 E897090000                      call make_real
  1502                                          LEAVE
    38 000012B9 C9                  <1>  leave
  1503 000012BA C22000                          ret AND_KILL_FRAME(2)
  1504                                  
  1505                                  L_code_ptr_raw_bin_sub_rr:
  1506                                          ENTER
    33 000012BD C8000000            <1>  enter 0, 0
    34 000012C1 4883E4F0            <1>  and rsp, ~15
  1507 000012C5 48837D1802                      cmp COUNT, 2
  1508 000012CA 0F855D0A0000                    jne L_error_arg_count_2
  1509 000012D0 488B5D20                        mov rbx, PARAM(0)
  1510                                          assert_real(rbx)
    42 000012D4 803B12              <1>  cmp byte [%1], %2
    43 000012D7 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1511 000012DD 488B4D28                        mov rcx, PARAM(1)
  1512                                          assert_real(rcx)
    42 000012E1 803912              <1>  cmp byte [%1], %2
    43 000012E4 0F85E20A0000        <1>  jne L_error_incorrect_type
  1513 000012EA F20F104301                      movsd xmm0, qword [rbx + 1]
  1514 000012EF F20F104901                      movsd xmm1, qword [rcx + 1]
  1515 000012F4 F20F5CC1                        subsd xmm0, xmm1
  1516 000012F8 E853090000                      call make_real
  1517                                          LEAVE
    38 000012FD C9                  <1>  leave
  1518 000012FE C22000                          ret AND_KILL_FRAME(2)
  1519                                  
  1520                                  L_code_ptr_raw_bin_mul_rr:
  1521                                          ENTER
    33 00001301 C8000000            <1>  enter 0, 0
    34 00001305 4883E4F0            <1>  and rsp, ~15
  1522 00001309 48837D1802                      cmp COUNT, 2
  1523 0000130E 0F85190A0000                    jne L_error_arg_count_2
  1524 00001314 488B5D20                        mov rbx, PARAM(0)
  1525                                          assert_real(rbx)
    42 00001318 803B12              <1>  cmp byte [%1], %2
    43 0000131B 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1526 00001321 488B4D28                        mov rcx, PARAM(1)
  1527                                          assert_real(rcx)
    42 00001325 803912              <1>  cmp byte [%1], %2
    43 00001328 0F859E0A0000        <1>  jne L_error_incorrect_type
  1528 0000132E F20F104301                      movsd xmm0, qword [rbx + 1]
  1529 00001333 F20F104901                      movsd xmm1, qword [rcx + 1]
  1530 00001338 F20F59C1                        mulsd xmm0, xmm1
  1531 0000133C E80F090000                      call make_real
  1532                                          LEAVE
    38 00001341 C9                  <1>  leave
  1533 00001342 C22000                          ret AND_KILL_FRAME(2)
  1534                                  
  1535                                  L_code_ptr_raw_bin_div_rr:
  1536                                          ENTER
    33 00001345 C8000000            <1>  enter 0, 0
    34 00001349 4883E4F0            <1>  and rsp, ~15
  1537 0000134D 48837D1802                      cmp COUNT, 2
  1538 00001352 0F85D5090000                    jne L_error_arg_count_2
  1539 00001358 488B5D20                        mov rbx, PARAM(0)
  1540                                          assert_real(rbx)
    42 0000135C 803B12              <1>  cmp byte [%1], %2
    43 0000135F 0F85670A0000        <1>  jne L_error_incorrect_type
  1541 00001365 488B4D28                        mov rcx, PARAM(1)
  1542                                          assert_real(rcx)
    42 00001369 803912              <1>  cmp byte [%1], %2
    43 0000136C 0F855A0A0000        <1>  jne L_error_incorrect_type
  1543 00001372 F20F104301                      movsd xmm0, qword [rbx + 1]
  1544 00001377 F20F104901                      movsd xmm1, qword [rcx + 1]
  1545 0000137C 660FEFD2                        pxor xmm2, xmm2
  1546 00001380 660F2ECA                        ucomisd xmm1, xmm2
  1547 00001384 0F84730A0000                    je L_error_division_by_zero
  1548 0000138A F20F5EC1                        divsd xmm0, xmm1
  1549 0000138E E8BD080000                      call make_real
  1550                                          LEAVE
    38 00001393 C9                  <1>  leave
  1551 00001394 C22000                          ret AND_KILL_FRAME(2)
  1552                                  
  1553                                  L_code_ptr_raw_bin_add_qq:
  1554                                          ENTER
    33 00001397 C8000000            <1>  enter 0, 0
    34 0000139B 4883E4F0            <1>  and rsp, ~15
  1555 0000139F 48837D1802                      cmp COUNT, 2
  1556 000013A4 0F8583090000                    jne L_error_arg_count_2
  1557 000013AA 4C8B4520                        mov r8, PARAM(0)
  1558                                          assert_rational(r8)
    42 000013AE 41803811            <1>  cmp byte [%1], %2
    43 000013B2 0F85140A0000        <1>  jne L_error_incorrect_type
  1559 000013B8 4C8B4D28                        mov r9, PARAM(1)
  1560                                          assert_rational(r9)
    42 000013BC 41803911            <1>  cmp byte [%1], %2
    43 000013C0 0F85060A0000        <1>  jne L_error_incorrect_type
  1561 000013C6 498B4001                        mov rax, qword [r8 + 1] ; num1
  1562 000013CA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1563 000013CE 4899                            cqo
  1564 000013D0 48F7EB                          imul rbx
  1565 000013D3 4889C6                          mov rsi, rax
  1566 000013D6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1567 000013DA 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1568 000013DE 4899                            cqo
  1569 000013E0 48F7EB                          imul rbx
  1570 000013E3 4801C6                          add rsi, rax
  1571 000013E6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1572 000013EA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1573 000013EE 4899                            cqo
  1574 000013F0 48F7EB                          imul rbx
  1575 000013F3 4889C7                          mov rdi, rax
  1576 000013F6 E827010000                      call normalize_rational
  1577                                          LEAVE
    38 000013FB C9                  <1>  leave
  1578 000013FC C22000                          ret AND_KILL_FRAME(2)
  1579                                  
  1580                                  L_code_ptr_raw_bin_sub_qq:
  1581                                          ENTER
    33 000013FF C8000000            <1>  enter 0, 0
    34 00001403 4883E4F0            <1>  and rsp, ~15
  1582 00001407 48837D1802                      cmp COUNT, 2
  1583 0000140C 0F851B090000                    jne L_error_arg_count_2
  1584 00001412 4C8B4520                        mov r8, PARAM(0)
  1585                                          assert_rational(r8)
    42 00001416 41803811            <1>  cmp byte [%1], %2
    43 0000141A 0F85AC090000        <1>  jne L_error_incorrect_type
  1586 00001420 4C8B4D28                        mov r9, PARAM(1)
  1587                                          assert_rational(r9)
    42 00001424 41803911            <1>  cmp byte [%1], %2
    43 00001428 0F859E090000        <1>  jne L_error_incorrect_type
  1588 0000142E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1589 00001432 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1590 00001436 4899                            cqo
  1591 00001438 48F7EB                          imul rbx
  1592 0000143B 4889C6                          mov rsi, rax
  1593 0000143E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1594 00001442 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1595 00001446 4899                            cqo
  1596 00001448 48F7EB                          imul rbx
  1597 0000144B 4829C6                          sub rsi, rax
  1598 0000144E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1599 00001452 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1600 00001456 4899                            cqo
  1601 00001458 48F7EB                          imul rbx
  1602 0000145B 4889C7                          mov rdi, rax
  1603 0000145E E8BF000000                      call normalize_rational
  1604                                          LEAVE
    38 00001463 C9                  <1>  leave
  1605 00001464 C22000                          ret AND_KILL_FRAME(2)
  1606                                  
  1607                                  L_code_ptr_raw_bin_mul_qq:
  1608                                          ENTER
    33 00001467 C8000000            <1>  enter 0, 0
    34 0000146B 4883E4F0            <1>  and rsp, ~15
  1609 0000146F 48837D1802                      cmp COUNT, 2
  1610 00001474 0F85B3080000                    jne L_error_arg_count_2
  1611 0000147A 4C8B4520                        mov r8, PARAM(0)
  1612                                          assert_rational(r8)
    42 0000147E 41803811            <1>  cmp byte [%1], %2
    43 00001482 0F8544090000        <1>  jne L_error_incorrect_type
  1613 00001488 4C8B4D28                        mov r9, PARAM(1)
  1614                                          assert_rational(r9)
    42 0000148C 41803911            <1>  cmp byte [%1], %2
    43 00001490 0F8536090000        <1>  jne L_error_incorrect_type
  1615 00001496 498B4001                        mov rax, qword [r8 + 1] ; num1
  1616 0000149A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1617 0000149E 4899                            cqo
  1618 000014A0 48F7EB                          imul rbx
  1619 000014A3 4889C6                          mov rsi, rax
  1620 000014A6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1621 000014AA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1622 000014AE 4899                            cqo
  1623 000014B0 48F7EB                          imul rbx
  1624 000014B3 4889C7                          mov rdi, rax
  1625 000014B6 E867000000                      call normalize_rational
  1626                                          LEAVE
    38 000014BB C9                  <1>  leave
  1627 000014BC C22000                          ret AND_KILL_FRAME(2)
  1628                                          
  1629                                  L_code_ptr_raw_bin_div_qq:
  1630                                          ENTER
    33 000014BF C8000000            <1>  enter 0, 0
    34 000014C3 4883E4F0            <1>  and rsp, ~15
  1631 000014C7 48837D1802                      cmp COUNT, 2
  1632 000014CC 0F855B080000                    jne L_error_arg_count_2
  1633 000014D2 4C8B4520                        mov r8, PARAM(0)
  1634                                          assert_rational(r8)
    42 000014D6 41803811            <1>  cmp byte [%1], %2
    43 000014DA 0F85EC080000        <1>  jne L_error_incorrect_type
  1635 000014E0 4C8B4D28                        mov r9, PARAM(1)
  1636                                          assert_rational(r9)
    42 000014E4 41803911            <1>  cmp byte [%1], %2
    43 000014E8 0F85DE080000        <1>  jne L_error_incorrect_type
  1637 000014EE 4983790100                      cmp qword [r9 + 1], 0
  1638 000014F3 0F8404090000                    je L_error_division_by_zero
  1639 000014F9 498B4001                        mov rax, qword [r8 + 1] ; num1
  1640 000014FD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1641 00001501 4899                            cqo
  1642 00001503 48F7EB                          imul rbx
  1643 00001506 4889C6                          mov rsi, rax
  1644 00001509 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1645 0000150D 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1646 00001511 4899                            cqo
  1647 00001513 48F7EB                          imul rbx
  1648 00001516 4889C7                          mov rdi, rax
  1649 00001519 E804000000                      call normalize_rational
  1650                                          LEAVE
    38 0000151E C9                  <1>  leave
  1651 0000151F C22000                          ret AND_KILL_FRAME(2)
  1652                                          
  1653                                  normalize_rational:
  1654 00001522 56                              push rsi
  1655 00001523 57                              push rdi
  1656 00001524 E839000000                      call gcd
  1657 00001529 4889C3                          mov rbx, rax
  1658 0000152C 58                              pop rax
  1659 0000152D 4899                            cqo
  1660 0000152F 48F7FB                          idiv rbx
  1661 00001532 4989C0                          mov r8, rax
  1662 00001535 58                              pop rax
  1663 00001536 4899                            cqo
  1664 00001538 48F7FB                          idiv rbx
  1665 0000153B 4989C1                          mov r9, rax
  1666 0000153E BF11000000                      mov rdi, (1 + 8 + 8)
  1667 00001543 E83FF1FFFF                      call malloc
  1668 00001548 C60011                          mov byte [rax], T_rational
  1669 0000154B 4C894801                        mov qword [rax + 1], r9
  1670 0000154F 4C894009                        mov qword [rax + 1 + 8], r8
  1671 00001553 C3                              ret
  1672                                  
  1673                                  iabs:
  1674 00001554 4889F8                          mov rax, rdi
  1675 00001557 4883F800                        cmp rax, 0
  1676 0000155B 7C01                            jl .Lneg
  1677 0000155D C3                              ret
  1678                                  .Lneg:
  1679 0000155E 48F7D8                          neg rax
  1680 00001561 C3                              ret
  1681                                  
  1682                                  gcd:
  1683 00001562 E8EDFFFFFF                      call iabs
  1684 00001567 4889C3                          mov rbx, rax
  1685 0000156A 4889F7                          mov rdi, rsi
  1686 0000156D E8E2FFFFFF                      call iabs
  1687 00001572 4883F800                        cmp rax, 0
  1688 00001576 7502                            jne .L0
  1689 00001578 4893                            xchg rax, rbx
  1690                                  .L0:
  1691 0000157A 4883FB00                        cmp rbx, 0
  1692 0000157E 740C                            je .L1
  1693 00001580 4899                            cqo
  1694 00001582 48F7F3                          div rbx
  1695 00001585 4889D0                          mov rax, rdx
  1696 00001588 4893                            xchg rax, rbx
  1697 0000158A EBEE                            jmp .L0
  1698                                  .L1:
  1699 0000158C C3                              ret
  1700                                  
  1701                                  L_code_ptr_error:
  1702                                          ENTER
    33 0000158D C8000000            <1>  enter 0, 0
    34 00001591 4883E4F0            <1>  and rsp, ~15
  1703 00001595 48837D1802                      cmp COUNT, 2
  1704 0000159A 0F858D070000                    jne L_error_arg_count_2
  1705 000015A0 488B7520                        mov rsi, PARAM(0)
  1706                                          assert_symbol(rsi)
    42 000015A4 803E04              <1>  cmp byte [%1], %2
    43 000015A7 0F851F080000        <1>  jne L_error_incorrect_type
  1707 000015AD 488B7528                        mov rsi, PARAM(1)
  1708                                          assert_string(rsi)
    42 000015B1 803E03              <1>  cmp byte [%1], %2
    43 000015B4 0F8512080000        <1>  jne L_error_incorrect_type
  1709 000015BA 48BF-                           mov rdi, fmt_scheme_error_part_1
  1709 000015BC [5E03000000000000] 
  1710 000015C4 B800000000                      mov rax, 0
  1711                                  	ENTER
    33 000015C9 C8000000            <1>  enter 0, 0
    34 000015CD 4883E4F0            <1>  and rsp, ~15
  1712 000015D1 E8(00000000)                    call printf
  1713                                  	LEAVE
    38 000015D6 C9                  <1>  leave
  1714 000015D7 488B7D20                        mov rdi, PARAM(0)
  1715 000015DB E8C2F0FFFF                      call print_sexpr
  1716 000015E0 48BF-                           mov rdi, fmt_scheme_error_part_2
  1716 000015E2 [7203000000000000] 
  1717 000015EA B800000000                      mov rax, 0
  1718                                  	ENTER
    33 000015EF C8000000            <1>  enter 0, 0
    34 000015F3 4883E4F0            <1>  and rsp, ~15
  1719 000015F7 E8(00000000)                    call printf
  1720                                  	LEAVE
    38 000015FC C9                  <1>  leave
  1721 000015FD 488B4528                        mov rax, PARAM(1)       ; sob_string
  1722 00001601 BE01000000                      mov rsi, 1              ; size = 1 byte
  1723 00001606 488B5001                        mov rdx, qword [rax + 1] ; length
  1724 0000160A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1725 0000160E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1726 00001616 E8(00000000)                    call fwrite
  1727 0000161B 48BF-                           mov rdi, fmt_scheme_error_part_3
  1727 0000161D [B403000000000000] 
  1728 00001625 B800000000                      mov rax, 0
  1729                                  	ENTER
    33 0000162A C8000000            <1>  enter 0, 0
    34 0000162E 4883E4F0            <1>  and rsp, ~15
  1730 00001632 E8(00000000)                    call printf
  1731                                  	LEAVE
    38 00001637 C9                  <1>  leave
  1732 00001638 48C7C0F7FFFFFF                  mov rax, -9
  1733 0000163F E8(00000000)                    call exit
  1734                                  
  1735                                  L_code_ptr_raw_less_than_rr:
  1736                                          ENTER
    33 00001644 C8000000            <1>  enter 0, 0
    34 00001648 4883E4F0            <1>  and rsp, ~15
  1737 0000164C 48837D1802                      cmp COUNT, 2
  1738 00001651 0F85D6060000                    jne L_error_arg_count_2
  1739 00001657 488B7520                        mov rsi, PARAM(0)
  1740                                          assert_real(rsi)
    42 0000165B 803E12              <1>  cmp byte [%1], %2
    43 0000165E 0F8568070000        <1>  jne L_error_incorrect_type
  1741 00001664 488B7D28                        mov rdi, PARAM(1)
  1742                                          assert_real(rdi)
    42 00001668 803F12              <1>  cmp byte [%1], %2
    43 0000166B 0F855B070000        <1>  jne L_error_incorrect_type
  1743 00001671 F20F104601                      movsd xmm0, qword [rsi + 1]
  1744 00001676 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1745 0000167B 660F2FC1                        comisd xmm0, xmm1
  1746 0000167F 730C                            jae .L_false
  1747 00001681 48B8-                           mov rax, sob_boolean_true
  1747 00001683 [0300000000000000] 
  1748 0000168B EB0A                            jmp .L_exit
  1749                                  .L_false:
  1750 0000168D 48B8-                           mov rax, sob_boolean_false
  1750 0000168F [0200000000000000] 
  1751                                  .L_exit:
  1752                                          LEAVE
    38 00001697 C9                  <1>  leave
  1753 00001698 C22000                          ret AND_KILL_FRAME(2)
  1754                                          
  1755                                  L_code_ptr_raw_less_than_qq:
  1756                                          ENTER
    33 0000169B C8000000            <1>  enter 0, 0
    34 0000169F 4883E4F0            <1>  and rsp, ~15
  1757 000016A3 48837D1802                      cmp COUNT, 2
  1758 000016A8 0F857F060000                    jne L_error_arg_count_2
  1759 000016AE 488B7520                        mov rsi, PARAM(0)
  1760                                          assert_rational(rsi)
    42 000016B2 803E11              <1>  cmp byte [%1], %2
    43 000016B5 0F8511070000        <1>  jne L_error_incorrect_type
  1761 000016BB 488B7D28                        mov rdi, PARAM(1)
  1762                                          assert_rational(rdi)
    42 000016BF 803F11              <1>  cmp byte [%1], %2
    43 000016C2 0F8504070000        <1>  jne L_error_incorrect_type
  1763 000016C8 488B4601                        mov rax, qword [rsi + 1] ; num1
  1764 000016CC 4899                            cqo
  1765 000016CE 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1766 000016D2 4889C1                          mov rcx, rax
  1767 000016D5 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1768 000016D9 4899                            cqo
  1769 000016DB 48F76F01                        imul qword [rdi + 1]          ; num2
  1770 000016DF 4829C1                          sub rcx, rax
  1771 000016E2 7D0C                            jge .L_false
  1772 000016E4 48B8-                           mov rax, sob_boolean_true
  1772 000016E6 [0300000000000000] 
  1773 000016EE EB0A                            jmp .L_exit
  1774                                  .L_false:
  1775 000016F0 48B8-                           mov rax, sob_boolean_false
  1775 000016F2 [0200000000000000] 
  1776                                  .L_exit:
  1777                                          LEAVE
    38 000016FA C9                  <1>  leave
  1778 000016FB C22000                          ret AND_KILL_FRAME(2)
  1779                                  
  1780                                  L_code_ptr_raw_equal_rr:
  1781                                          ENTER
    33 000016FE C8000000            <1>  enter 0, 0
    34 00001702 4883E4F0            <1>  and rsp, ~15
  1782 00001706 48837D1802                      cmp COUNT, 2
  1783 0000170B 0F851C060000                    jne L_error_arg_count_2
  1784 00001711 488B7520                        mov rsi, PARAM(0)
  1785                                          assert_real(rsi)
    42 00001715 803E12              <1>  cmp byte [%1], %2
    43 00001718 0F85AE060000        <1>  jne L_error_incorrect_type
  1786 0000171E 488B7D28                        mov rdi, PARAM(1)
  1787                                          assert_real(rdi)
    42 00001722 803F12              <1>  cmp byte [%1], %2
    43 00001725 0F85A1060000        <1>  jne L_error_incorrect_type
  1788 0000172B F20F104601                      movsd xmm0, qword [rsi + 1]
  1789 00001730 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1790 00001735 660F2FC1                        comisd xmm0, xmm1
  1791 00001739 750C                            jne .L_false
  1792 0000173B 48B8-                           mov rax, sob_boolean_true
  1792 0000173D [0300000000000000] 
  1793 00001745 EB0A                            jmp .L_exit
  1794                                  .L_false:
  1795 00001747 48B8-                           mov rax, sob_boolean_false
  1795 00001749 [0200000000000000] 
  1796                                  .L_exit:
  1797                                          LEAVE
    38 00001751 C9                  <1>  leave
  1798 00001752 C22000                          ret AND_KILL_FRAME(2)
  1799                                          
  1800                                  L_code_ptr_raw_equal_qq:
  1801                                          ENTER
    33 00001755 C8000000            <1>  enter 0, 0
    34 00001759 4883E4F0            <1>  and rsp, ~15
  1802 0000175D 48837D1802                      cmp COUNT, 2
  1803 00001762 0F85C5050000                    jne L_error_arg_count_2
  1804 00001768 488B7520                        mov rsi, PARAM(0)
  1805                                          assert_rational(rsi)
    42 0000176C 803E11              <1>  cmp byte [%1], %2
    43 0000176F 0F8557060000        <1>  jne L_error_incorrect_type
  1806 00001775 488B7D28                        mov rdi, PARAM(1)
  1807                                          assert_rational(rdi)
    42 00001779 803F11              <1>  cmp byte [%1], %2
    43 0000177C 0F854A060000        <1>  jne L_error_incorrect_type
  1808 00001782 488B4601                        mov rax, qword [rsi + 1] ; num1
  1809 00001786 4899                            cqo
  1810 00001788 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1811 0000178C 4889C1                          mov rcx, rax
  1812 0000178F 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1813 00001793 4899                            cqo
  1814 00001795 48F76F01                        imul qword [rdi + 1]          ; num2
  1815 00001799 4829C1                          sub rcx, rax
  1816 0000179C 750C                            jne .L_false
  1817 0000179E 48B8-                           mov rax, sob_boolean_true
  1817 000017A0 [0300000000000000] 
  1818 000017A8 EB0A                            jmp .L_exit
  1819                                  .L_false:
  1820 000017AA 48B8-                           mov rax, sob_boolean_false
  1820 000017AC [0200000000000000] 
  1821                                  .L_exit:
  1822                                          LEAVE
    38 000017B4 C9                  <1>  leave
  1823 000017B5 C22000                          ret AND_KILL_FRAME(2)
  1824                                  
  1825                                  L_code_ptr_quotient:
  1826                                          ENTER
    33 000017B8 C8000000            <1>  enter 0, 0
    34 000017BC 4883E4F0            <1>  and rsp, ~15
  1827 000017C0 48837D1802                      cmp COUNT, 2
  1828 000017C5 0F8562050000                    jne L_error_arg_count_2
  1829 000017CB 488B7520                        mov rsi, PARAM(0)
  1830                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000017CF 803E11              <2>  cmp byte [%1], %2
    43 000017D2 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000017D8 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017DD 0F85E9050000        <1>  jne L_error_incorrect_type
  1831 000017E3 488B7D28                        mov rdi, PARAM(1)
  1832                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000017E7 803F11              <2>  cmp byte [%1], %2
    43 000017EA 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000017F0 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017F5 0F85D1050000        <1>  jne L_error_incorrect_type
  1833 000017FB 488B4601                        mov rax, qword [rsi + 1]
  1834 000017FF 488B5F01                        mov rbx, qword [rdi + 1]
  1835 00001803 4883FB00                        cmp rbx, 0
  1836 00001807 0F84F0050000                    je L_error_division_by_zero
  1837 0000180D 4899                            cqo
  1838 0000180F 48F7FB                          idiv rbx
  1839 00001812 4889C7                          mov rdi, rax
  1840 00001815 E852040000                      call make_integer
  1841                                          LEAVE
    38 0000181A C9                  <1>  leave
  1842 0000181B C22000                          ret AND_KILL_FRAME(2)
  1843                                          
  1844                                  L_code_ptr_remainder:
  1845                                          ENTER
    33 0000181E C8000000            <1>  enter 0, 0
    34 00001822 4883E4F0            <1>  and rsp, ~15
  1846 00001826 48837D1802                      cmp COUNT, 2
  1847 0000182B 0F85FC040000                    jne L_error_arg_count_2
  1848 00001831 488B7520                        mov rsi, PARAM(0)
  1849                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001835 803E11              <2>  cmp byte [%1], %2
    43 00001838 0F858E050000        <2>  jne L_error_incorrect_type
    48 0000183E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001843 0F8583050000        <1>  jne L_error_incorrect_type
  1850 00001849 488B7D28                        mov rdi, PARAM(1)
  1851                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000184D 803F11              <2>  cmp byte [%1], %2
    43 00001850 0F8576050000        <2>  jne L_error_incorrect_type
    48 00001856 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000185B 0F856B050000        <1>  jne L_error_incorrect_type
  1852 00001861 488B4601                        mov rax, qword [rsi + 1]
  1853 00001865 488B5F01                        mov rbx, qword [rdi + 1]
  1854 00001869 4883FB00                        cmp rbx, 0
  1855 0000186D 0F848A050000                    je L_error_division_by_zero
  1856 00001873 4899                            cqo
  1857 00001875 48F7FB                          idiv rbx
  1858 00001878 4889D7                          mov rdi, rdx
  1859 0000187B E8EC030000                      call make_integer
  1860                                          LEAVE
    38 00001880 C9                  <1>  leave
  1861 00001881 C22000                          ret AND_KILL_FRAME(2)
  1862                                  
  1863                                  L_code_ptr_set_car:
  1864                                          ENTER
    33 00001884 C8000000            <1>  enter 0, 0
    34 00001888 4883E4F0            <1>  and rsp, ~15
  1865 0000188C 48837D1802                      cmp COUNT, 2
  1866 00001891 0F8596040000                    jne L_error_arg_count_2
  1867 00001897 488B4520                        mov rax, PARAM(0)
  1868                                          assert_pair(rax)
    42 0000189B 803821              <1>  cmp byte [%1], %2
    43 0000189E 0F8528050000        <1>  jne L_error_incorrect_type
  1869 000018A4 488B5D28                        mov rbx, PARAM(1)
  1870 000018A8 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1871 000018AC 48B8-                           mov rax, sob_void
  1871 000018AE [0000000000000000] 
  1872                                          LEAVE
    38 000018B6 C9                  <1>  leave
  1873 000018B7 C22000                          ret AND_KILL_FRAME(2)
  1874                                  
  1875                                  L_code_ptr_set_cdr:
  1876                                          ENTER
    33 000018BA C8000000            <1>  enter 0, 0
    34 000018BE 4883E4F0            <1>  and rsp, ~15
  1877 000018C2 48837D1802                      cmp COUNT, 2
  1878 000018C7 0F8560040000                    jne L_error_arg_count_2
  1879 000018CD 488B4520                        mov rax, PARAM(0)
  1880                                          assert_pair(rax)
    42 000018D1 803821              <1>  cmp byte [%1], %2
    43 000018D4 0F85F2040000        <1>  jne L_error_incorrect_type
  1881 000018DA 488B5D28                        mov rbx, PARAM(1)
  1882 000018DE 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1883 000018E2 48B8-                           mov rax, sob_void
  1883 000018E4 [0000000000000000] 
  1884                                          LEAVE
    38 000018EC C9                  <1>  leave
  1885 000018ED C22000                          ret AND_KILL_FRAME(2)
  1886                                  
  1887                                  L_code_ptr_string_ref:
  1888                                          ENTER
    33 000018F0 C8000000            <1>  enter 0, 0
    34 000018F4 4883E4F0            <1>  and rsp, ~15
  1889 000018F8 48837D1802                      cmp COUNT, 2
  1890 000018FD 0F852A040000                    jne L_error_arg_count_2
  1891 00001903 488B7D20                        mov rdi, PARAM(0)
  1892                                          assert_string(rdi)
    42 00001907 803F03              <1>  cmp byte [%1], %2
    43 0000190A 0F85BC040000        <1>  jne L_error_incorrect_type
  1893 00001910 488B7528                        mov rsi, PARAM(1)
  1894                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001914 803E11              <2>  cmp byte [%1], %2
    43 00001917 0F85AF040000        <2>  jne L_error_incorrect_type
    48 0000191D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001922 0F85A4040000        <1>  jne L_error_incorrect_type
  1895 00001928 488B5701                        mov rdx, qword [rdi + 1]
  1896 0000192C 488B4E01                        mov rcx, qword [rsi + 1]
  1897 00001930 4839D1                          cmp rcx, rdx
  1898 00001933 0F8D59030000                    jge L_error_integer_range
  1899 00001939 4883F900                        cmp rcx, 0
  1900 0000193D 0F8C4F030000                    jl L_error_integer_range
  1901 00001943 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1902 00001947 BF02000000                      mov rdi, 2
  1903 0000194C E836EDFFFF                      call malloc
  1904 00001951 C60002                          mov byte [rax], T_char
  1905 00001954 885801                          mov byte [rax + 1], bl
  1906                                          LEAVE
    38 00001957 C9                  <1>  leave
  1907 00001958 C22000                          ret AND_KILL_FRAME(2)
  1908                                  
  1909                                  L_code_ptr_vector_ref:
  1910                                          ENTER
    33 0000195B C8000000            <1>  enter 0, 0
    34 0000195F 4883E4F0            <1>  and rsp, ~15
  1911 00001963 48837D1802                      cmp COUNT, 2
  1912 00001968 0F85BF030000                    jne L_error_arg_count_2
  1913 0000196E 488B7D20                        mov rdi, PARAM(0)
  1914                                          assert_vector(rdi)
    42 00001972 803F22              <1>  cmp byte [%1], %2
    43 00001975 0F8551040000        <1>  jne L_error_incorrect_type
  1915 0000197B 488B7528                        mov rsi, PARAM(1)
  1916                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000197F 803E11              <2>  cmp byte [%1], %2
    43 00001982 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001988 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000198D 0F8539040000        <1>  jne L_error_incorrect_type
  1917 00001993 488B5701                        mov rdx, qword [rdi + 1]
  1918 00001997 488B4E01                        mov rcx, qword [rsi + 1]
  1919 0000199B 4839D1                          cmp rcx, rdx
  1920 0000199E 0F8DEE020000                    jge L_error_integer_range
  1921 000019A4 4883F900                        cmp rcx, 0
  1922 000019A8 0F8CE4020000                    jl L_error_integer_range
  1923 000019AE 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1924                                          LEAVE
    38 000019B3 C9                  <1>  leave
  1925 000019B4 C22000                          ret AND_KILL_FRAME(2)
  1926                                  
  1927                                  L_code_ptr_vector_set:
  1928                                          ENTER
    33 000019B7 C8000000            <1>  enter 0, 0
    34 000019BB 4883E4F0            <1>  and rsp, ~15
  1929 000019BF 48837D1803                      cmp COUNT, 3
  1930 000019C4 0F85CD030000                    jne L_error_arg_count_3
  1931 000019CA 488B7D20                        mov rdi, PARAM(0)
  1932                                          assert_vector(rdi)
    42 000019CE 803F22              <1>  cmp byte [%1], %2
    43 000019D1 0F85F5030000        <1>  jne L_error_incorrect_type
  1933 000019D7 488B7528                        mov rsi, PARAM(1)
  1934                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019DB 803E11              <2>  cmp byte [%1], %2
    43 000019DE 0F85E8030000        <2>  jne L_error_incorrect_type
    48 000019E4 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019E9 0F85DD030000        <1>  jne L_error_incorrect_type
  1935 000019EF 488B5701                        mov rdx, qword [rdi + 1]
  1936 000019F3 488B4E01                        mov rcx, qword [rsi + 1]
  1937 000019F7 4839D1                          cmp rcx, rdx
  1938 000019FA 0F8D92020000                    jge L_error_integer_range
  1939 00001A00 4883F900                        cmp rcx, 0
  1940 00001A04 0F8C88020000                    jl L_error_integer_range
  1941 00001A0A 488B4530                        mov rax, PARAM(2)
  1942 00001A0E 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1943 00001A13 48B8-                           mov rax, sob_void
  1943 00001A15 [0000000000000000] 
  1944                                          LEAVE
    38 00001A1D C9                  <1>  leave
  1945 00001A1E C22800                          ret AND_KILL_FRAME(3)
  1946                                  
  1947                                  L_code_ptr_string_set:
  1948                                          ENTER
    33 00001A21 C8000000            <1>  enter 0, 0
    34 00001A25 4883E4F0            <1>  and rsp, ~15
  1949 00001A29 48837D1803                      cmp COUNT, 3
  1950 00001A2E 0F8563030000                    jne L_error_arg_count_3
  1951 00001A34 488B7D20                        mov rdi, PARAM(0)
  1952                                          assert_string(rdi)
    42 00001A38 803F03              <1>  cmp byte [%1], %2
    43 00001A3B 0F858B030000        <1>  jne L_error_incorrect_type
  1953 00001A41 488B7528                        mov rsi, PARAM(1)
  1954                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A45 803E11              <2>  cmp byte [%1], %2
    43 00001A48 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001A4E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A53 0F8573030000        <1>  jne L_error_incorrect_type
  1955 00001A59 488B5701                        mov rdx, qword [rdi + 1]
  1956 00001A5D 488B4E01                        mov rcx, qword [rsi + 1]
  1957 00001A61 4839D1                          cmp rcx, rdx
  1958 00001A64 0F8D28020000                    jge L_error_integer_range
  1959 00001A6A 4883F900                        cmp rcx, 0
  1960 00001A6E 0F8C1E020000                    jl L_error_integer_range
  1961 00001A74 488B4530                        mov rax, PARAM(2)
  1962                                          assert_char(rax)
    42 00001A78 803802              <1>  cmp byte [%1], %2
    43 00001A7B 0F854B030000        <1>  jne L_error_incorrect_type
  1963 00001A81 8A4001                          mov al, byte [rax + 1]
  1964 00001A84 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1965 00001A88 48B8-                           mov rax, sob_void
  1965 00001A8A [0000000000000000] 
  1966                                          LEAVE
    38 00001A92 C9                  <1>  leave
  1967 00001A93 C22800                          ret AND_KILL_FRAME(3)
  1968                                  
  1969                                  L_code_ptr_make_vector:
  1970                                          ENTER
    33 00001A96 C8000000            <1>  enter 0, 0
    34 00001A9A 4883E4F0            <1>  and rsp, ~15
  1971 00001A9E 48837D1802                      cmp COUNT, 2
  1972 00001AA3 0F8584020000                    jne L_error_arg_count_2
  1973 00001AA9 488B4D20                        mov rcx, PARAM(0)
  1974                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001AAD 803911              <2>  cmp byte [%1], %2
    43 00001AB0 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001AB6 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001ABB 0F850B030000        <1>  jne L_error_incorrect_type
  1975 00001AC1 488B4901                        mov rcx, qword [rcx + 1]
  1976 00001AC5 4883F900                        cmp rcx, 0
  1977 00001AC9 0F8CC3010000                    jl L_error_integer_range
  1978 00001ACF 488B5528                        mov rdx, PARAM(1)
  1979 00001AD3 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1980 00001ADB E8A7EBFFFF                      call malloc
  1981 00001AE0 C60022                          mov byte [rax], T_vector
  1982 00001AE3 48894801                        mov qword [rax + 1], rcx
  1983 00001AE7 41B800000000                    mov r8, 0
  1984                                  .L0:
  1985 00001AED 4939C8                          cmp r8, rcx
  1986 00001AF0 740A                            je .L1
  1987 00001AF2 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1988 00001AF7 49FFC0                          inc r8
  1989 00001AFA EBF1                            jmp .L0
  1990                                  .L1:
  1991                                          LEAVE
    38 00001AFC C9                  <1>  leave
  1992 00001AFD C22000                          ret AND_KILL_FRAME(2)
  1993                                          
  1994                                  L_code_ptr_make_string:
  1995                                          ENTER
    33 00001B00 C8000000            <1>  enter 0, 0
    34 00001B04 4883E4F0            <1>  and rsp, ~15
  1996 00001B08 48837D1802                      cmp COUNT, 2
  1997 00001B0D 0F851A020000                    jne L_error_arg_count_2
  1998 00001B13 488B4D20                        mov rcx, PARAM(0)
  1999                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B17 803911              <2>  cmp byte [%1], %2
    43 00001B1A 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001B20 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B25 0F85A1020000        <1>  jne L_error_incorrect_type
  2000 00001B2B 488B4901                        mov rcx, qword [rcx + 1]
  2001 00001B2F 4883F900                        cmp rcx, 0
  2002 00001B33 0F8C59010000                    jl L_error_integer_range
  2003 00001B39 488B5528                        mov rdx, PARAM(1)
  2004                                          assert_char(rdx)
    42 00001B3D 803A02              <1>  cmp byte [%1], %2
    43 00001B40 0F8586020000        <1>  jne L_error_incorrect_type
  2005 00001B46 8A5201                          mov dl, byte [rdx + 1]
  2006 00001B49 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2007 00001B4D E835EBFFFF                      call malloc
  2008 00001B52 C60003                          mov byte [rax], T_string
  2009 00001B55 48894801                        mov qword [rax + 1], rcx
  2010 00001B59 41B800000000                    mov r8, 0
  2011                                  .L0:
  2012 00001B5F 4939C8                          cmp r8, rcx
  2013 00001B62 740A                            je .L1
  2014 00001B64 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2015 00001B69 49FFC0                          inc r8
  2016 00001B6C EBF1                            jmp .L0
  2017                                  .L1:
  2018                                          LEAVE
    38 00001B6E C9                  <1>  leave
  2019 00001B6F C22000                          ret AND_KILL_FRAME(2)
  2020                                  
  2021                                  L_code_ptr_numerator:
  2022                                          ENTER
    33 00001B72 C8000000            <1>  enter 0, 0
    34 00001B76 4883E4F0            <1>  and rsp, ~15
  2023 00001B7A 48837D1801                      cmp COUNT, 1
  2024 00001B7F 0F8573010000                    jne L_error_arg_count_1
  2025 00001B85 488B4520                        mov rax, PARAM(0)
  2026                                          assert_rational(rax)
    42 00001B89 803811              <1>  cmp byte [%1], %2
    43 00001B8C 0F853A020000        <1>  jne L_error_incorrect_type
  2027 00001B92 488B7801                        mov rdi, qword [rax + 1]
  2028 00001B96 E8D1000000                      call make_integer
  2029                                          LEAVE
    38 00001B9B C9                  <1>  leave
  2030 00001B9C C21800                          ret AND_KILL_FRAME(1)
  2031                                          
  2032                                  L_code_ptr_denominator:
  2033                                          ENTER
    33 00001B9F C8000000            <1>  enter 0, 0
    34 00001BA3 4883E4F0            <1>  and rsp, ~15
  2034 00001BA7 48837D1801                      cmp COUNT, 1
  2035 00001BAC 0F8546010000                    jne L_error_arg_count_1
  2036 00001BB2 488B4520                        mov rax, PARAM(0)
  2037                                          assert_rational(rax)
    42 00001BB6 803811              <1>  cmp byte [%1], %2
    43 00001BB9 0F850D020000        <1>  jne L_error_incorrect_type
  2038 00001BBF 488B7809                        mov rdi, qword [rax + 1 + 8]
  2039 00001BC3 E8A4000000                      call make_integer
  2040                                          LEAVE
    38 00001BC8 C9                  <1>  leave
  2041 00001BC9 C21800                          ret AND_KILL_FRAME(1)
  2042                                  
  2043                                  L_code_ptr_eq:
  2044                                  	ENTER
    33 00001BCC C8000000            <1>  enter 0, 0
    34 00001BD0 4883E4F0            <1>  and rsp, ~15
  2045 00001BD4 48837D1802              	cmp COUNT, 2
  2046 00001BD9 0F854E010000            	jne L_error_arg_count_2
  2047 00001BDF 488B7D20                	mov rdi, PARAM(0)
  2048 00001BE3 488B7528                	mov rsi, PARAM(1)
  2049 00001BE7 4839F7                  	cmp rdi, rsi
  2050 00001BEA 744A                    	je .L_eq_true
  2051 00001BEC 8A17                    	mov dl, byte [rdi]
  2052 00001BEE 3A16                    	cmp dl, byte [rsi]
  2053 00001BF0 7550                    	jne .L_eq_false
  2054 00001BF2 80FA02                  	cmp dl, T_char
  2055 00001BF5 7437                    	je .L_char
  2056 00001BF7 80FA04                  	cmp dl, T_symbol
  2057 00001BFA 742A                    	je .L_symbol
  2058 00001BFC 80FA12                  	cmp dl, T_real
  2059 00001BFF 741D                    	je .L_real
  2060 00001C01 80FA11                  	cmp dl, T_rational
  2061 00001C04 7402                    	je .L_rational
  2062 00001C06 EB3A                    	jmp .L_eq_false
  2063                                  .L_rational:
  2064 00001C08 488B4601                	mov rax, qword [rsi + 1]
  2065 00001C0C 483B4701                	cmp rax, qword [rdi + 1]
  2066 00001C10 7530                    	jne .L_eq_false
  2067 00001C12 488B4609                	mov rax, qword [rsi + 1 + 8]
  2068 00001C16 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2069 00001C1A 7526                    	jne .L_eq_false
  2070 00001C1C EB18                    	jmp .L_eq_true
  2071                                  .L_real:
  2072 00001C1E 488B4601                	mov rax, qword [rsi + 1]
  2073 00001C22 483B4701                	cmp rax, qword [rdi + 1]
  2074                                  .L_symbol:
  2075                                  	; never reached, because symbols are static!
  2076                                  	; but I'm keeping it in case, I'll ever change
  2077                                  	; the implementation
  2078 00001C26 488B4601                	mov rax, qword [rsi + 1]
  2079 00001C2A 483B4701                	cmp rax, qword [rdi + 1]
  2080                                  .L_char:
  2081 00001C2E 8A5E01                  	mov bl, byte [rsi + 1]
  2082 00001C31 3A5F01                  	cmp bl, byte [rdi + 1]
  2083 00001C34 750C                    	jne .L_eq_false
  2084                                  .L_eq_true:
  2085 00001C36 48B8-                   	mov rax, sob_boolean_true
  2085 00001C38 [0300000000000000] 
  2086 00001C40 EB0A                    	jmp .L_eq_exit
  2087                                  .L_eq_false:
  2088 00001C42 48B8-                   	mov rax, sob_boolean_false
  2088 00001C44 [0200000000000000] 
  2089                                  .L_eq_exit:
  2090                                  	LEAVE
    38 00001C4C C9                  <1>  leave
  2091 00001C4D C22000                  	ret AND_KILL_FRAME(2)
  2092                                  
  2093                                  make_real:
  2094                                          ENTER
    33 00001C50 C8000000            <1>  enter 0, 0
    34 00001C54 4883E4F0            <1>  and rsp, ~15
  2095 00001C58 BF09000000                      mov rdi, (1 + 8)
  2096 00001C5D E825EAFFFF                      call malloc
  2097 00001C62 C60012                          mov byte [rax], T_real
  2098 00001C65 F20F114001                      movsd qword [rax + 1], xmm0
  2099                                          LEAVE
    38 00001C6A C9                  <1>  leave
  2100 00001C6B C3                              ret
  2101                                          
  2102                                  make_integer:
  2103                                          ENTER
    33 00001C6C C8000000            <1>  enter 0, 0
    34 00001C70 4883E4F0            <1>  and rsp, ~15
  2104 00001C74 4889FE                          mov rsi, rdi
  2105 00001C77 BF11000000                      mov rdi, (1 + 8 + 8)
  2106 00001C7C E806EAFFFF                      call malloc
  2107 00001C81 C60011                          mov byte [rax], T_rational
  2108 00001C84 48897001                        mov qword [rax + 1], rsi
  2109 00001C88 48C7400901000000                mov qword [rax + 1 + 8], 1
  2110                                          LEAVE
    38 00001C90 C9                  <1>  leave
  2111 00001C91 C3                              ret
  2112                                          
  2113                                  L_error_integer_range:
  2114 00001C92 488B3C25[00000000]              mov rdi, qword [stderr]
  2115 00001C9A 48BE-                           mov rsi, fmt_integer_range
  2115 00001C9C [2B03000000000000] 
  2116 00001CA4 B800000000                      mov rax, 0
  2117                                  	ENTER
    33 00001CA9 C8000000            <1>  enter 0, 0
    34 00001CAD 4883E4F0            <1>  and rsp, ~15
  2118 00001CB1 E8(00000000)                    call fprintf
  2119                                  	LEAVE
    38 00001CB6 C9                  <1>  leave
  2120 00001CB7 48C7C0FBFFFFFF                  mov rax, -5
  2121 00001CBE E8(00000000)                    call exit
  2122                                  
  2123                                  L_error_arg_count_0:
  2124 00001CC3 488B3C25[00000000]              mov rdi, qword [stderr]
  2125 00001CCB 48BE-                           mov rsi, fmt_arg_count_0
  2125 00001CCD [2902000000000000] 
  2126 00001CD5 488B5518                        mov rdx, COUNT
  2127 00001CD9 B800000000                      mov rax, 0
  2128                                  	ENTER
    33 00001CDE C8000000            <1>  enter 0, 0
    34 00001CE2 4883E4F0            <1>  and rsp, ~15
  2129 00001CE6 E8(00000000)                    call fprintf
  2130                                  	LEAVE
    38 00001CEB C9                  <1>  leave
  2131 00001CEC 48C7C0FDFFFFFF                  mov rax, -3
  2132 00001CF3 E8(00000000)                    call exit
  2133                                  
  2134                                  L_error_arg_count_1:
  2135 00001CF8 488B3C25[00000000]              mov rdi, qword [stderr]
  2136 00001D00 48BE-                           mov rsi, fmt_arg_count_1
  2136 00001D02 [5102000000000000] 
  2137 00001D0A 488B5518                        mov rdx, COUNT
  2138 00001D0E B800000000                      mov rax, 0
  2139                                  	ENTER
    33 00001D13 C8000000            <1>  enter 0, 0
    34 00001D17 4883E4F0            <1>  and rsp, ~15
  2140 00001D1B E8(00000000)                    call fprintf
  2141                                  	LEAVE
    38 00001D20 C9                  <1>  leave
  2142 00001D21 48C7C0FDFFFFFF                  mov rax, -3
  2143 00001D28 E8(00000000)                    call exit
  2144                                  
  2145                                  L_error_arg_count_2:
  2146 00001D2D 488B3C25[00000000]              mov rdi, qword [stderr]
  2147 00001D35 48BE-                           mov rsi, fmt_arg_count_2
  2147 00001D37 [B702000000000000] 
  2148 00001D3F 488B5518                        mov rdx, COUNT
  2149 00001D43 B800000000                      mov rax, 0
  2150                                  	ENTER
    33 00001D48 C8000000            <1>  enter 0, 0
    34 00001D4C 4883E4F0            <1>  and rsp, ~15
  2151 00001D50 E8(00000000)                    call fprintf
  2152                                  	LEAVE
    38 00001D55 C9                  <1>  leave
  2153 00001D56 48C7C0FDFFFFFF                  mov rax, -3
  2154 00001D5D E8(00000000)                    call exit
  2155                                  
  2156                                  L_error_arg_count_12:
  2157 00001D62 488B3C25[00000000]              mov rdi, qword [stderr]
  2158 00001D6A 48BE-                           mov rsi, fmt_arg_count_12
  2158 00001D6C [7702000000000000] 
  2159 00001D74 488B5518                        mov rdx, COUNT
  2160 00001D78 B800000000                      mov rax, 0
  2161                                  	ENTER
    33 00001D7D C8000000            <1>  enter 0, 0
    34 00001D81 4883E4F0            <1>  and rsp, ~15
  2162 00001D85 E8(00000000)                    call fprintf
  2163                                  	LEAVE
    38 00001D8A C9                  <1>  leave
  2164 00001D8B 48C7C0FDFFFFFF                  mov rax, -3
  2165 00001D92 E8(00000000)                    call exit
  2166                                  
  2167                                  L_error_arg_count_3:
  2168 00001D97 488B3C25[00000000]              mov rdi, qword [stderr]
  2169 00001D9F 48BE-                           mov rsi, fmt_arg_count_3
  2169 00001DA1 [DE02000000000000] 
  2170 00001DA9 488B5518                        mov rdx, COUNT
  2171 00001DAD B800000000                      mov rax, 0
  2172                                  	ENTER
    33 00001DB2 C8000000            <1>  enter 0, 0
    34 00001DB6 4883E4F0            <1>  and rsp, ~15
  2173 00001DBA E8(00000000)                    call fprintf
  2174                                  	LEAVE
    38 00001DBF C9                  <1>  leave
  2175 00001DC0 48C7C0FDFFFFFF                  mov rax, -3
  2176 00001DC7 E8(00000000)                    call exit
  2177                                          
  2178                                  L_error_incorrect_type:
  2179 00001DCC 488B3C25[00000000]              mov rdi, qword [stderr]
  2180 00001DD4 48BE-                           mov rsi, fmt_type
  2180 00001DD6 [0703000000000000] 
  2181 00001DDE B800000000                      mov rax, 0
  2182                                  	ENTER
    33 00001DE3 C8000000            <1>  enter 0, 0
    34 00001DE7 4883E4F0            <1>  and rsp, ~15
  2183 00001DEB E8(00000000)                    call fprintf
  2184                                  	LEAVE
    38 00001DF0 C9                  <1>  leave
  2185 00001DF1 48C7C0FCFFFFFF                  mov rax, -4
  2186 00001DF8 E8(00000000)                    call exit
  2187                                  
  2188                                  L_error_division_by_zero:
  2189 00001DFD 488B3C25[00000000]              mov rdi, qword [stderr]
  2190 00001E05 48BE-                           mov rsi, fmt_division_by_zero
  2190 00001E07 [4803000000000000] 
  2191 00001E0F B800000000                      mov rax, 0
  2192                                  	ENTER
    33 00001E14 C8000000            <1>  enter 0, 0
    34 00001E18 4883E4F0            <1>  and rsp, ~15
  2193 00001E1C E8(00000000)                    call fprintf
  2194                                  	LEAVE
    38 00001E21 C9                  <1>  leave
  2195 00001E22 48C7C0F8FFFFFF                  mov rax, -8
  2196 00001E29 E8(00000000)                    call exit
  2197                                  
  2198                                  section .data
  2199                                  fmt_char:
  2200 00000226 256300                          db `%c\0`
  2201                                  fmt_arg_count_0:
  2202 00000229 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2202 00000232 74696E67207A65726F-
  2202 0000023B 20617267756D656E74-
  2202 00000244 732E20466F756E6420-
  2202 0000024D 25640A00           
  2203                                  fmt_arg_count_1:
  2204 00000251 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2204 0000025A 74696E67206F6E6520-
  2204 00000263 617267756D656E742E-
  2204 0000026C 20466F756E64202564-
  2204 00000275 0A00               
  2205                                  fmt_arg_count_12:
  2206 00000277 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2206 00000280 74696E67206F6E6520-
  2206 00000289 726571756972656420-
  2206 00000292 616E64206F6E65206F-
  2206 0000029B 7074696F6E616C2061-
  2206 000002A4 7267756D656E742E20-
  2206 000002AD 466F756E642025640A-
  2206 000002B6 00                 
  2207                                  fmt_arg_count_2:
  2208 000002B7 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2208 000002C0 74696E672074776F20-
  2208 000002C9 617267756D656E7473-
  2208 000002D2 2E20466F756E642025-
  2208 000002DB 640A00             
  2209                                  fmt_arg_count_3:
  2210 000002DE 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2210 000002E7 74696E672074687265-
  2210 000002F0 6520617267756D656E-
  2210 000002F9 74732E20466F756E64-
  2210 00000302 2025640A00         
  2211                                  fmt_type:
  2212 00000307 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2212 00000310 696F6E207061737365-
  2212 00000319 6420696E636F727265-
  2212 00000322 637420747970650A00 
  2213                                  fmt_integer_range:
  2214 0000032B 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2214 00000334 7265637420696E7465-
  2214 0000033D 6765722072616E6765-
  2214 00000346 0A00               
  2215                                  fmt_division_by_zero:
  2216 00000348 212121204469766973-             db `!!! Division by zero\n\0`
  2216 00000351 696F6E206279207A65-
  2216 0000035A 726F0A00           
  2217                                  fmt_scheme_error_part_1:
  2218 0000035E 0A2121212054686520-             db `\n!!! The procedure \0`
  2218 00000367 70726F636564757265-
  2218 00000370 2000               
  2219                                  fmt_scheme_error_part_2:
  2220 00000372 2061736B656420746F-             db ` asked to terminate the program\n`
  2220 0000037B 207465726D696E6174-
  2220 00000384 65207468652070726F-
  2220 0000038D 6772616D0A         
  2221 00000392 202020207769746820-             db `    with the following message:\n\n\0`
  2221 0000039B 74686520666F6C6C6F-
  2221 000003A4 77696E67206D657373-
  2221 000003AD 6167653A0A0A00     
  2222                                  fmt_scheme_error_part_3:
  2223 000003B4 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2223 000003BD 210A0A00           

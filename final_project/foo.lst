     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "a"
    84 00000007 0100000000000000        	dq 1
    85 0000000F 61                      	db 0x61
    86 00000010 03                      	db T_string	; "b"
    87 00000011 0100000000000000        	dq 1
    88 00000019 62                      	db 0x62
    89 0000001A 21                      	db T_pair	; (b)
    90 0000001B [E703000000000000]-     	dq L_constants + 999, L_constants + 1
    90 00000023 [0100000000000000] 
    91 0000002B 21                      	db T_pair	; (a b)
    92 0000002C [E703000000000000]-     	dq L_constants + 999, L_constants + 26
    92 00000034 [1A00000000000000] 
    93                                  
    94                                  section .bss
    95                                  free_var_0:	; location of null?
    96 00000000 ????????????????        	resq 1
    97                                  free_var_1:	; location of pair?
    98 00000008 ????????????????        	resq 1
    99                                  free_var_2:	; location of void?
   100 00000010 ????????????????        	resq 1
   101                                  free_var_3:	; location of char?
   102 00000018 ????????????????        	resq 1
   103                                  free_var_4:	; location of string?
   104 00000020 ????????????????        	resq 1
   105                                  free_var_5:	; location of symbol?
   106 00000028 ????????????????        	resq 1
   107                                  free_var_6:	; location of vector?
   108 00000030 ????????????????        	resq 1
   109                                  free_var_7:	; location of procedure?
   110 00000038 ????????????????        	resq 1
   111                                  free_var_8:	; location of real?
   112 00000040 ????????????????        	resq 1
   113                                  free_var_9:	; location of rational?
   114 00000048 ????????????????        	resq 1
   115                                  free_var_10:	; location of boolean?
   116 00000050 ????????????????        	resq 1
   117                                  free_var_11:	; location of number?
   118 00000058 ????????????????        	resq 1
   119                                  free_var_12:	; location of collection?
   120 00000060 ????????????????        	resq 1
   121                                  free_var_13:	; location of cons
   122 00000068 ????????????????        	resq 1
   123                                  free_var_14:	; location of display-sexpr
   124 00000070 ????????????????        	resq 1
   125                                  free_var_15:	; location of write-char
   126 00000078 ????????????????        	resq 1
   127                                  free_var_16:	; location of car
   128 00000080 ????????????????        	resq 1
   129                                  free_var_17:	; location of cdr
   130 00000088 ????????????????        	resq 1
   131                                  free_var_18:	; location of string-length
   132 00000090 ????????????????        	resq 1
   133                                  free_var_19:	; location of vector-length
   134 00000098 ????????????????        	resq 1
   135                                  free_var_20:	; location of real->integer
   136 000000A0 ????????????????        	resq 1
   137                                  free_var_21:	; location of exit
   138 000000A8 ????????????????        	resq 1
   139                                  free_var_22:	; location of integer->real
   140 000000B0 ????????????????        	resq 1
   141                                  free_var_23:	; location of rational->real
   142 000000B8 ????????????????        	resq 1
   143                                  free_var_24:	; location of char->integer
   144 000000C0 ????????????????        	resq 1
   145                                  free_var_25:	; location of integer->char
   146 000000C8 ????????????????        	resq 1
   147                                  free_var_26:	; location of trng
   148 000000D0 ????????????????        	resq 1
   149                                  free_var_27:	; location of zero?
   150 000000D8 ????????????????        	resq 1
   151                                  free_var_28:	; location of integer?
   152 000000E0 ????????????????        	resq 1
   153                                  free_var_29:	; location of __bin-apply
   154 000000E8 ????????????????        	resq 1
   155                                  free_var_30:	; location of __bin-add-rr
   156 000000F0 ????????????????        	resq 1
   157                                  free_var_31:	; location of __bin-sub-rr
   158 000000F8 ????????????????        	resq 1
   159                                  free_var_32:	; location of __bin-mul-rr
   160 00000100 ????????????????        	resq 1
   161                                  free_var_33:	; location of __bin-div-rr
   162 00000108 ????????????????        	resq 1
   163                                  free_var_34:	; location of __bin-add-qq
   164 00000110 ????????????????        	resq 1
   165                                  free_var_35:	; location of __bin-sub-qq
   166 00000118 ????????????????        	resq 1
   167                                  free_var_36:	; location of __bin-mul-qq
   168 00000120 ????????????????        	resq 1
   169                                  free_var_37:	; location of __bin-div-qq
   170 00000128 ????????????????        	resq 1
   171                                  free_var_38:	; location of error
   172 00000130 ????????????????        	resq 1
   173                                  free_var_39:	; location of __bin-less-than-rr
   174 00000138 ????????????????        	resq 1
   175                                  free_var_40:	; location of __bin-less-than-qq
   176 00000140 ????????????????        	resq 1
   177                                  free_var_41:	; location of __bin-equal-rr
   178 00000148 ????????????????        	resq 1
   179                                  free_var_42:	; location of __bin-equal-qq
   180 00000150 ????????????????        	resq 1
   181                                  free_var_43:	; location of quotient
   182 00000158 ????????????????        	resq 1
   183                                  free_var_44:	; location of remainder
   184 00000160 ????????????????        	resq 1
   185                                  free_var_45:	; location of set-car!
   186 00000168 ????????????????        	resq 1
   187                                  free_var_46:	; location of set-cdr!
   188 00000170 ????????????????        	resq 1
   189                                  free_var_47:	; location of string-ref
   190 00000178 ????????????????        	resq 1
   191                                  free_var_48:	; location of vector-ref
   192 00000180 ????????????????        	resq 1
   193                                  free_var_49:	; location of vector-set!
   194 00000188 ????????????????        	resq 1
   195                                  free_var_50:	; location of string-set!
   196 00000190 ????????????????        	resq 1
   197                                  free_var_51:	; location of make-vector
   198 00000198 ????????????????        	resq 1
   199                                  free_var_52:	; location of make-string
   200 000001A0 ????????????????        	resq 1
   201                                  free_var_53:	; location of numerator
   202 000001A8 ????????????????        	resq 1
   203                                  free_var_54:	; location of denominator
   204 000001B0 ????????????????        	resq 1
   205                                  free_var_55:	; location of eq?
   206 000001B8 ????????????????        	resq 1
   207                                  
   208                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   209                                  global main
   210                                  section .text
   211                                  main:
   212 00000000 C8000000                        enter 0, 0
   213                                          
   214                                  	; building closure for null?
   215 00000004 48BF-                   	mov rdi, free_var_0
   215 00000006 [0000000000000000] 
   216 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   216 00000010 [1E0C000000000000] 
   217 00000018 E8D90B0000              	call bind_primitive
   218                                  
   219                                  	; building closure for pair?
   220 0000001D 48BF-                   	mov rdi, free_var_1
   220 0000001F [0800000000000000] 
   221 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   221 00000029 [540C000000000000] 
   222 00000031 E8C00B0000              	call bind_primitive
   223                                  
   224                                  	; building closure for void?
   225 00000036 48BF-                   	mov rdi, free_var_2
   225 00000038 [1000000000000000] 
   226 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   226 00000042 [8A0C000000000000] 
   227 0000004A E8A70B0000              	call bind_primitive
   228                                  
   229                                  	; building closure for char?
   230 0000004F 48BF-                   	mov rdi, free_var_3
   230 00000051 [1800000000000000] 
   231 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   231 0000005B [C00C000000000000] 
   232 00000063 E88E0B0000              	call bind_primitive
   233                                  
   234                                  	; building closure for string?
   235 00000068 48BF-                   	mov rdi, free_var_4
   235 0000006A [2000000000000000] 
   236 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   236 00000074 [F60C000000000000] 
   237 0000007C E8750B0000              	call bind_primitive
   238                                  
   239                                  	; building closure for symbol?
   240 00000081 48BF-                   	mov rdi, free_var_5
   240 00000083 [2800000000000000] 
   241 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   241 0000008D [2C0D000000000000] 
   242 00000095 E85C0B0000              	call bind_primitive
   243                                  
   244                                  	; building closure for vector?
   245 0000009A 48BF-                   	mov rdi, free_var_6
   245 0000009C [3000000000000000] 
   246 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   246 000000A6 [620D000000000000] 
   247 000000AE E8430B0000              	call bind_primitive
   248                                  
   249                                  	; building closure for procedure?
   250 000000B3 48BF-                   	mov rdi, free_var_7
   250 000000B5 [3800000000000000] 
   251 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   251 000000BF [980D000000000000] 
   252 000000C7 E82A0B0000              	call bind_primitive
   253                                  
   254                                  	; building closure for real?
   255 000000CC 48BF-                   	mov rdi, free_var_8
   255 000000CE [4000000000000000] 
   256 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   256 000000D8 [CE0D000000000000] 
   257 000000E0 E8110B0000              	call bind_primitive
   258                                  
   259                                  	; building closure for rational?
   260 000000E5 48BF-                   	mov rdi, free_var_9
   260 000000E7 [4800000000000000] 
   261 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   261 000000F1 [040E000000000000] 
   262 000000F9 E8F80A0000              	call bind_primitive
   263                                  
   264                                  	; building closure for boolean?
   265 000000FE 48BF-                   	mov rdi, free_var_10
   265 00000100 [5000000000000000] 
   266 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   266 0000010A [3A0E000000000000] 
   267 00000112 E8DF0A0000              	call bind_primitive
   268                                  
   269                                  	; building closure for number?
   270 00000117 48BF-                   	mov rdi, free_var_11
   270 00000119 [5800000000000000] 
   271 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   271 00000123 [720E000000000000] 
   272 0000012B E8C60A0000              	call bind_primitive
   273                                  
   274                                  	; building closure for collection?
   275 00000130 48BF-                   	mov rdi, free_var_12
   275 00000132 [6000000000000000] 
   276 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   276 0000013C [AA0E000000000000] 
   277 00000144 E8AD0A0000              	call bind_primitive
   278                                  
   279                                  	; building closure for cons
   280 00000149 48BF-                   	mov rdi, free_var_13
   280 0000014B [6800000000000000] 
   281 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   281 00000155 [E20E000000000000] 
   282 0000015D E8940A0000              	call bind_primitive
   283                                  
   284                                  	; building closure for display-sexpr
   285 00000162 48BF-                   	mov rdi, free_var_14
   285 00000164 [7000000000000000] 
   286 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   286 0000016E [160F000000000000] 
   287 00000176 E87B0A0000              	call bind_primitive
   288                                  
   289                                  	; building closure for write-char
   290 0000017B 48BF-                   	mov rdi, free_var_15
   290 0000017D [7800000000000000] 
   291 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   291 00000187 [400F000000000000] 
   292 0000018F E8620A0000              	call bind_primitive
   293                                  
   294                                  	; building closure for car
   295 00000194 48BF-                   	mov rdi, free_var_16
   295 00000196 [8000000000000000] 
   296 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   296 000001A0 [970F000000000000] 
   297 000001A8 E8490A0000              	call bind_primitive
   298                                  
   299                                  	; building closure for cdr
   300 000001AD 48BF-                   	mov rdi, free_var_17
   300 000001AF [8800000000000000] 
   301 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   301 000001B9 [BF0F000000000000] 
   302 000001C1 E8300A0000              	call bind_primitive
   303                                  
   304                                  	; building closure for string-length
   305 000001C6 48BF-                   	mov rdi, free_var_18
   305 000001C8 [9000000000000000] 
   306 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   306 000001D2 [E70F000000000000] 
   307 000001DA E8170A0000              	call bind_primitive
   308                                  
   309                                  	; building closure for vector-length
   310 000001DF 48BF-                   	mov rdi, free_var_19
   310 000001E1 [9800000000000000] 
   311 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   311 000001EB [1410000000000000] 
   312 000001F3 E8FE090000              	call bind_primitive
   313                                  
   314                                  	; building closure for real->integer
   315 000001F8 48BF-                   	mov rdi, free_var_20
   315 000001FA [A000000000000000] 
   316 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   316 00000204 [4110000000000000] 
   317 0000020C E8E5090000              	call bind_primitive
   318                                  
   319                                  	; building closure for exit
   320 00000211 48BF-                   	mov rdi, free_var_21
   320 00000213 [A800000000000000] 
   321 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   321 0000021D [7410000000000000] 
   322 00000225 E8CC090000              	call bind_primitive
   323                                  
   324                                  	; building closure for integer->real
   325 0000022A 48BF-                   	mov rdi, free_var_22
   325 0000022C [B000000000000000] 
   326 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   326 00000236 [9110000000000000] 
   327 0000023E E8B3090000              	call bind_primitive
   328                                  
   329                                  	; building closure for rational->real
   330 00000243 48BF-                   	mov rdi, free_var_23
   330 00000245 [B800000000000000] 
   331 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   331 0000024F [CE10000000000000] 
   332 00000257 E89A090000              	call bind_primitive
   333                                  
   334                                  	; building closure for char->integer
   335 0000025C 48BF-                   	mov rdi, free_var_24
   335 0000025E [C000000000000000] 
   336 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   336 00000268 [0D11000000000000] 
   337 00000270 E881090000              	call bind_primitive
   338                                  
   339                                  	; building closure for integer->char
   340 00000275 48BF-                   	mov rdi, free_var_25
   340 00000277 [C800000000000000] 
   341 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   341 00000281 [4211000000000000] 
   342 00000289 E868090000              	call bind_primitive
   343                                  
   344                                  	; building closure for trng
   345 0000028E 48BF-                   	mov rdi, free_var_26
   345 00000290 [D000000000000000] 
   346 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   346 0000029A [9C11000000000000] 
   347 000002A2 E84F090000              	call bind_primitive
   348                                  
   349                                  	; building closure for zero?
   350 000002A7 48BF-                   	mov rdi, free_var_27
   350 000002A9 [D800000000000000] 
   351 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   351 000002B3 [BF11000000000000] 
   352 000002BB E836090000              	call bind_primitive
   353                                  
   354                                  	; building closure for integer?
   355 000002C0 48BF-                   	mov rdi, free_var_28
   355 000002C2 [E000000000000000] 
   356 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   356 000002CC [1A12000000000000] 
   357 000002D4 E81D090000              	call bind_primitive
   358                                  
   359                                  	; building closure for __bin-apply
   360 000002D9 48BF-                   	mov rdi, free_var_29
   360 000002DB [E800000000000000] 
   361 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   361 000002E5 [1E0C000000000000] 
   362 000002ED E804090000              	call bind_primitive
   363                                  
   364                                  	; building closure for __bin-add-rr
   365 000002F2 48BF-                   	mov rdi, free_var_30
   365 000002F4 [F000000000000000] 
   366 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   366 000002FE [5712000000000000] 
   367 00000306 E8EB080000              	call bind_primitive
   368                                  
   369                                  	; building closure for __bin-sub-rr
   370 0000030B 48BF-                   	mov rdi, free_var_31
   370 0000030D [F800000000000000] 
   371 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   371 00000317 [9B12000000000000] 
   372 0000031F E8D2080000              	call bind_primitive
   373                                  
   374                                  	; building closure for __bin-mul-rr
   375 00000324 48BF-                   	mov rdi, free_var_32
   375 00000326 [0001000000000000] 
   376 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   376 00000330 [DF12000000000000] 
   377 00000338 E8B9080000              	call bind_primitive
   378                                  
   379                                  	; building closure for __bin-div-rr
   380 0000033D 48BF-                   	mov rdi, free_var_33
   380 0000033F [0801000000000000] 
   381 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   381 00000349 [2313000000000000] 
   382 00000351 E8A0080000              	call bind_primitive
   383                                  
   384                                  	; building closure for __bin-add-qq
   385 00000356 48BF-                   	mov rdi, free_var_34
   385 00000358 [1001000000000000] 
   386 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   386 00000362 [7513000000000000] 
   387 0000036A E887080000              	call bind_primitive
   388                                  
   389                                  	; building closure for __bin-sub-qq
   390 0000036F 48BF-                   	mov rdi, free_var_35
   390 00000371 [1801000000000000] 
   391 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   391 0000037B [DD13000000000000] 
   392 00000383 E86E080000              	call bind_primitive
   393                                  
   394                                  	; building closure for __bin-mul-qq
   395 00000388 48BF-                   	mov rdi, free_var_36
   395 0000038A [2001000000000000] 
   396 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   396 00000394 [4514000000000000] 
   397 0000039C E855080000              	call bind_primitive
   398                                  
   399                                  	; building closure for __bin-div-qq
   400 000003A1 48BF-                   	mov rdi, free_var_37
   400 000003A3 [2801000000000000] 
   401 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   401 000003AD [9D14000000000000] 
   402 000003B5 E83C080000              	call bind_primitive
   403                                  
   404                                  	; building closure for error
   405 000003BA 48BF-                   	mov rdi, free_var_38
   405 000003BC [3001000000000000] 
   406 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   406 000003C6 [6B15000000000000] 
   407 000003CE E823080000              	call bind_primitive
   408                                  
   409                                  	; building closure for __bin-less-than-rr
   410 000003D3 48BF-                   	mov rdi, free_var_39
   410 000003D5 [3801000000000000] 
   411 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   411 000003DF [2216000000000000] 
   412 000003E7 E80A080000              	call bind_primitive
   413                                  
   414                                  	; building closure for __bin-less-than-qq
   415 000003EC 48BF-                   	mov rdi, free_var_40
   415 000003EE [4001000000000000] 
   416 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   416 000003F8 [7916000000000000] 
   417 00000400 E8F1070000              	call bind_primitive
   418                                  
   419                                  	; building closure for __bin-equal-rr
   420 00000405 48BF-                   	mov rdi, free_var_41
   420 00000407 [4801000000000000] 
   421 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   421 00000411 [DC16000000000000] 
   422 00000419 E8D8070000              	call bind_primitive
   423                                  
   424                                  	; building closure for __bin-equal-qq
   425 0000041E 48BF-                   	mov rdi, free_var_42
   425 00000420 [5001000000000000] 
   426 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   426 0000042A [3317000000000000] 
   427 00000432 E8BF070000              	call bind_primitive
   428                                  
   429                                  	; building closure for quotient
   430 00000437 48BF-                   	mov rdi, free_var_43
   430 00000439 [5801000000000000] 
   431 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   431 00000443 [9617000000000000] 
   432 0000044B E8A6070000              	call bind_primitive
   433                                  
   434                                  	; building closure for remainder
   435 00000450 48BF-                   	mov rdi, free_var_44
   435 00000452 [6001000000000000] 
   436 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   436 0000045C [FC17000000000000] 
   437 00000464 E88D070000              	call bind_primitive
   438                                  
   439                                  	; building closure for set-car!
   440 00000469 48BF-                   	mov rdi, free_var_45
   440 0000046B [6801000000000000] 
   441 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   441 00000475 [6218000000000000] 
   442 0000047D E874070000              	call bind_primitive
   443                                  
   444                                  	; building closure for set-cdr!
   445 00000482 48BF-                   	mov rdi, free_var_46
   445 00000484 [7001000000000000] 
   446 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   446 0000048E [9818000000000000] 
   447 00000496 E85B070000              	call bind_primitive
   448                                  
   449                                  	; building closure for string-ref
   450 0000049B 48BF-                   	mov rdi, free_var_47
   450 0000049D [7801000000000000] 
   451 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   451 000004A7 [CE18000000000000] 
   452 000004AF E842070000              	call bind_primitive
   453                                  
   454                                  	; building closure for vector-ref
   455 000004B4 48BF-                   	mov rdi, free_var_48
   455 000004B6 [8001000000000000] 
   456 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   456 000004C0 [3919000000000000] 
   457 000004C8 E829070000              	call bind_primitive
   458                                  
   459                                  	; building closure for vector-set!
   460 000004CD 48BF-                   	mov rdi, free_var_49
   460 000004CF [8801000000000000] 
   461 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   461 000004D9 [9519000000000000] 
   462 000004E1 E810070000              	call bind_primitive
   463                                  
   464                                  	; building closure for string-set!
   465 000004E6 48BF-                   	mov rdi, free_var_50
   465 000004E8 [9001000000000000] 
   466 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   466 000004F2 [FF19000000000000] 
   467 000004FA E8F7060000              	call bind_primitive
   468                                  
   469                                  	; building closure for make-vector
   470 000004FF 48BF-                   	mov rdi, free_var_51
   470 00000501 [9801000000000000] 
   471 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   471 0000050B [741A000000000000] 
   472 00000513 E8DE060000              	call bind_primitive
   473                                  
   474                                  	; building closure for make-string
   475 00000518 48BF-                   	mov rdi, free_var_52
   475 0000051A [A001000000000000] 
   476 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   476 00000524 [DE1A000000000000] 
   477 0000052C E8C5060000              	call bind_primitive
   478                                  
   479                                  	; building closure for numerator
   480 00000531 48BF-                   	mov rdi, free_var_53
   480 00000533 [A801000000000000] 
   481 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   481 0000053D [501B000000000000] 
   482 00000545 E8AC060000              	call bind_primitive
   483                                  
   484                                  	; building closure for denominator
   485 0000054A 48BF-                   	mov rdi, free_var_54
   485 0000054C [B001000000000000] 
   486 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   486 00000556 [7D1B000000000000] 
   487 0000055E E893060000              	call bind_primitive
   488                                  
   489                                  	; building closure for eq?
   490 00000563 48BF-                   	mov rdi, free_var_55
   490 00000565 [B801000000000000] 
   491 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   491 0000056F [AA1B000000000000] 
   492 00000577 E87A060000              	call bind_primitive
   493                                  
   494                                  	; code generated for ScmConst
   495 0000057C 48B8-                   	mov rax, L_constants + 43
   495 0000057E [2B00000000000000] 
   496                                  
   497 00000586 4889C7                  	mov rdi, rax
   498 00000589 E8E8000000              	call print_sexpr_if_not_void
   499                                  
   500 0000058E 48BF-                           mov rdi, fmt_memory_usage
   500 00000590 [9B00000000000000] 
   501 00000598 488B3425[22010000]              mov rsi, qword [top_of_memory]
   502 000005A0 4881EE[C0010000]                sub rsi, memory
   503 000005A7 B800000000                      mov rax, 0
   504                                  	ENTER
    33 000005AC C8000000            <1>  enter 0, 0
    34 000005B0 4883E4F0            <1>  and rsp, ~15
   505 000005B4 E8(00000000)                    call printf
   506                                  	LEAVE
    38 000005B9 C9                  <1>  leave
   507 000005BA C9                      	leave
   508 000005BB C3                      	ret
   509                                  
   510                                  L_error_non_closure:
   511 000005BC 488B3C25[00000000]              mov rdi, qword [stderr]
   512 000005C4 48BE-                           mov rsi, fmt_non_closure
   512 000005C6 [D200000000000000] 
   513 000005CE B800000000                      mov rax, 0
   514                                  	ENTER
    33 000005D3 C8000000            <1>  enter 0, 0
    34 000005D7 4883E4F0            <1>  and rsp, ~15
   515 000005DB E8(00000000)                    call fprintf
   516                                  	LEAVE
    38 000005E0 C9                  <1>  leave
   517 000005E1 48C7C0FEFFFFFF                  mov rax, -2
   518 000005E8 E8(00000000)                    call exit
   519                                  
   520                                  L_error_improper_list:
   521 000005ED 488B3C25[00000000]      	mov rdi, qword [stderr]
   522 000005F5 48BE-                   	mov rsi, fmt_error_improper_list
   522 000005F7 [FA00000000000000] 
   523 000005FF B800000000              	mov rax, 0
   524                                  	ENTER
    33 00000604 C8000000            <1>  enter 0, 0
    34 00000608 4883E4F0            <1>  and rsp, ~15
   525 0000060C E8(00000000)            	call fprintf
   526                                  	LEAVE
    38 00000611 C9                  <1>  leave
   527 00000612 48C7C0F9FFFFFF          	mov rax, -7
   528 00000619 E8(00000000)            	call exit
   529                                  
   530                                  L_error_incorrect_arity_simple:
   531 0000061E 488B3C25[00000000]              mov rdi, qword [stderr]
   532 00000626 48BE-                           mov rsi, fmt_incorrect_arity_simple
   532 00000628 [3C00000000000000] 
   533 00000630 EB12                            jmp L_error_incorrect_arity_common
   534                                  L_error_incorrect_arity_opt:
   535 00000632 488B3C25[00000000]              mov rdi, qword [stderr]
   536 0000063A 48BE-                           mov rsi, fmt_incorrect_arity_opt
   536 0000063C [6700000000000000] 
   537                                  L_error_incorrect_arity_common:
   538 00000644 5A                              pop rdx
   539 00000645 59                              pop rcx
   540 00000646 B800000000                      mov rax, 0
   541                                  	ENTER
    33 0000064B C8000000            <1>  enter 0, 0
    34 0000064F 4883E4F0            <1>  and rsp, ~15
   542 00000653 E8(00000000)                    call fprintf
   543                                  	LEAVE
    38 00000658 C9                  <1>  leave
   544 00000659 48C7C0FAFFFFFF                  mov rax, -6
   545 00000660 E8(00000000)                    call exit
   546                                  
   547                                  section .data
   548                                  fmt_incorrect_arity_simple:
   549 0000003C 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   549 00000045 74656420256C642061-
   549 0000004E 7267756D656E74732C-
   549 00000057 206275742067697665-
   549 00000060 6E20256C640A00     
   550                                  fmt_incorrect_arity_opt:
   551 00000067 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   551 00000070 746564206174206C65-
   551 00000079 61737420256C642061-
   551 00000082 7267756D656E74732C-
   551 0000008B 206275742067697665-
   551 00000094 6E20256C640A00     
   552                                  fmt_memory_usage:
   553 0000009B 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   553 000000A4 6420256C6420627974-
   553 000000AD 6573206F662064796E-
   553 000000B6 616D6963616C6C792D-
   553 000000BF 616C6C6F6361746564-
   553 000000C8 206D656D6F72790A0A-
   553 000000D1 00                 
   554                                  fmt_non_closure:
   555 000000D2 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   555 000000DB 7074696E6720746F20-
   555 000000E4 6170706C792061206E-
   555 000000ED 6F6E2D636C6F737572-
   555 000000F6 65210A00           
   556                                  fmt_error_improper_list:
   557 000000FA 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   557 00000103 7267756D656E742069-
   557 0000010C 73206E6F7420612070-
   557 00000115 726F706572206C6973-
   557 0000011E 74210A00           
   558                                  
   559                                  section .bss
   560                                  memory:
   561 000001C0 <res 40000000h>         	resb gbytes(1)
   562                                  
   563                                  section .data
   564                                  top_of_memory:
   565 00000122 [C001000000000000]              dq memory
   566                                  
   567                                  section .text
   568                                  malloc:
   569 00000665 488B0425[22010000]              mov rax, qword [top_of_memory]
   570 0000066D 48013C25[22010000]              add qword [top_of_memory], rdi
   571 00000675 C3                              ret
   572                                          
   573                                  print_sexpr_if_not_void:
   574 00000676 4881FF[00000000]        	cmp rdi, sob_void
   575 0000067D 7501                    	jne print_sexpr
   576 0000067F C3                      	ret
   577                                  
   578                                  section .data
   579                                  fmt_void:
   580 0000012A 233C766F69643E00        	db `#<void>\0`
   581                                  fmt_nil:
   582 00000132 282900                  	db `()\0`
   583                                  fmt_boolean_false:
   584 00000135 236600                  	db `#f\0`
   585                                  fmt_boolean_true:
   586 00000138 237400                  	db `#t\0`
   587                                  fmt_char_backslash:
   588 0000013B 235C5C00                	db `#\\\\\0`
   589                                  fmt_char_dquote:
   590 0000013F 235C2200                	db `#\\"\0`
   591                                  fmt_char_simple:
   592 00000143 235C256300              	db `#\\%c\0`
   593                                  fmt_char_null:
   594 00000148 235C6E756C00            	db `#\\nul\0`
   595                                  fmt_char_bell:
   596 0000014E 235C62656C6C00          	db `#\\bell\0`
   597                                  fmt_char_backspace:
   598 00000155 235C6261636B737061-     	db `#\\backspace\0`
   598 0000015E 636500             
   599                                  fmt_char_tab:
   600 00000161 235C74616200            	db `#\\tab\0`
   601                                  fmt_char_newline:
   602 00000167 235C6E65776C696E65-     	db `#\\newline\0`
   602 00000170 00                 
   603                                  fmt_char_formfeed:
   604 00000171 235C7061676500          	db `#\\page\0`
   605                                  fmt_char_return:
   606 00000178 235C72657475726E00      	db `#\\return\0`
   607                                  fmt_char_escape:
   608 00000181 235C65736300            	db `#\\esc\0`
   609                                  fmt_char_space:
   610 00000187 235C737061636500        	db `#\\space\0`
   611                                  fmt_char_hex:
   612 0000018F 235C782530325800        	db `#\\x%02X\0`
   613                                  fmt_closure:
   614 00000197 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   614 000001A0 206174203078253038-
   614 000001A9 5820656E763D307825-
   614 000001B2 30385820636F64653D-
   614 000001BB 3078253038583E00   
   615                                  fmt_lparen:
   616 000001C3 2800                    	db `(\0`
   617                                  fmt_dotted_pair:
   618 000001C5 202E2000                	db ` . \0`
   619                                  fmt_rparen:
   620 000001C9 2900                    	db `)\0`
   621                                  fmt_space:
   622 000001CB 2000                    	db ` \0`
   623                                  fmt_empty_vector:
   624 000001CD 23282900                	db `#()\0`
   625                                  fmt_vector:
   626 000001D1 232800                  	db `#(\0`
   627                                  fmt_real:
   628 000001D4 256600                  	db `%f\0`
   629                                  fmt_fraction:
   630 000001D7 256C642F256C6400        	db `%ld/%ld\0`
   631                                  fmt_zero:
   632 000001DF 3000                    	db `0\0`
   633                                  fmt_int:
   634 000001E1 256C6400                	db `%ld\0`
   635                                  fmt_unknown_sexpr_error:
   636 000001E5 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   636 000001EE 6F723A20556E6B6E6F-
   636 000001F7 776E2074797065206F-
   636 00000200 662073657870722028-
   636 00000209 3078253032582920   
   637 00000211 617420616464726573-     	db `at address 0x%08X\n\n\0`
   637 0000021A 73203078253038580A-
   637 00000223 0A00               
   638                                  fmt_dquote:
   639 00000225 2200                    	db `\"\0`
   640                                  fmt_string_char:
   641 00000227 256300                          db `%c\0`
   642                                  fmt_string_char_7:
   643 0000022A 5C6100                          db `\\a\0`
   644                                  fmt_string_char_8:
   645 0000022D 5C6200                          db `\\b\0`
   646                                  fmt_string_char_9:
   647 00000230 5C7400                          db `\\t\0`
   648                                  fmt_string_char_10:
   649 00000233 5C6E00                          db `\\n\0`
   650                                  fmt_string_char_11:
   651 00000236 5C7600                          db `\\v\0`
   652                                  fmt_string_char_12:
   653 00000239 5C6600                          db `\\f\0`
   654                                  fmt_string_char_13:
   655 0000023C 5C7200                          db `\\r\0`
   656                                  fmt_string_char_34:
   657 0000023F 5C2200                          db `\\"\0`
   658                                  fmt_string_char_92:
   659 00000242 5C5C00                          db `\\\\\0`
   660                                  fmt_string_char_hex:
   661 00000245 5C7825583B00                    db `\\x%X;\0`
   662                                  
   663                                  section .text
   664                                  
   665                                  print_sexpr:
   666                                  	ENTER
    33 00000680 C8000000            <1>  enter 0, 0
    34 00000684 4883E4F0            <1>  and rsp, ~15
   667 00000688 8A07                    	mov al, byte [rdi]
   668 0000068A 3C00                    	cmp al, T_void
   669 0000068C 744D                    	je .Lvoid
   670 0000068E 3C01                    	cmp al, T_nil
   671 00000690 7458                    	je .Lnil
   672 00000692 3C09                    	cmp al, T_boolean_false
   673 00000694 7463                    	je .Lboolean_false
   674 00000696 3C0A                    	cmp al, T_boolean_true
   675 00000698 746E                    	je .Lboolean_true
   676 0000069A 3C02                    	cmp al, T_char
   677 0000069C 7479                    	je .Lchar
   678 0000069E 3C04                    	cmp al, T_symbol
   679 000006A0 0F84BB010000            	je .Lsymbol
   680 000006A6 3C21                    	cmp al, T_pair
   681 000006A8 0F84D6010000            	je .Lpair
   682 000006AE 3C22                    	cmp al, T_vector
   683 000006B0 0F849F020000            	je .Lvector
   684 000006B6 3C05                    	cmp al, T_closure
   685 000006B8 0F8489010000            	je .Lclosure
   686 000006BE 3C12                    	cmp al, T_real
   687 000006C0 0F8430030000            	je .Lreal
   688 000006C6 3C11                    	cmp al, T_rational
   689 000006C8 0F8456030000            	je .Lrational
   690 000006CE 3C03                    	cmp al, T_string
   691 000006D0 0F848F030000            	je .Lstring
   692                                  
   693 000006D6 E9C7040000              	jmp .Lunknown_sexpr_type
   694                                  
   695                                  .Lvoid:
   696 000006DB 48BF-                   	mov rdi, fmt_void
   696 000006DD [2A01000000000000] 
   697 000006E5 E9F5040000              	jmp .Lemit
   698                                  
   699                                  .Lnil:
   700 000006EA 48BF-                   	mov rdi, fmt_nil
   700 000006EC [3201000000000000] 
   701 000006F4 E9E6040000              	jmp .Lemit
   702                                  
   703                                  .Lboolean_false:
   704 000006F9 48BF-                   	mov rdi, fmt_boolean_false
   704 000006FB [3501000000000000] 
   705 00000703 E9D7040000              	jmp .Lemit
   706                                  
   707                                  .Lboolean_true:
   708 00000708 48BF-                   	mov rdi, fmt_boolean_true
   708 0000070A [3801000000000000] 
   709 00000712 E9C8040000              	jmp .Lemit
   710                                  
   711                                  .Lchar:
   712 00000717 8A4701                  	mov al, byte [rdi + 1]
   713 0000071A 3C20                    	cmp al, ' '
   714 0000071C 7E28                    	jle .Lchar_whitespace
   715 0000071E 3C5C                    	cmp al, 92 		; backslash
   716 00000720 0F847C000000            	je .Lchar_backslash
   717 00000726 3C22                    	cmp al, '"'
   718 00000728 0F8483000000            	je .Lchar_dquote
   719 0000072E 4825FF000000            	and rax, 255
   720 00000734 48BF-                   	mov rdi, fmt_char_simple
   720 00000736 [4301000000000000] 
   721 0000073E 4889C6                  	mov rsi, rax
   722 00000741 E999040000              	jmp .Lemit
   723                                  
   724                                  .Lchar_whitespace:
   725 00000746 3C00                    	cmp al, 0
   726 00000748 7476                    	je .Lchar_null
   727 0000074A 3C07                    	cmp al, 7
   728 0000074C 0F847D000000            	je .Lchar_bell
   729 00000752 3C08                    	cmp al, 8
   730 00000754 0F8484000000            	je .Lchar_backspace
   731 0000075A 3C09                    	cmp al, 9
   732 0000075C 0F848B000000            	je .Lchar_tab
   733 00000762 3C0A                    	cmp al, 10
   734 00000764 0F8492000000            	je .Lchar_newline
   735 0000076A 3C0C                    	cmp al, 12
   736 0000076C 0F8499000000            	je .Lchar_formfeed
   737 00000772 3C0D                    	cmp al, 13
   738 00000774 0F84A0000000            	je .Lchar_return
   739 0000077A 3C1B                    	cmp al, 27
   740 0000077C 0F84A7000000            	je .Lchar_escape
   741 00000782 4825FF000000            	and rax, 255
   742 00000788 3C20                    	cmp al, ' '
   743 0000078A 0F84A8000000            	je .Lchar_space
   744 00000790 48BF-                   	mov rdi, fmt_char_hex
   744 00000792 [8F01000000000000] 
   745 0000079A 4889C6                  	mov rsi, rax
   746 0000079D E93D040000              	jmp .Lemit	
   747                                  
   748                                  .Lchar_backslash:
   749 000007A2 48BF-                   	mov rdi, fmt_char_backslash
   749 000007A4 [3B01000000000000] 
   750 000007AC E92E040000              	jmp .Lemit
   751                                  
   752                                  .Lchar_dquote:
   753 000007B1 48BF-                   	mov rdi, fmt_char_dquote
   753 000007B3 [3F01000000000000] 
   754 000007BB E91F040000              	jmp .Lemit
   755                                  
   756                                  .Lchar_null:
   757 000007C0 48BF-                   	mov rdi, fmt_char_null
   757 000007C2 [4801000000000000] 
   758 000007CA E910040000              	jmp .Lemit
   759                                  
   760                                  .Lchar_bell:
   761 000007CF 48BF-                   	mov rdi, fmt_char_bell
   761 000007D1 [4E01000000000000] 
   762 000007D9 E901040000              	jmp .Lemit
   763                                  
   764                                  .Lchar_backspace:
   765 000007DE 48BF-                   	mov rdi, fmt_char_backspace
   765 000007E0 [5501000000000000] 
   766 000007E8 E9F2030000              	jmp .Lemit
   767                                  
   768                                  .Lchar_tab:
   769 000007ED 48BF-                   	mov rdi, fmt_char_tab
   769 000007EF [6101000000000000] 
   770 000007F7 E9E3030000              	jmp .Lemit
   771                                  
   772                                  .Lchar_newline:
   773 000007FC 48BF-                   	mov rdi, fmt_char_newline
   773 000007FE [6701000000000000] 
   774 00000806 E9D4030000              	jmp .Lemit
   775                                  
   776                                  .Lchar_formfeed:
   777 0000080B 48BF-                   	mov rdi, fmt_char_formfeed
   777 0000080D [7101000000000000] 
   778 00000815 E9C5030000              	jmp .Lemit
   779                                  
   780                                  .Lchar_return:
   781 0000081A 48BF-                   	mov rdi, fmt_char_return
   781 0000081C [7801000000000000] 
   782 00000824 E9B6030000              	jmp .Lemit
   783                                  
   784                                  .Lchar_escape:
   785 00000829 48BF-                   	mov rdi, fmt_char_escape
   785 0000082B [8101000000000000] 
   786 00000833 E9A7030000              	jmp .Lemit
   787                                  
   788                                  .Lchar_space:
   789 00000838 48BF-                   	mov rdi, fmt_char_space
   789 0000083A [8701000000000000] 
   790 00000842 E998030000              	jmp .Lemit
   791                                  
   792                                  .Lclosure:
   793 00000847 4889FE                  	mov rsi, qword rdi
   794 0000084A 48BF-                   	mov rdi, fmt_closure
   794 0000084C [9701000000000000] 
   795 00000854 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   796 00000858 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   797 0000085C E97E030000              	jmp .Lemit
   798                                  
   799                                  .Lsymbol:
   800 00000861 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   801 00000865 BE01000000              	mov rsi, 1		 ; size = 1 byte
   802 0000086A 488B5701                	mov rdx, qword [rdi + 1] ; length
   803 0000086E 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   804 00000872 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   805 0000087A E8(00000000)            	call fwrite
   806 0000087F E970030000              	jmp .Lend
   807                                  	
   808                                  .Lpair:
   809 00000884 57                      	push rdi
   810 00000885 48BF-                   	mov rdi, fmt_lparen
   810 00000887 [C301000000000000] 
   811 0000088F B800000000              	mov rax, 0
   812                                          ENTER
    33 00000894 C8000000            <1>  enter 0, 0
    34 00000898 4883E4F0            <1>  and rsp, ~15
   813 0000089C E8(00000000)            	call printf
   814                                          LEAVE
    38 000008A1 C9                  <1>  leave
   815 000008A2 488B3C24                	mov rdi, qword [rsp] 	; pair
   816 000008A6 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   817 000008AA E8D1FDFFFF              	call print_sexpr
   818 000008AF 5F                      	pop rdi 		; pair
   819 000008B0 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   820                                  .Lcdr:
   821 000008B4 8A07                    	mov al, byte [rdi]
   822 000008B6 3C01                    	cmp al, T_nil
   823 000008B8 7447                    	je .Lcdr_nil
   824 000008BA 3C21                    	cmp al, T_pair
   825 000008BC 7462                    	je .Lcdr_pair
   826 000008BE 57                      	push rdi
   827 000008BF 48BF-                   	mov rdi, fmt_dotted_pair
   827 000008C1 [C501000000000000] 
   828 000008C9 B800000000              	mov rax, 0
   829                                  	ENTER
    33 000008CE C8000000            <1>  enter 0, 0
    34 000008D2 4883E4F0            <1>  and rsp, ~15
   830 000008D6 E8(00000000)            	call printf
   831                                  	LEAVE
    38 000008DB C9                  <1>  leave
   832 000008DC 5F                      	pop rdi
   833 000008DD E89EFDFFFF              	call print_sexpr
   834 000008E2 48BF-                   	mov rdi, fmt_rparen
   834 000008E4 [C901000000000000] 
   835 000008EC B800000000              	mov rax, 0
   836                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   837 000008F9 E8(00000000)            	call printf
   838                                  	LEAVE
    38 000008FE C9                  <1>  leave
   839                                  	LEAVE
    38 000008FF C9                  <1>  leave
   840 00000900 C3                      	ret
   841                                  
   842                                  .Lcdr_nil:
   843 00000901 48BF-                   	mov rdi, fmt_rparen
   843 00000903 [C901000000000000] 
   844 0000090B B800000000              	mov rax, 0
   845                                  	ENTER
    33 00000910 C8000000            <1>  enter 0, 0
    34 00000914 4883E4F0            <1>  and rsp, ~15
   846 00000918 E8(00000000)            	call printf
   847                                  	LEAVE
    38 0000091D C9                  <1>  leave
   848                                  	LEAVE
    38 0000091E C9                  <1>  leave
   849 0000091F C3                      	ret
   850                                  
   851                                  .Lcdr_pair:
   852 00000920 57                      	push rdi
   853 00000921 48BF-                   	mov rdi, fmt_space
   853 00000923 [CB01000000000000] 
   854 0000092B B800000000              	mov rax, 0
   855                                  	ENTER
    33 00000930 C8000000            <1>  enter 0, 0
    34 00000934 4883E4F0            <1>  and rsp, ~15
   856 00000938 E8(00000000)            	call printf
   857                                  	LEAVE
    38 0000093D C9                  <1>  leave
   858 0000093E 488B3C24                	mov rdi, qword [rsp]
   859 00000942 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   860 00000946 E835FDFFFF              	call print_sexpr
   861 0000094B 5F                      	pop rdi
   862 0000094C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   863 00000950 E95FFFFFFF              	jmp .Lcdr
   864                                  
   865                                  .Lvector:
   866 00000955 488B4701                	mov rax, qword [rdi + 1] ; length
   867 00000959 4883F800                	cmp rax, 0
   868 0000095D 0F8484000000            	je .Lvector_empty
   869 00000963 57                      	push rdi
   870 00000964 48BF-                   	mov rdi, fmt_vector
   870 00000966 [D101000000000000] 
   871 0000096E B800000000              	mov rax, 0
   872                                  	ENTER
    33 00000973 C8000000            <1>  enter 0, 0
    34 00000977 4883E4F0            <1>  and rsp, ~15
   873 0000097B E8(00000000)            	call printf
   874                                  	LEAVE
    38 00000980 C9                  <1>  leave
   875 00000981 488B3C24                	mov rdi, qword [rsp]
   876 00000985 FF7701                  	push qword [rdi + 1]
   877 00000988 6A01                    	push 1
   878 0000098A 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   879 0000098E E8EDFCFFFF              	call print_sexpr
   880                                  .Lvector_loop:
   881                                  	; [rsp] index
   882                                  	; [rsp + 8*1] limit
   883                                  	; [rsp + 8*2] vector
   884 00000993 488B0424                	mov rax, qword [rsp]
   885 00000997 483B442408              	cmp rax, qword [rsp + 8*1]
   886 0000099C 7436                    	je .Lvector_end
   887 0000099E 48BF-                   	mov rdi, fmt_space
   887 000009A0 [CB01000000000000] 
   888 000009A8 B800000000              	mov rax, 0
   889                                  	ENTER
    33 000009AD C8000000            <1>  enter 0, 0
    34 000009B1 4883E4F0            <1>  and rsp, ~15
   890 000009B5 E8(00000000)            	call printf
   891                                  	LEAVE
    38 000009BA C9                  <1>  leave
   892 000009BB 488B0424                	mov rax, qword [rsp]
   893 000009BF 488B5C2410              	mov rbx, qword [rsp + 8*2]
   894 000009C4 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   895 000009C9 E8B2FCFFFF              	call print_sexpr
   896 000009CE 48FF0424                	inc qword [rsp]
   897 000009D2 EBBF                    	jmp .Lvector_loop
   898                                  
   899                                  .Lvector_end:
   900 000009D4 4883C418                	add rsp, 8*3
   901 000009D8 48BF-                   	mov rdi, fmt_rparen
   901 000009DA [C901000000000000] 
   902 000009E2 E9F8010000              	jmp .Lemit	
   903                                  
   904                                  .Lvector_empty:
   905 000009E7 48BF-                   	mov rdi, fmt_empty_vector
   905 000009E9 [CD01000000000000] 
   906 000009F1 E9E9010000              	jmp .Lemit
   907                                  
   908                                  .Lreal:
   909 000009F6 FF7701                  	push qword [rdi + 1]
   910 000009F9 F20F100424              	movsd xmm0, qword [rsp]
   911 000009FE 4883C408                	add rsp, 8*1
   912 00000A02 48BF-                   	mov rdi, fmt_real
   912 00000A04 [D401000000000000] 
   913 00000A0C B801000000              	mov rax, 1
   914                                  	ENTER
    33 00000A11 C8000000            <1>  enter 0, 0
    34 00000A15 4883E4F0            <1>  and rsp, ~15
   915 00000A19 E8(00000000)            	call printf
   916                                  	LEAVE
    38 00000A1E C9                  <1>  leave
   917 00000A1F E9D0010000              	jmp .Lend
   918                                  
   919                                  .Lrational:
   920 00000A24 488B7701                	mov rsi, qword [rdi + 1]
   921 00000A28 488B5709                	mov rdx, qword [rdi + 1 + 8]
   922 00000A2C 4883FE00                	cmp rsi, 0
   923 00000A30 7415                    	je .Lrat_zero
   924 00000A32 4883FA01                	cmp rdx, 1
   925 00000A36 741E                    	je .Lrat_int
   926 00000A38 48BF-                   	mov rdi, fmt_fraction
   926 00000A3A [D701000000000000] 
   927 00000A42 E998010000              	jmp .Lemit
   928                                  
   929                                  .Lrat_zero:
   930 00000A47 48BF-                   	mov rdi, fmt_zero
   930 00000A49 [DF01000000000000] 
   931 00000A51 E989010000              	jmp .Lemit
   932                                  
   933                                  .Lrat_int:
   934 00000A56 48BF-                   	mov rdi, fmt_int
   934 00000A58 [E101000000000000] 
   935 00000A60 E97A010000              	jmp .Lemit
   936                                  
   937                                  .Lstring:
   938 00000A65 488D4709                	lea rax, [rdi + 1 + 8]
   939 00000A69 50                      	push rax
   940 00000A6A FF7701                  	push qword [rdi + 1]
   941 00000A6D 48BF-                   	mov rdi, fmt_dquote
   941 00000A6F [2502000000000000] 
   942 00000A77 B800000000              	mov rax, 0
   943                                  	ENTER
    33 00000A7C C8000000            <1>  enter 0, 0
    34 00000A80 4883E4F0            <1>  and rsp, ~15
   944 00000A84 E8(00000000)            	call printf
   945                                  	LEAVE
    38 00000A89 C9                  <1>  leave
   946                                  .Lstring_loop:
   947                                  	; qword [rsp]: limit
   948                                  	; qword [rsp + 8*1]: char *
   949 00000A8A 48833C2400              	cmp qword [rsp], 0
   950 00000A8F 0F84FD000000            	je .Lstring_end
   951 00000A95 488B442408              	mov rax, qword [rsp + 8*1]
   952 00000A9A 8A00                    	mov al, byte [rax]
   953 00000A9C 4825FF000000            	and rax, 255
   954 00000AA2 3C07                    	cmp al, 7
   955 00000AA4 7468                            je .Lstring_char_7
   956 00000AA6 3C08                            cmp al, 8
   957 00000AA8 7470                            je .Lstring_char_8
   958 00000AAA 3C09                            cmp al, 9
   959 00000AAC 7478                            je .Lstring_char_9
   960 00000AAE 3C0A                            cmp al, 10
   961 00000AB0 0F847C000000                    je .Lstring_char_10
   962 00000AB6 3C0B                            cmp al, 11
   963 00000AB8 0F8480000000                    je .Lstring_char_11
   964 00000ABE 3C0C                            cmp al, 12
   965 00000AC0 0F8484000000                    je .Lstring_char_12
   966 00000AC6 3C0D                            cmp al, 13
   967 00000AC8 0F8488000000                    je .Lstring_char_13
   968 00000ACE 3C22                            cmp al, 34
   969 00000AD0 0F848C000000                    je .Lstring_char_34
   970 00000AD6 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   972 00000AD8 3C20                            cmp al, ' '
   973 00000ADA 0F8CA0000000                    jl .Lstring_char_hex
   974 00000AE0 48BF-                           mov rdi, fmt_string_char
   974 00000AE2 [2702000000000000] 
   975 00000AEA 4889C6                          mov rsi, rax
   976                                  .Lstring_char_emit:
   977 00000AED B800000000                      mov rax, 0
   978                                          ENTER
    33 00000AF2 C8000000            <1>  enter 0, 0
    34 00000AF6 4883E4F0            <1>  and rsp, ~15
   979 00000AFA E8(00000000)                    call printf
   980                                          LEAVE
    38 00000AFF C9                  <1>  leave
   981 00000B00 48FF0C24                        dec qword [rsp]
   982 00000B04 48FF442408                      inc qword [rsp + 8*1]
   983 00000B09 E97CFFFFFF                      jmp .Lstring_loop
   984                                  
   985                                  .Lstring_char_7:
   986 00000B0E 48BF-                           mov rdi, fmt_string_char_7
   986 00000B10 [2A02000000000000] 
   987 00000B18 EBD3                            jmp .Lstring_char_emit
   988                                  
   989                                  .Lstring_char_8:
   990 00000B1A 48BF-                           mov rdi, fmt_string_char_8
   990 00000B1C [2D02000000000000] 
   991 00000B24 EBC7                            jmp .Lstring_char_emit
   992                                          
   993                                  .Lstring_char_9:
   994 00000B26 48BF-                           mov rdi, fmt_string_char_9
   994 00000B28 [3002000000000000] 
   995 00000B30 EBBB                            jmp .Lstring_char_emit
   996                                  
   997                                  .Lstring_char_10:
   998 00000B32 48BF-                           mov rdi, fmt_string_char_10
   998 00000B34 [3302000000000000] 
   999 00000B3C EBAF                            jmp .Lstring_char_emit
  1000                                  
  1001                                  .Lstring_char_11:
  1002 00000B3E 48BF-                           mov rdi, fmt_string_char_11
  1002 00000B40 [3602000000000000] 
  1003 00000B48 EBA3                            jmp .Lstring_char_emit
  1004                                  
  1005                                  .Lstring_char_12:
  1006 00000B4A 48BF-                           mov rdi, fmt_string_char_12
  1006 00000B4C [3902000000000000] 
  1007 00000B54 EB97                            jmp .Lstring_char_emit
  1008                                  
  1009                                  .Lstring_char_13:
  1010 00000B56 48BF-                           mov rdi, fmt_string_char_13
  1010 00000B58 [3C02000000000000] 
  1011 00000B60 EB8B                            jmp .Lstring_char_emit
  1012                                  
  1013                                  .Lstring_char_34:
  1014 00000B62 48BF-                           mov rdi, fmt_string_char_34
  1014 00000B64 [3F02000000000000] 
  1015 00000B6C E97CFFFFFF                      jmp .Lstring_char_emit
  1016                                  
  1017                                  .Lstring_char_92:
  1018 00000B71 48BF-                           mov rdi, fmt_string_char_92
  1018 00000B73 [4202000000000000] 
  1019 00000B7B E96DFFFFFF                      jmp .Lstring_char_emit
  1020                                  
  1021                                  .Lstring_char_hex:
  1022 00000B80 48BF-                           mov rdi, fmt_string_char_hex
  1022 00000B82 [4502000000000000] 
  1023 00000B8A 4889C6                          mov rsi, rax
  1024 00000B8D E95BFFFFFF                      jmp .Lstring_char_emit        
  1025                                  
  1026                                  .Lstring_end:
  1027 00000B92 4883C410                	add rsp, 8 * 2
  1028 00000B96 48BF-                   	mov rdi, fmt_dquote
  1028 00000B98 [2502000000000000] 
  1029 00000BA0 EB3D                    	jmp .Lemit
  1030                                  
  1031                                  .Lunknown_sexpr_type:
  1032 00000BA2 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1032 00000BA4 [E501000000000000] 
  1033 00000BAC 4825FF000000            	and rax, 255
  1034 00000BB2 4889C2                  	mov rdx, rax
  1035 00000BB5 4889F9                  	mov rcx, rdi
  1036 00000BB8 488B3C25[00000000]      	mov rdi, qword [stderr]
  1037 00000BC0 B800000000              	mov rax, 0
  1038                                  	ENTER
    33 00000BC5 C8000000            <1>  enter 0, 0
    34 00000BC9 4883E4F0            <1>  and rsp, ~15
  1039 00000BCD E8(00000000)            	call fprintf
  1040                                  	LEAVE
    38 00000BD2 C9                  <1>  leave
  1041 00000BD3 48C7C0FFFFFFFF          	mov rax, -1
  1042 00000BDA E8(00000000)            	call exit
  1043                                  
  1044                                  .Lemit:
  1045 00000BDF B800000000              	mov rax, 0
  1046                                  	ENTER
    33 00000BE4 C8000000            <1>  enter 0, 0
    34 00000BE8 4883E4F0            <1>  and rsp, ~15
  1047 00000BEC E8(00000000)            	call printf
  1048                                  	LEAVE
    38 00000BF1 C9                  <1>  leave
  1049 00000BF2 EB00                    	jmp .Lend
  1050                                  
  1051                                  .Lend:
  1052                                  	LEAVE
    38 00000BF4 C9                  <1>  leave
  1053 00000BF5 C3                      	ret
  1054                                  
  1055                                  ;;; rdi: address of free variable
  1056                                  ;;; rsi: address of code-pointer
  1057                                  bind_primitive:
  1058                                          ENTER
    33 00000BF6 C8000000            <1>  enter 0, 0
    34 00000BFA 4883E4F0            <1>  and rsp, ~15
  1059 00000BFE 57                              push rdi
  1060 00000BFF BF11000000                      mov rdi, (1 + 8 + 8)
  1061 00000C04 E85CFAFFFF                      call malloc
  1062 00000C09 5F                              pop rdi
  1063 00000C0A C60005                          mov byte [rax], T_closure
  1064 00000C0D 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1065 00000C15 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1066 00000C19 488907                          mov qword [rdi], rax
  1067                                          LEAVE
    38 00000C1C C9                  <1>  leave
  1068 00000C1D C3                              ret
  1069                                  
  1070                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1071                                  L_code_ptr_bin_apply:
  1072                                  	
  1073                                  L_code_ptr_is_null:
  1074                                          ENTER
    33 00000C1E C8000000            <1>  enter 0, 0
    34 00000C22 4883E4F0            <1>  and rsp, ~15
  1075 00000C26 48837D1801                      cmp COUNT, 1
  1076 00000C2B 0F85A5100000                    jne L_error_arg_count_1
  1077 00000C31 488B4520                        mov rax, PARAM(0)
  1078 00000C35 803801                          cmp byte [rax], T_nil
  1079 00000C38 750C                            jne .L_false
  1080 00000C3A 48B8-                           mov rax, sob_boolean_true
  1080 00000C3C [0300000000000000] 
  1081 00000C44 EB0A                            jmp .L_end
  1082                                  .L_false:
  1083 00000C46 48B8-                           mov rax, sob_boolean_false
  1083 00000C48 [0200000000000000] 
  1084                                  .L_end:
  1085                                          LEAVE
    38 00000C50 C9                  <1>  leave
  1086 00000C51 C21800                          ret AND_KILL_FRAME(1)
  1087                                  
  1088                                  L_code_ptr_is_pair:
  1089                                          ENTER
    33 00000C54 C8000000            <1>  enter 0, 0
    34 00000C58 4883E4F0            <1>  and rsp, ~15
  1090 00000C5C 48837D1801                      cmp COUNT, 1
  1091 00000C61 0F856F100000                    jne L_error_arg_count_1
  1092 00000C67 488B4520                        mov rax, PARAM(0)
  1093 00000C6B 803821                          cmp byte [rax], T_pair
  1094 00000C6E 750C                            jne .L_false
  1095 00000C70 48B8-                           mov rax, sob_boolean_true
  1095 00000C72 [0300000000000000] 
  1096 00000C7A EB0A                            jmp .L_end
  1097                                  .L_false:
  1098 00000C7C 48B8-                           mov rax, sob_boolean_false
  1098 00000C7E [0200000000000000] 
  1099                                  .L_end:
  1100                                          LEAVE
    38 00000C86 C9                  <1>  leave
  1101 00000C87 C21800                          ret AND_KILL_FRAME(1)
  1102                                          
  1103                                  L_code_ptr_is_void:
  1104                                          ENTER
    33 00000C8A C8000000            <1>  enter 0, 0
    34 00000C8E 4883E4F0            <1>  and rsp, ~15
  1105 00000C92 48837D1801                      cmp COUNT, 1
  1106 00000C97 0F8539100000                    jne L_error_arg_count_1
  1107 00000C9D 488B4520                        mov rax, PARAM(0)
  1108 00000CA1 803800                          cmp byte [rax], T_void
  1109 00000CA4 750C                            jne .L_false
  1110 00000CA6 48B8-                           mov rax, sob_boolean_true
  1110 00000CA8 [0300000000000000] 
  1111 00000CB0 EB0A                            jmp .L_end
  1112                                  .L_false:
  1113 00000CB2 48B8-                           mov rax, sob_boolean_false
  1113 00000CB4 [0200000000000000] 
  1114                                  .L_end:
  1115                                          LEAVE
    38 00000CBC C9                  <1>  leave
  1116 00000CBD C21800                          ret AND_KILL_FRAME(1)
  1117                                  
  1118                                  L_code_ptr_is_char:
  1119                                          ENTER
    33 00000CC0 C8000000            <1>  enter 0, 0
    34 00000CC4 4883E4F0            <1>  and rsp, ~15
  1120 00000CC8 48837D1801                      cmp COUNT, 1
  1121 00000CCD 0F8503100000                    jne L_error_arg_count_1
  1122 00000CD3 488B4520                        mov rax, PARAM(0)
  1123 00000CD7 803802                          cmp byte [rax], T_char
  1124 00000CDA 750C                            jne .L_false
  1125 00000CDC 48B8-                           mov rax, sob_boolean_true
  1125 00000CDE [0300000000000000] 
  1126 00000CE6 EB0A                            jmp .L_end
  1127                                  .L_false:
  1128 00000CE8 48B8-                           mov rax, sob_boolean_false
  1128 00000CEA [0200000000000000] 
  1129                                  .L_end:
  1130                                          LEAVE
    38 00000CF2 C9                  <1>  leave
  1131 00000CF3 C21800                          ret AND_KILL_FRAME(1)
  1132                                  
  1133                                  L_code_ptr_is_string:
  1134                                          ENTER
    33 00000CF6 C8000000            <1>  enter 0, 0
    34 00000CFA 4883E4F0            <1>  and rsp, ~15
  1135 00000CFE 48837D1801                      cmp COUNT, 1
  1136 00000D03 0F85CD0F0000                    jne L_error_arg_count_1
  1137 00000D09 488B4520                        mov rax, PARAM(0)
  1138 00000D0D 803803                          cmp byte [rax], T_string
  1139 00000D10 750C                            jne .L_false
  1140 00000D12 48B8-                           mov rax, sob_boolean_true
  1140 00000D14 [0300000000000000] 
  1141 00000D1C EB0A                            jmp .L_end
  1142                                  .L_false:
  1143 00000D1E 48B8-                           mov rax, sob_boolean_false
  1143 00000D20 [0200000000000000] 
  1144                                  .L_end:
  1145                                          LEAVE
    38 00000D28 C9                  <1>  leave
  1146 00000D29 C21800                          ret AND_KILL_FRAME(1)
  1147                                  
  1148                                  L_code_ptr_is_symbol:
  1149                                          ENTER
    33 00000D2C C8000000            <1>  enter 0, 0
    34 00000D30 4883E4F0            <1>  and rsp, ~15
  1150 00000D34 48837D1801                      cmp COUNT, 1
  1151 00000D39 0F85970F0000                    jne L_error_arg_count_1
  1152 00000D3F 488B4520                        mov rax, PARAM(0)
  1153 00000D43 803804                          cmp byte [rax], T_symbol
  1154 00000D46 750C                            jne .L_false
  1155 00000D48 48B8-                           mov rax, sob_boolean_true
  1155 00000D4A [0300000000000000] 
  1156 00000D52 EB0A                            jmp .L_end
  1157                                  .L_false:
  1158 00000D54 48B8-                           mov rax, sob_boolean_false
  1158 00000D56 [0200000000000000] 
  1159                                  .L_end:
  1160                                          LEAVE
    38 00000D5E C9                  <1>  leave
  1161 00000D5F C21800                          ret AND_KILL_FRAME(1)
  1162                                  
  1163                                  L_code_ptr_is_vector:
  1164                                          ENTER
    33 00000D62 C8000000            <1>  enter 0, 0
    34 00000D66 4883E4F0            <1>  and rsp, ~15
  1165 00000D6A 48837D1801                      cmp COUNT, 1
  1166 00000D6F 0F85610F0000                    jne L_error_arg_count_1
  1167 00000D75 488B4520                        mov rax, PARAM(0)
  1168 00000D79 803822                          cmp byte [rax], T_vector
  1169 00000D7C 750C                            jne .L_false
  1170 00000D7E 48B8-                           mov rax, sob_boolean_true
  1170 00000D80 [0300000000000000] 
  1171 00000D88 EB0A                            jmp .L_end
  1172                                  .L_false:
  1173 00000D8A 48B8-                           mov rax, sob_boolean_false
  1173 00000D8C [0200000000000000] 
  1174                                  .L_end:
  1175                                          LEAVE
    38 00000D94 C9                  <1>  leave
  1176 00000D95 C21800                          ret AND_KILL_FRAME(1)
  1177                                  
  1178                                  L_code_ptr_is_closure:
  1179                                          ENTER
    33 00000D98 C8000000            <1>  enter 0, 0
    34 00000D9C 4883E4F0            <1>  and rsp, ~15
  1180 00000DA0 48837D1801                      cmp COUNT, 1
  1181 00000DA5 0F852B0F0000                    jne L_error_arg_count_1
  1182 00000DAB 488B4520                        mov rax, PARAM(0)
  1183 00000DAF 803805                          cmp byte [rax], T_closure
  1184 00000DB2 750C                            jne .L_false
  1185 00000DB4 48B8-                           mov rax, sob_boolean_true
  1185 00000DB6 [0300000000000000] 
  1186 00000DBE EB0A                            jmp .L_end
  1187                                  .L_false:
  1188 00000DC0 48B8-                           mov rax, sob_boolean_false
  1188 00000DC2 [0200000000000000] 
  1189                                  .L_end:
  1190                                          LEAVE
    38 00000DCA C9                  <1>  leave
  1191 00000DCB C21800                          ret AND_KILL_FRAME(1)
  1192                                  
  1193                                  L_code_ptr_is_real:
  1194                                          ENTER
    33 00000DCE C8000000            <1>  enter 0, 0
    34 00000DD2 4883E4F0            <1>  and rsp, ~15
  1195 00000DD6 48837D1801                      cmp COUNT, 1
  1196 00000DDB 0F85F50E0000                    jne L_error_arg_count_1
  1197 00000DE1 488B4520                        mov rax, PARAM(0)
  1198 00000DE5 803812                          cmp byte [rax], T_real
  1199 00000DE8 750C                            jne .L_false
  1200 00000DEA 48B8-                           mov rax, sob_boolean_true
  1200 00000DEC [0300000000000000] 
  1201 00000DF4 EB0A                            jmp .L_end
  1202                                  .L_false:
  1203 00000DF6 48B8-                           mov rax, sob_boolean_false
  1203 00000DF8 [0200000000000000] 
  1204                                  .L_end:
  1205                                          LEAVE
    38 00000E00 C9                  <1>  leave
  1206 00000E01 C21800                          ret AND_KILL_FRAME(1)
  1207                                  
  1208                                  L_code_ptr_is_rational:
  1209                                          ENTER
    33 00000E04 C8000000            <1>  enter 0, 0
    34 00000E08 4883E4F0            <1>  and rsp, ~15
  1210 00000E0C 48837D1801                      cmp COUNT, 1
  1211 00000E11 0F85BF0E0000                    jne L_error_arg_count_1
  1212 00000E17 488B4520                        mov rax, PARAM(0)
  1213 00000E1B 803811                          cmp byte [rax], T_rational
  1214 00000E1E 750C                            jne .L_false
  1215 00000E20 48B8-                           mov rax, sob_boolean_true
  1215 00000E22 [0300000000000000] 
  1216 00000E2A EB0A                            jmp .L_end
  1217                                  .L_false:
  1218 00000E2C 48B8-                           mov rax, sob_boolean_false
  1218 00000E2E [0200000000000000] 
  1219                                  .L_end:
  1220                                          LEAVE
    38 00000E36 C9                  <1>  leave
  1221 00000E37 C21800                          ret AND_KILL_FRAME(1)
  1222                                  
  1223                                  L_code_ptr_is_boolean:
  1224                                          ENTER
    33 00000E3A C8000000            <1>  enter 0, 0
    34 00000E3E 4883E4F0            <1>  and rsp, ~15
  1225 00000E42 48837D1801                      cmp COUNT, 1
  1226 00000E47 0F85890E0000                    jne L_error_arg_count_1
  1227 00000E4D 488B4520                        mov rax, PARAM(0)
  1228 00000E51 8A18                            mov bl, byte [rax]
  1229 00000E53 80E308                          and bl, T_boolean
  1230 00000E56 740C                            je .L_false
  1231 00000E58 48B8-                           mov rax, sob_boolean_true
  1231 00000E5A [0300000000000000] 
  1232 00000E62 EB0A                            jmp .L_end
  1233                                  .L_false:
  1234 00000E64 48B8-                           mov rax, sob_boolean_false
  1234 00000E66 [0200000000000000] 
  1235                                  .L_end:
  1236                                          LEAVE
    38 00000E6E C9                  <1>  leave
  1237 00000E6F C21800                          ret AND_KILL_FRAME(1)
  1238                                          
  1239                                  L_code_ptr_is_number:
  1240                                          ENTER
    33 00000E72 C8000000            <1>  enter 0, 0
    34 00000E76 4883E4F0            <1>  and rsp, ~15
  1241 00000E7A 48837D1801                      cmp COUNT, 1
  1242 00000E7F 0F85510E0000                    jne L_error_arg_count_1
  1243 00000E85 488B4520                        mov rax, PARAM(0)
  1244 00000E89 8A18                            mov bl, byte [rax]
  1245 00000E8B 80E310                          and bl, T_number
  1246 00000E8E 740C                            je .L_false
  1247 00000E90 48B8-                           mov rax, sob_boolean_true
  1247 00000E92 [0300000000000000] 
  1248 00000E9A EB0A                            jmp .L_end
  1249                                  .L_false:
  1250 00000E9C 48B8-                           mov rax, sob_boolean_false
  1250 00000E9E [0200000000000000] 
  1251                                  .L_end:
  1252                                          LEAVE
    38 00000EA6 C9                  <1>  leave
  1253 00000EA7 C21800                          ret AND_KILL_FRAME(1)
  1254                                          
  1255                                  L_code_ptr_is_collection:
  1256                                          ENTER
    33 00000EAA C8000000            <1>  enter 0, 0
    34 00000EAE 4883E4F0            <1>  and rsp, ~15
  1257 00000EB2 48837D1801                      cmp COUNT, 1
  1258 00000EB7 0F85190E0000                    jne L_error_arg_count_1
  1259 00000EBD 488B4520                        mov rax, PARAM(0)
  1260 00000EC1 8A18                            mov bl, byte [rax]
  1261 00000EC3 80E320                          and bl, T_collection
  1262 00000EC6 740C                            je .L_false
  1263 00000EC8 48B8-                           mov rax, sob_boolean_true
  1263 00000ECA [0300000000000000] 
  1264 00000ED2 EB0A                            jmp .L_end
  1265                                  .L_false:
  1266 00000ED4 48B8-                           mov rax, sob_boolean_false
  1266 00000ED6 [0200000000000000] 
  1267                                  .L_end:
  1268                                          LEAVE
    38 00000EDE C9                  <1>  leave
  1269 00000EDF C21800                          ret AND_KILL_FRAME(1)
  1270                                  
  1271                                  L_code_ptr_cons:
  1272                                          ENTER
    33 00000EE2 C8000000            <1>  enter 0, 0
    34 00000EE6 4883E4F0            <1>  and rsp, ~15
  1273 00000EEA 48837D1802                      cmp COUNT, 2
  1274 00000EEF 0F85160E0000                    jne L_error_arg_count_2
  1275 00000EF5 BF11000000                      mov rdi, (1 + 8 + 8)
  1276 00000EFA E866F7FFFF                      call malloc
  1277 00000EFF C60021                          mov byte [rax], T_pair
  1278 00000F02 488B5D20                        mov rbx, PARAM(0)
  1279 00000F06 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1280 00000F0A 488B5D28                        mov rbx, PARAM(1)
  1281 00000F0E 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1282                                          LEAVE
    38 00000F12 C9                  <1>  leave
  1283 00000F13 C22000                          ret AND_KILL_FRAME(2)
  1284                                  
  1285                                  L_code_ptr_display_sexpr:
  1286                                          ENTER
    33 00000F16 C8000000            <1>  enter 0, 0
    34 00000F1A 4883E4F0            <1>  and rsp, ~15
  1287 00000F1E 48837D1801                      cmp COUNT, 1
  1288 00000F23 0F85AD0D0000                    jne L_error_arg_count_1
  1289 00000F29 488B7D20                        mov rdi, PARAM(0)
  1290 00000F2D E84EF7FFFF                      call print_sexpr
  1291 00000F32 48B8-                           mov rax, sob_void
  1291 00000F34 [0000000000000000] 
  1292                                          LEAVE
    38 00000F3C C9                  <1>  leave
  1293 00000F3D C21800                          ret AND_KILL_FRAME(1)
  1294                                  
  1295                                  L_code_ptr_write_char:
  1296                                          ENTER
    33 00000F40 C8000000            <1>  enter 0, 0
    34 00000F44 4883E4F0            <1>  and rsp, ~15
  1297 00000F48 48837D1801                      cmp COUNT, 1
  1298 00000F4D 0F85830D0000                    jne L_error_arg_count_1
  1299 00000F53 488B4520                        mov rax, PARAM(0)
  1300                                          assert_char(rax)
    42 00000F57 803802              <1>  cmp byte [%1], %2
    43 00000F5A 0F854A0E0000        <1>  jne L_error_incorrect_type
  1301 00000F60 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1302 00000F63 4825FF000000                    and rax, 255
  1303 00000F69 48BF-                           mov rdi, fmt_char
  1303 00000F6B [4B02000000000000] 
  1304 00000F73 4889C6                          mov rsi, rax
  1305 00000F76 B800000000                      mov rax, 0
  1306                                  	ENTER
    33 00000F7B C8000000            <1>  enter 0, 0
    34 00000F7F 4883E4F0            <1>  and rsp, ~15
  1307 00000F83 E8(00000000)                    call printf
  1308                                  	LEAVE
    38 00000F88 C9                  <1>  leave
  1309 00000F89 48B8-                           mov rax, sob_void
  1309 00000F8B [0000000000000000] 
  1310                                          LEAVE
    38 00000F93 C9                  <1>  leave
  1311 00000F94 C21800                          ret AND_KILL_FRAME(1)
  1312                                  
  1313                                  L_code_ptr_car:
  1314                                          ENTER
    33 00000F97 C8000000            <1>  enter 0, 0
    34 00000F9B 4883E4F0            <1>  and rsp, ~15
  1315 00000F9F 48837D1801                      cmp COUNT, 1
  1316 00000FA4 0F852C0D0000                    jne L_error_arg_count_1
  1317 00000FAA 488B4520                        mov rax, PARAM(0)
  1318                                          assert_pair(rax)
    42 00000FAE 803821              <1>  cmp byte [%1], %2
    43 00000FB1 0F85F30D0000        <1>  jne L_error_incorrect_type
  1319 00000FB7 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1320                                          LEAVE
    38 00000FBB C9                  <1>  leave
  1321 00000FBC C21800                          ret AND_KILL_FRAME(1)
  1322                                          
  1323                                  L_code_ptr_cdr:
  1324                                          ENTER
    33 00000FBF C8000000            <1>  enter 0, 0
    34 00000FC3 4883E4F0            <1>  and rsp, ~15
  1325 00000FC7 48837D1801                      cmp COUNT, 1
  1326 00000FCC 0F85040D0000                    jne L_error_arg_count_1
  1327 00000FD2 488B4520                        mov rax, PARAM(0)
  1328                                          assert_pair(rax)
    42 00000FD6 803821              <1>  cmp byte [%1], %2
    43 00000FD9 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1329 00000FDF 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1330                                          LEAVE
    38 00000FE3 C9                  <1>  leave
  1331 00000FE4 C21800                          ret AND_KILL_FRAME(1)
  1332                                          
  1333                                  L_code_ptr_string_length:
  1334                                          ENTER
    33 00000FE7 C8000000            <1>  enter 0, 0
    34 00000FEB 4883E4F0            <1>  and rsp, ~15
  1335 00000FEF 48837D1801                      cmp COUNT, 1
  1336 00000FF4 0F85DC0C0000                    jne L_error_arg_count_1
  1337 00000FFA 488B4520                        mov rax, PARAM(0)
  1338                                          assert_string(rax)
    42 00000FFE 803803              <1>  cmp byte [%1], %2
    43 00001001 0F85A30D0000        <1>  jne L_error_incorrect_type
  1339 00001007 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1340 0000100B E83A0C0000                      call make_integer
  1341                                          LEAVE
    38 00001010 C9                  <1>  leave
  1342 00001011 C21800                          ret AND_KILL_FRAME(1)
  1343                                  
  1344                                  L_code_ptr_vector_length:
  1345                                          ENTER
    33 00001014 C8000000            <1>  enter 0, 0
    34 00001018 4883E4F0            <1>  and rsp, ~15
  1346 0000101C 48837D1801                      cmp COUNT, 1
  1347 00001021 0F85AF0C0000                    jne L_error_arg_count_1
  1348 00001027 488B4520                        mov rax, PARAM(0)
  1349                                          assert_vector(rax)
    42 0000102B 803822              <1>  cmp byte [%1], %2
    43 0000102E 0F85760D0000        <1>  jne L_error_incorrect_type
  1350 00001034 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1351 00001038 E80D0C0000                      call make_integer
  1352                                          LEAVE
    38 0000103D C9                  <1>  leave
  1353 0000103E C21800                          ret AND_KILL_FRAME(1)
  1354                                  
  1355                                  L_code_ptr_real_to_integer:
  1356                                          ENTER
    33 00001041 C8000000            <1>  enter 0, 0
    34 00001045 4883E4F0            <1>  and rsp, ~15
  1357 00001049 48837D1801                      cmp COUNT, 1
  1358 0000104E 0F85820C0000                    jne L_error_arg_count_1
  1359 00001054 488B5D20                        mov rbx, PARAM(0)
  1360                                          assert_real(rbx)
    42 00001058 803B12              <1>  cmp byte [%1], %2
    43 0000105B 0F85490D0000        <1>  jne L_error_incorrect_type
  1361 00001061 F20F104301                      movsd xmm0, qword [rbx + 1]
  1362 00001066 F2480F2CF8                      cvttsd2si rdi, xmm0
  1363 0000106B E8DA0B0000                      call make_integer
  1364                                          LEAVE
    38 00001070 C9                  <1>  leave
  1365 00001071 C21800                          ret AND_KILL_FRAME(1)
  1366                                  
  1367                                  L_code_ptr_exit:
  1368                                          ENTER
    33 00001074 C8000000            <1>  enter 0, 0
    34 00001078 4883E4F0            <1>  and rsp, ~15
  1369 0000107C 48837D1800                      cmp COUNT, 0
  1370 00001081 0F851A0C0000                    jne L_error_arg_count_0
  1371 00001087 B800000000                      mov rax, 0
  1372 0000108C E8(00000000)                    call exit
  1373                                  
  1374                                  L_code_ptr_integer_to_real:
  1375                                          ENTER
    33 00001091 C8000000            <1>  enter 0, 0
    34 00001095 4883E4F0            <1>  and rsp, ~15
  1376 00001099 48837D1801                      cmp COUNT, 1
  1377 0000109E 0F85320C0000                    jne L_error_arg_count_1
  1378 000010A4 488B4520                        mov rax, PARAM(0)
  1379                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010A8 803811              <2>  cmp byte [%1], %2
    43 000010AB 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000010B1 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010B6 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1380 000010BC FF7001                          push qword [rax + 1]
  1381 000010BF F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1382 000010C5 E8640B0000                      call make_real
  1383                                          LEAVE
    38 000010CA C9                  <1>  leave
  1384 000010CB C21800                          ret AND_KILL_FRAME(1)
  1385                                  
  1386                                  L_code_ptr_rational_to_real:
  1387                                          ENTER
    33 000010CE C8000000            <1>  enter 0, 0
    34 000010D2 4883E4F0            <1>  and rsp, ~15
  1388 000010D6 48837D1801                      cmp COUNT, 1
  1389 000010DB 0F85F50B0000                    jne L_error_arg_count_1
  1390 000010E1 488B4520                        mov rax, PARAM(0)
  1391                                          assert_rational(rax)
    42 000010E5 803811              <1>  cmp byte [%1], %2
    43 000010E8 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1392 000010EE FF7001                          push qword [rax + 1]
  1393 000010F1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1394 000010F7 FF7009                          push qword [rax + 1 + 8]
  1395 000010FA F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1396 00001100 F20F5EC1                        divsd xmm0, xmm1
  1397 00001104 E8250B0000                      call make_real
  1398                                          LEAVE
    38 00001109 C9                  <1>  leave
  1399 0000110A C21800                          ret AND_KILL_FRAME(1)
  1400                                  
  1401                                  L_code_ptr_char_to_integer:
  1402                                          ENTER
    33 0000110D C8000000            <1>  enter 0, 0
    34 00001111 4883E4F0            <1>  and rsp, ~15
  1403 00001115 48837D1801                      cmp COUNT, 1
  1404 0000111A 0F85B60B0000                    jne L_error_arg_count_1
  1405 00001120 488B4520                        mov rax, PARAM(0)
  1406                                          assert_char(rax)
    42 00001124 803802              <1>  cmp byte [%1], %2
    43 00001127 0F857D0C0000        <1>  jne L_error_incorrect_type
  1407 0000112D 8A4001                          mov al, byte [rax + 1]
  1408 00001130 4825FF000000                    and rax, 255
  1409 00001136 4889C7                          mov rdi, rax
  1410 00001139 E80C0B0000                      call make_integer
  1411                                          LEAVE
    38 0000113E C9                  <1>  leave
  1412 0000113F C21800                          ret AND_KILL_FRAME(1)
  1413                                  
  1414                                  L_code_ptr_integer_to_char:
  1415                                          ENTER
    33 00001142 C8000000            <1>  enter 0, 0
    34 00001146 4883E4F0            <1>  and rsp, ~15
  1416 0000114A 48837D1801                      cmp COUNT, 1
  1417 0000114F 0F85810B0000                    jne L_error_arg_count_1
  1418 00001155 488B4520                        mov rax, PARAM(0)
  1419                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001159 803811              <2>  cmp byte [%1], %2
    43 0000115C 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001162 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001167 0F853D0C0000        <1>  jne L_error_incorrect_type
  1420 0000116D 488B5801                        mov rbx, qword [rax + 1]
  1421 00001171 4883FB00                        cmp rbx, 0
  1422 00001175 0F8EF50A0000                    jle L_error_integer_range
  1423 0000117B 4881FB00010000                  cmp rbx, 256
  1424 00001182 0F8DE80A0000                    jge L_error_integer_range
  1425 00001188 BF02000000                      mov rdi, (1 + 1)
  1426 0000118D E8D3F4FFFF                      call malloc
  1427 00001192 C60002                          mov byte [rax], T_char
  1428 00001195 885801                          mov byte [rax + 1], bl
  1429                                          LEAVE
    38 00001198 C9                  <1>  leave
  1430 00001199 C21800                          ret AND_KILL_FRAME(1)
  1431                                  
  1432                                  L_code_ptr_trng:
  1433                                          ENTER
    33 0000119C C8000000            <1>  enter 0, 0
    34 000011A0 4883E4F0            <1>  and rsp, ~15
  1434 000011A4 48837D1800                      cmp COUNT, 0
  1435 000011A9 0F85F20A0000                    jne L_error_arg_count_0
  1436 000011AF 480FC7F7                        rdrand rdi
  1437 000011B3 48D1EF                          shr rdi, 1
  1438 000011B6 E88F0A0000                      call make_integer
  1439                                          LEAVE
    38 000011BB C9                  <1>  leave
  1440 000011BC C21000                          ret AND_KILL_FRAME(0)
  1441                                  
  1442                                  L_code_ptr_is_zero:
  1443                                          ENTER
    33 000011BF C8000000            <1>  enter 0, 0
    34 000011C3 4883E4F0            <1>  and rsp, ~15
  1444 000011C7 48837D1801                      cmp COUNT, 1
  1445 000011CC 0F85040B0000                    jne L_error_arg_count_1
  1446 000011D2 488B4520                        mov rax, PARAM(0)
  1447 000011D6 803811                          cmp byte [rax], T_rational
  1448 000011D9 740A                            je .L_rational
  1449 000011DB 803812                          cmp byte [rax], T_real
  1450 000011DE 740E                            je .L_real
  1451 000011E0 E9C50B0000                      jmp L_error_incorrect_type
  1452                                  .L_rational:
  1453 000011E5 4883780100                      cmp qword [rax + 1], 0
  1454 000011EA 7420                            je .L_zero
  1455 000011EC EB12                            jmp .L_not_zero
  1456                                  .L_real:
  1457 000011EE 660FEFC0                        pxor xmm0, xmm0
  1458 000011F2 FF7001                          push qword [rax + 1]
  1459 000011F5 F20F100C24                      movsd xmm1, qword [rsp]
  1460 000011FA 660F2EC1                        ucomisd xmm0, xmm1
  1461 000011FE 740C                            je .L_zero
  1462                                  .L_not_zero:
  1463 00001200 48B8-                           mov rax, sob_boolean_false
  1463 00001202 [0200000000000000] 
  1464 0000120A EB0A                            jmp .L_end
  1465                                  .L_zero:
  1466 0000120C 48B8-                           mov rax, sob_boolean_true
  1466 0000120E [0300000000000000] 
  1467                                  .L_end:
  1468                                          LEAVE
    38 00001216 C9                  <1>  leave
  1469 00001217 C21800                          ret AND_KILL_FRAME(1)
  1470                                  
  1471                                  L_code_ptr_is_integer:
  1472                                          ENTER
    33 0000121A C8000000            <1>  enter 0, 0
    34 0000121E 4883E4F0            <1>  and rsp, ~15
  1473 00001222 48837D1801                      cmp COUNT, 1
  1474 00001227 0F85A90A0000                    jne L_error_arg_count_1
  1475 0000122D 488B4520                        mov rax, PARAM(0)
  1476 00001231 803811                          cmp byte [rax], T_rational
  1477 00001234 7513                            jne .L_false
  1478 00001236 4883780901                      cmp qword [rax + 1 + 8], 1
  1479 0000123B 750C                            jne .L_false
  1480 0000123D 48B8-                           mov rax, sob_boolean_true
  1480 0000123F [0300000000000000] 
  1481 00001247 EB0A                            jmp .L_exit
  1482                                  .L_false:
  1483 00001249 48B8-                           mov rax, sob_boolean_false
  1483 0000124B [0200000000000000] 
  1484                                  .L_exit:
  1485                                          LEAVE
    38 00001253 C9                  <1>  leave
  1486 00001254 C21800                          ret AND_KILL_FRAME(1)
  1487                                  
  1488                                  L_code_ptr_raw_bin_add_rr:
  1489                                          ENTER
    33 00001257 C8000000            <1>  enter 0, 0
    34 0000125B 4883E4F0            <1>  and rsp, ~15
  1490 0000125F 48837D1802                      cmp COUNT, 2
  1491 00001264 0F85A10A0000                    jne L_error_arg_count_2
  1492 0000126A 488B5D20                        mov rbx, PARAM(0)
  1493                                          assert_real(rbx)
    42 0000126E 803B12              <1>  cmp byte [%1], %2
    43 00001271 0F85330B0000        <1>  jne L_error_incorrect_type
  1494 00001277 488B4D28                        mov rcx, PARAM(1)
  1495                                          assert_real(rcx)
    42 0000127B 803912              <1>  cmp byte [%1], %2
    43 0000127E 0F85260B0000        <1>  jne L_error_incorrect_type
  1496 00001284 F20F104301                      movsd xmm0, qword [rbx + 1]
  1497 00001289 F20F104901                      movsd xmm1, qword [rcx + 1]
  1498 0000128E F20F58C1                        addsd xmm0, xmm1
  1499 00001292 E897090000                      call make_real
  1500                                          LEAVE
    38 00001297 C9                  <1>  leave
  1501 00001298 C22000                          ret AND_KILL_FRAME(2)
  1502                                  
  1503                                  L_code_ptr_raw_bin_sub_rr:
  1504                                          ENTER
    33 0000129B C8000000            <1>  enter 0, 0
    34 0000129F 4883E4F0            <1>  and rsp, ~15
  1505 000012A3 48837D1802                      cmp COUNT, 2
  1506 000012A8 0F855D0A0000                    jne L_error_arg_count_2
  1507 000012AE 488B5D20                        mov rbx, PARAM(0)
  1508                                          assert_real(rbx)
    42 000012B2 803B12              <1>  cmp byte [%1], %2
    43 000012B5 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1509 000012BB 488B4D28                        mov rcx, PARAM(1)
  1510                                          assert_real(rcx)
    42 000012BF 803912              <1>  cmp byte [%1], %2
    43 000012C2 0F85E20A0000        <1>  jne L_error_incorrect_type
  1511 000012C8 F20F104301                      movsd xmm0, qword [rbx + 1]
  1512 000012CD F20F104901                      movsd xmm1, qword [rcx + 1]
  1513 000012D2 F20F5CC1                        subsd xmm0, xmm1
  1514 000012D6 E853090000                      call make_real
  1515                                          LEAVE
    38 000012DB C9                  <1>  leave
  1516 000012DC C22000                          ret AND_KILL_FRAME(2)
  1517                                  
  1518                                  L_code_ptr_raw_bin_mul_rr:
  1519                                          ENTER
    33 000012DF C8000000            <1>  enter 0, 0
    34 000012E3 4883E4F0            <1>  and rsp, ~15
  1520 000012E7 48837D1802                      cmp COUNT, 2
  1521 000012EC 0F85190A0000                    jne L_error_arg_count_2
  1522 000012F2 488B5D20                        mov rbx, PARAM(0)
  1523                                          assert_real(rbx)
    42 000012F6 803B12              <1>  cmp byte [%1], %2
    43 000012F9 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1524 000012FF 488B4D28                        mov rcx, PARAM(1)
  1525                                          assert_real(rcx)
    42 00001303 803912              <1>  cmp byte [%1], %2
    43 00001306 0F859E0A0000        <1>  jne L_error_incorrect_type
  1526 0000130C F20F104301                      movsd xmm0, qword [rbx + 1]
  1527 00001311 F20F104901                      movsd xmm1, qword [rcx + 1]
  1528 00001316 F20F59C1                        mulsd xmm0, xmm1
  1529 0000131A E80F090000                      call make_real
  1530                                          LEAVE
    38 0000131F C9                  <1>  leave
  1531 00001320 C22000                          ret AND_KILL_FRAME(2)
  1532                                  
  1533                                  L_code_ptr_raw_bin_div_rr:
  1534                                          ENTER
    33 00001323 C8000000            <1>  enter 0, 0
    34 00001327 4883E4F0            <1>  and rsp, ~15
  1535 0000132B 48837D1802                      cmp COUNT, 2
  1536 00001330 0F85D5090000                    jne L_error_arg_count_2
  1537 00001336 488B5D20                        mov rbx, PARAM(0)
  1538                                          assert_real(rbx)
    42 0000133A 803B12              <1>  cmp byte [%1], %2
    43 0000133D 0F85670A0000        <1>  jne L_error_incorrect_type
  1539 00001343 488B4D28                        mov rcx, PARAM(1)
  1540                                          assert_real(rcx)
    42 00001347 803912              <1>  cmp byte [%1], %2
    43 0000134A 0F855A0A0000        <1>  jne L_error_incorrect_type
  1541 00001350 F20F104301                      movsd xmm0, qword [rbx + 1]
  1542 00001355 F20F104901                      movsd xmm1, qword [rcx + 1]
  1543 0000135A 660FEFD2                        pxor xmm2, xmm2
  1544 0000135E 660F2ECA                        ucomisd xmm1, xmm2
  1545 00001362 0F84730A0000                    je L_error_division_by_zero
  1546 00001368 F20F5EC1                        divsd xmm0, xmm1
  1547 0000136C E8BD080000                      call make_real
  1548                                          LEAVE
    38 00001371 C9                  <1>  leave
  1549 00001372 C22000                          ret AND_KILL_FRAME(2)
  1550                                  
  1551                                  L_code_ptr_raw_bin_add_qq:
  1552                                          ENTER
    33 00001375 C8000000            <1>  enter 0, 0
    34 00001379 4883E4F0            <1>  and rsp, ~15
  1553 0000137D 48837D1802                      cmp COUNT, 2
  1554 00001382 0F8583090000                    jne L_error_arg_count_2
  1555 00001388 4C8B4520                        mov r8, PARAM(0)
  1556                                          assert_rational(r8)
    42 0000138C 41803811            <1>  cmp byte [%1], %2
    43 00001390 0F85140A0000        <1>  jne L_error_incorrect_type
  1557 00001396 4C8B4D28                        mov r9, PARAM(1)
  1558                                          assert_rational(r9)
    42 0000139A 41803911            <1>  cmp byte [%1], %2
    43 0000139E 0F85060A0000        <1>  jne L_error_incorrect_type
  1559 000013A4 498B4001                        mov rax, qword [r8 + 1] ; num1
  1560 000013A8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1561 000013AC 4899                            cqo
  1562 000013AE 48F7EB                          imul rbx
  1563 000013B1 4889C6                          mov rsi, rax
  1564 000013B4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1565 000013B8 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1566 000013BC 4899                            cqo
  1567 000013BE 48F7EB                          imul rbx
  1568 000013C1 4801C6                          add rsi, rax
  1569 000013C4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1570 000013C8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1571 000013CC 4899                            cqo
  1572 000013CE 48F7EB                          imul rbx
  1573 000013D1 4889C7                          mov rdi, rax
  1574 000013D4 E827010000                      call normalize_rational
  1575                                          LEAVE
    38 000013D9 C9                  <1>  leave
  1576 000013DA C22000                          ret AND_KILL_FRAME(2)
  1577                                  
  1578                                  L_code_ptr_raw_bin_sub_qq:
  1579                                          ENTER
    33 000013DD C8000000            <1>  enter 0, 0
    34 000013E1 4883E4F0            <1>  and rsp, ~15
  1580 000013E5 48837D1802                      cmp COUNT, 2
  1581 000013EA 0F851B090000                    jne L_error_arg_count_2
  1582 000013F0 4C8B4520                        mov r8, PARAM(0)
  1583                                          assert_rational(r8)
    42 000013F4 41803811            <1>  cmp byte [%1], %2
    43 000013F8 0F85AC090000        <1>  jne L_error_incorrect_type
  1584 000013FE 4C8B4D28                        mov r9, PARAM(1)
  1585                                          assert_rational(r9)
    42 00001402 41803911            <1>  cmp byte [%1], %2
    43 00001406 0F859E090000        <1>  jne L_error_incorrect_type
  1586 0000140C 498B4001                        mov rax, qword [r8 + 1] ; num1
  1587 00001410 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1588 00001414 4899                            cqo
  1589 00001416 48F7EB                          imul rbx
  1590 00001419 4889C6                          mov rsi, rax
  1591 0000141C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1592 00001420 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1593 00001424 4899                            cqo
  1594 00001426 48F7EB                          imul rbx
  1595 00001429 4829C6                          sub rsi, rax
  1596 0000142C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1597 00001430 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1598 00001434 4899                            cqo
  1599 00001436 48F7EB                          imul rbx
  1600 00001439 4889C7                          mov rdi, rax
  1601 0000143C E8BF000000                      call normalize_rational
  1602                                          LEAVE
    38 00001441 C9                  <1>  leave
  1603 00001442 C22000                          ret AND_KILL_FRAME(2)
  1604                                  
  1605                                  L_code_ptr_raw_bin_mul_qq:
  1606                                          ENTER
    33 00001445 C8000000            <1>  enter 0, 0
    34 00001449 4883E4F0            <1>  and rsp, ~15
  1607 0000144D 48837D1802                      cmp COUNT, 2
  1608 00001452 0F85B3080000                    jne L_error_arg_count_2
  1609 00001458 4C8B4520                        mov r8, PARAM(0)
  1610                                          assert_rational(r8)
    42 0000145C 41803811            <1>  cmp byte [%1], %2
    43 00001460 0F8544090000        <1>  jne L_error_incorrect_type
  1611 00001466 4C8B4D28                        mov r9, PARAM(1)
  1612                                          assert_rational(r9)
    42 0000146A 41803911            <1>  cmp byte [%1], %2
    43 0000146E 0F8536090000        <1>  jne L_error_incorrect_type
  1613 00001474 498B4001                        mov rax, qword [r8 + 1] ; num1
  1614 00001478 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1615 0000147C 4899                            cqo
  1616 0000147E 48F7EB                          imul rbx
  1617 00001481 4889C6                          mov rsi, rax
  1618 00001484 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1619 00001488 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1620 0000148C 4899                            cqo
  1621 0000148E 48F7EB                          imul rbx
  1622 00001491 4889C7                          mov rdi, rax
  1623 00001494 E867000000                      call normalize_rational
  1624                                          LEAVE
    38 00001499 C9                  <1>  leave
  1625 0000149A C22000                          ret AND_KILL_FRAME(2)
  1626                                          
  1627                                  L_code_ptr_raw_bin_div_qq:
  1628                                          ENTER
    33 0000149D C8000000            <1>  enter 0, 0
    34 000014A1 4883E4F0            <1>  and rsp, ~15
  1629 000014A5 48837D1802                      cmp COUNT, 2
  1630 000014AA 0F855B080000                    jne L_error_arg_count_2
  1631 000014B0 4C8B4520                        mov r8, PARAM(0)
  1632                                          assert_rational(r8)
    42 000014B4 41803811            <1>  cmp byte [%1], %2
    43 000014B8 0F85EC080000        <1>  jne L_error_incorrect_type
  1633 000014BE 4C8B4D28                        mov r9, PARAM(1)
  1634                                          assert_rational(r9)
    42 000014C2 41803911            <1>  cmp byte [%1], %2
    43 000014C6 0F85DE080000        <1>  jne L_error_incorrect_type
  1635 000014CC 4983790100                      cmp qword [r9 + 1], 0
  1636 000014D1 0F8404090000                    je L_error_division_by_zero
  1637 000014D7 498B4001                        mov rax, qword [r8 + 1] ; num1
  1638 000014DB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1639 000014DF 4899                            cqo
  1640 000014E1 48F7EB                          imul rbx
  1641 000014E4 4889C6                          mov rsi, rax
  1642 000014E7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1643 000014EB 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1644 000014EF 4899                            cqo
  1645 000014F1 48F7EB                          imul rbx
  1646 000014F4 4889C7                          mov rdi, rax
  1647 000014F7 E804000000                      call normalize_rational
  1648                                          LEAVE
    38 000014FC C9                  <1>  leave
  1649 000014FD C22000                          ret AND_KILL_FRAME(2)
  1650                                          
  1651                                  normalize_rational:
  1652 00001500 56                              push rsi
  1653 00001501 57                              push rdi
  1654 00001502 E839000000                      call gcd
  1655 00001507 4889C3                          mov rbx, rax
  1656 0000150A 58                              pop rax
  1657 0000150B 4899                            cqo
  1658 0000150D 48F7FB                          idiv rbx
  1659 00001510 4989C0                          mov r8, rax
  1660 00001513 58                              pop rax
  1661 00001514 4899                            cqo
  1662 00001516 48F7FB                          idiv rbx
  1663 00001519 4989C1                          mov r9, rax
  1664 0000151C BF11000000                      mov rdi, (1 + 8 + 8)
  1665 00001521 E83FF1FFFF                      call malloc
  1666 00001526 C60011                          mov byte [rax], T_rational
  1667 00001529 4C894801                        mov qword [rax + 1], r9
  1668 0000152D 4C894009                        mov qword [rax + 1 + 8], r8
  1669 00001531 C3                              ret
  1670                                  
  1671                                  iabs:
  1672 00001532 4889F8                          mov rax, rdi
  1673 00001535 4883F800                        cmp rax, 0
  1674 00001539 7C01                            jl .Lneg
  1675 0000153B C3                              ret
  1676                                  .Lneg:
  1677 0000153C 48F7D8                          neg rax
  1678 0000153F C3                              ret
  1679                                  
  1680                                  gcd:
  1681 00001540 E8EDFFFFFF                      call iabs
  1682 00001545 4889C3                          mov rbx, rax
  1683 00001548 4889F7                          mov rdi, rsi
  1684 0000154B E8E2FFFFFF                      call iabs
  1685 00001550 4883F800                        cmp rax, 0
  1686 00001554 7502                            jne .L0
  1687 00001556 4893                            xchg rax, rbx
  1688                                  .L0:
  1689 00001558 4883FB00                        cmp rbx, 0
  1690 0000155C 740C                            je .L1
  1691 0000155E 4899                            cqo
  1692 00001560 48F7F3                          div rbx
  1693 00001563 4889D0                          mov rax, rdx
  1694 00001566 4893                            xchg rax, rbx
  1695 00001568 EBEE                            jmp .L0
  1696                                  .L1:
  1697 0000156A C3                              ret
  1698                                  
  1699                                  L_code_ptr_error:
  1700                                          ENTER
    33 0000156B C8000000            <1>  enter 0, 0
    34 0000156F 4883E4F0            <1>  and rsp, ~15
  1701 00001573 48837D1802                      cmp COUNT, 2
  1702 00001578 0F858D070000                    jne L_error_arg_count_2
  1703 0000157E 488B7520                        mov rsi, PARAM(0)
  1704                                          assert_symbol(rsi)
    42 00001582 803E04              <1>  cmp byte [%1], %2
    43 00001585 0F851F080000        <1>  jne L_error_incorrect_type
  1705 0000158B 488B7528                        mov rsi, PARAM(1)
  1706                                          assert_string(rsi)
    42 0000158F 803E03              <1>  cmp byte [%1], %2
    43 00001592 0F8512080000        <1>  jne L_error_incorrect_type
  1707 00001598 48BF-                           mov rdi, fmt_scheme_error_part_1
  1707 0000159A [8303000000000000] 
  1708 000015A2 B800000000                      mov rax, 0
  1709                                  	ENTER
    33 000015A7 C8000000            <1>  enter 0, 0
    34 000015AB 4883E4F0            <1>  and rsp, ~15
  1710 000015AF E8(00000000)                    call printf
  1711                                  	LEAVE
    38 000015B4 C9                  <1>  leave
  1712 000015B5 488B7D20                        mov rdi, PARAM(0)
  1713 000015B9 E8C2F0FFFF                      call print_sexpr
  1714 000015BE 48BF-                           mov rdi, fmt_scheme_error_part_2
  1714 000015C0 [9703000000000000] 
  1715 000015C8 B800000000                      mov rax, 0
  1716                                  	ENTER
    33 000015CD C8000000            <1>  enter 0, 0
    34 000015D1 4883E4F0            <1>  and rsp, ~15
  1717 000015D5 E8(00000000)                    call printf
  1718                                  	LEAVE
    38 000015DA C9                  <1>  leave
  1719 000015DB 488B4528                        mov rax, PARAM(1)       ; sob_string
  1720 000015DF BE01000000                      mov rsi, 1              ; size = 1 byte
  1721 000015E4 488B5001                        mov rdx, qword [rax + 1] ; length
  1722 000015E8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1723 000015EC 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1724 000015F4 E8(00000000)                    call fwrite
  1725 000015F9 48BF-                           mov rdi, fmt_scheme_error_part_3
  1725 000015FB [D903000000000000] 
  1726 00001603 B800000000                      mov rax, 0
  1727                                  	ENTER
    33 00001608 C8000000            <1>  enter 0, 0
    34 0000160C 4883E4F0            <1>  and rsp, ~15
  1728 00001610 E8(00000000)                    call printf
  1729                                  	LEAVE
    38 00001615 C9                  <1>  leave
  1730 00001616 48C7C0F7FFFFFF                  mov rax, -9
  1731 0000161D E8(00000000)                    call exit
  1732                                  
  1733                                  L_code_ptr_raw_less_than_rr:
  1734                                          ENTER
    33 00001622 C8000000            <1>  enter 0, 0
    34 00001626 4883E4F0            <1>  and rsp, ~15
  1735 0000162A 48837D1802                      cmp COUNT, 2
  1736 0000162F 0F85D6060000                    jne L_error_arg_count_2
  1737 00001635 488B7520                        mov rsi, PARAM(0)
  1738                                          assert_real(rsi)
    42 00001639 803E12              <1>  cmp byte [%1], %2
    43 0000163C 0F8568070000        <1>  jne L_error_incorrect_type
  1739 00001642 488B7D28                        mov rdi, PARAM(1)
  1740                                          assert_real(rdi)
    42 00001646 803F12              <1>  cmp byte [%1], %2
    43 00001649 0F855B070000        <1>  jne L_error_incorrect_type
  1741 0000164F F20F104601                      movsd xmm0, qword [rsi + 1]
  1742 00001654 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1743 00001659 660F2FC1                        comisd xmm0, xmm1
  1744 0000165D 730C                            jae .L_false
  1745 0000165F 48B8-                           mov rax, sob_boolean_true
  1745 00001661 [0300000000000000] 
  1746 00001669 EB0A                            jmp .L_exit
  1747                                  .L_false:
  1748 0000166B 48B8-                           mov rax, sob_boolean_false
  1748 0000166D [0200000000000000] 
  1749                                  .L_exit:
  1750                                          LEAVE
    38 00001675 C9                  <1>  leave
  1751 00001676 C22000                          ret AND_KILL_FRAME(2)
  1752                                          
  1753                                  L_code_ptr_raw_less_than_qq:
  1754                                          ENTER
    33 00001679 C8000000            <1>  enter 0, 0
    34 0000167D 4883E4F0            <1>  and rsp, ~15
  1755 00001681 48837D1802                      cmp COUNT, 2
  1756 00001686 0F857F060000                    jne L_error_arg_count_2
  1757 0000168C 488B7520                        mov rsi, PARAM(0)
  1758                                          assert_rational(rsi)
    42 00001690 803E11              <1>  cmp byte [%1], %2
    43 00001693 0F8511070000        <1>  jne L_error_incorrect_type
  1759 00001699 488B7D28                        mov rdi, PARAM(1)
  1760                                          assert_rational(rdi)
    42 0000169D 803F11              <1>  cmp byte [%1], %2
    43 000016A0 0F8504070000        <1>  jne L_error_incorrect_type
  1761 000016A6 488B4601                        mov rax, qword [rsi + 1] ; num1
  1762 000016AA 4899                            cqo
  1763 000016AC 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1764 000016B0 4889C1                          mov rcx, rax
  1765 000016B3 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1766 000016B7 4899                            cqo
  1767 000016B9 48F76F01                        imul qword [rdi + 1]          ; num2
  1768 000016BD 4829C1                          sub rcx, rax
  1769 000016C0 7D0C                            jge .L_false
  1770 000016C2 48B8-                           mov rax, sob_boolean_true
  1770 000016C4 [0300000000000000] 
  1771 000016CC EB0A                            jmp .L_exit
  1772                                  .L_false:
  1773 000016CE 48B8-                           mov rax, sob_boolean_false
  1773 000016D0 [0200000000000000] 
  1774                                  .L_exit:
  1775                                          LEAVE
    38 000016D8 C9                  <1>  leave
  1776 000016D9 C22000                          ret AND_KILL_FRAME(2)
  1777                                  
  1778                                  L_code_ptr_raw_equal_rr:
  1779                                          ENTER
    33 000016DC C8000000            <1>  enter 0, 0
    34 000016E0 4883E4F0            <1>  and rsp, ~15
  1780 000016E4 48837D1802                      cmp COUNT, 2
  1781 000016E9 0F851C060000                    jne L_error_arg_count_2
  1782 000016EF 488B7520                        mov rsi, PARAM(0)
  1783                                          assert_real(rsi)
    42 000016F3 803E12              <1>  cmp byte [%1], %2
    43 000016F6 0F85AE060000        <1>  jne L_error_incorrect_type
  1784 000016FC 488B7D28                        mov rdi, PARAM(1)
  1785                                          assert_real(rdi)
    42 00001700 803F12              <1>  cmp byte [%1], %2
    43 00001703 0F85A1060000        <1>  jne L_error_incorrect_type
  1786 00001709 F20F104601                      movsd xmm0, qword [rsi + 1]
  1787 0000170E F20F104F01                      movsd xmm1, qword [rdi + 1]
  1788 00001713 660F2FC1                        comisd xmm0, xmm1
  1789 00001717 750C                            jne .L_false
  1790 00001719 48B8-                           mov rax, sob_boolean_true
  1790 0000171B [0300000000000000] 
  1791 00001723 EB0A                            jmp .L_exit
  1792                                  .L_false:
  1793 00001725 48B8-                           mov rax, sob_boolean_false
  1793 00001727 [0200000000000000] 
  1794                                  .L_exit:
  1795                                          LEAVE
    38 0000172F C9                  <1>  leave
  1796 00001730 C22000                          ret AND_KILL_FRAME(2)
  1797                                          
  1798                                  L_code_ptr_raw_equal_qq:
  1799                                          ENTER
    33 00001733 C8000000            <1>  enter 0, 0
    34 00001737 4883E4F0            <1>  and rsp, ~15
  1800 0000173B 48837D1802                      cmp COUNT, 2
  1801 00001740 0F85C5050000                    jne L_error_arg_count_2
  1802 00001746 488B7520                        mov rsi, PARAM(0)
  1803                                          assert_rational(rsi)
    42 0000174A 803E11              <1>  cmp byte [%1], %2
    43 0000174D 0F8557060000        <1>  jne L_error_incorrect_type
  1804 00001753 488B7D28                        mov rdi, PARAM(1)
  1805                                          assert_rational(rdi)
    42 00001757 803F11              <1>  cmp byte [%1], %2
    43 0000175A 0F854A060000        <1>  jne L_error_incorrect_type
  1806 00001760 488B4601                        mov rax, qword [rsi + 1] ; num1
  1807 00001764 4899                            cqo
  1808 00001766 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1809 0000176A 4889C1                          mov rcx, rax
  1810 0000176D 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1811 00001771 4899                            cqo
  1812 00001773 48F76F01                        imul qword [rdi + 1]          ; num2
  1813 00001777 4829C1                          sub rcx, rax
  1814 0000177A 750C                            jne .L_false
  1815 0000177C 48B8-                           mov rax, sob_boolean_true
  1815 0000177E [0300000000000000] 
  1816 00001786 EB0A                            jmp .L_exit
  1817                                  .L_false:
  1818 00001788 48B8-                           mov rax, sob_boolean_false
  1818 0000178A [0200000000000000] 
  1819                                  .L_exit:
  1820                                          LEAVE
    38 00001792 C9                  <1>  leave
  1821 00001793 C22000                          ret AND_KILL_FRAME(2)
  1822                                  
  1823                                  L_code_ptr_quotient:
  1824                                          ENTER
    33 00001796 C8000000            <1>  enter 0, 0
    34 0000179A 4883E4F0            <1>  and rsp, ~15
  1825 0000179E 48837D1802                      cmp COUNT, 2
  1826 000017A3 0F8562050000                    jne L_error_arg_count_2
  1827 000017A9 488B7520                        mov rsi, PARAM(0)
  1828                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000017AD 803E11              <2>  cmp byte [%1], %2
    43 000017B0 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000017B6 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017BB 0F85E9050000        <1>  jne L_error_incorrect_type
  1829 000017C1 488B7D28                        mov rdi, PARAM(1)
  1830                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000017C5 803F11              <2>  cmp byte [%1], %2
    43 000017C8 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000017CE 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017D3 0F85D1050000        <1>  jne L_error_incorrect_type
  1831 000017D9 488B4601                        mov rax, qword [rsi + 1]
  1832 000017DD 488B5F01                        mov rbx, qword [rdi + 1]
  1833 000017E1 4883FB00                        cmp rbx, 0
  1834 000017E5 0F84F0050000                    je L_error_division_by_zero
  1835 000017EB 4899                            cqo
  1836 000017ED 48F7FB                          idiv rbx
  1837 000017F0 4889C7                          mov rdi, rax
  1838 000017F3 E852040000                      call make_integer
  1839                                          LEAVE
    38 000017F8 C9                  <1>  leave
  1840 000017F9 C22000                          ret AND_KILL_FRAME(2)
  1841                                          
  1842                                  L_code_ptr_remainder:
  1843                                          ENTER
    33 000017FC C8000000            <1>  enter 0, 0
    34 00001800 4883E4F0            <1>  and rsp, ~15
  1844 00001804 48837D1802                      cmp COUNT, 2
  1845 00001809 0F85FC040000                    jne L_error_arg_count_2
  1846 0000180F 488B7520                        mov rsi, PARAM(0)
  1847                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001813 803E11              <2>  cmp byte [%1], %2
    43 00001816 0F858E050000        <2>  jne L_error_incorrect_type
    48 0000181C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001821 0F8583050000        <1>  jne L_error_incorrect_type
  1848 00001827 488B7D28                        mov rdi, PARAM(1)
  1849                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000182B 803F11              <2>  cmp byte [%1], %2
    43 0000182E 0F8576050000        <2>  jne L_error_incorrect_type
    48 00001834 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001839 0F856B050000        <1>  jne L_error_incorrect_type
  1850 0000183F 488B4601                        mov rax, qword [rsi + 1]
  1851 00001843 488B5F01                        mov rbx, qword [rdi + 1]
  1852 00001847 4883FB00                        cmp rbx, 0
  1853 0000184B 0F848A050000                    je L_error_division_by_zero
  1854 00001851 4899                            cqo
  1855 00001853 48F7FB                          idiv rbx
  1856 00001856 4889D7                          mov rdi, rdx
  1857 00001859 E8EC030000                      call make_integer
  1858                                          LEAVE
    38 0000185E C9                  <1>  leave
  1859 0000185F C22000                          ret AND_KILL_FRAME(2)
  1860                                  
  1861                                  L_code_ptr_set_car:
  1862                                          ENTER
    33 00001862 C8000000            <1>  enter 0, 0
    34 00001866 4883E4F0            <1>  and rsp, ~15
  1863 0000186A 48837D1802                      cmp COUNT, 2
  1864 0000186F 0F8596040000                    jne L_error_arg_count_2
  1865 00001875 488B4520                        mov rax, PARAM(0)
  1866                                          assert_pair(rax)
    42 00001879 803821              <1>  cmp byte [%1], %2
    43 0000187C 0F8528050000        <1>  jne L_error_incorrect_type
  1867 00001882 488B5D28                        mov rbx, PARAM(1)
  1868 00001886 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1869 0000188A 48B8-                           mov rax, sob_void
  1869 0000188C [0000000000000000] 
  1870                                          LEAVE
    38 00001894 C9                  <1>  leave
  1871 00001895 C22000                          ret AND_KILL_FRAME(2)
  1872                                  
  1873                                  L_code_ptr_set_cdr:
  1874                                          ENTER
    33 00001898 C8000000            <1>  enter 0, 0
    34 0000189C 4883E4F0            <1>  and rsp, ~15
  1875 000018A0 48837D1802                      cmp COUNT, 2
  1876 000018A5 0F8560040000                    jne L_error_arg_count_2
  1877 000018AB 488B4520                        mov rax, PARAM(0)
  1878                                          assert_pair(rax)
    42 000018AF 803821              <1>  cmp byte [%1], %2
    43 000018B2 0F85F2040000        <1>  jne L_error_incorrect_type
  1879 000018B8 488B5D28                        mov rbx, PARAM(1)
  1880 000018BC 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1881 000018C0 48B8-                           mov rax, sob_void
  1881 000018C2 [0000000000000000] 
  1882                                          LEAVE
    38 000018CA C9                  <1>  leave
  1883 000018CB C22000                          ret AND_KILL_FRAME(2)
  1884                                  
  1885                                  L_code_ptr_string_ref:
  1886                                          ENTER
    33 000018CE C8000000            <1>  enter 0, 0
    34 000018D2 4883E4F0            <1>  and rsp, ~15
  1887 000018D6 48837D1802                      cmp COUNT, 2
  1888 000018DB 0F852A040000                    jne L_error_arg_count_2
  1889 000018E1 488B7D20                        mov rdi, PARAM(0)
  1890                                          assert_string(rdi)
    42 000018E5 803F03              <1>  cmp byte [%1], %2
    43 000018E8 0F85BC040000        <1>  jne L_error_incorrect_type
  1891 000018EE 488B7528                        mov rsi, PARAM(1)
  1892                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018F2 803E11              <2>  cmp byte [%1], %2
    43 000018F5 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000018FB 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001900 0F85A4040000        <1>  jne L_error_incorrect_type
  1893 00001906 488B5701                        mov rdx, qword [rdi + 1]
  1894 0000190A 488B4E01                        mov rcx, qword [rsi + 1]
  1895 0000190E 4839D1                          cmp rcx, rdx
  1896 00001911 0F8D59030000                    jge L_error_integer_range
  1897 00001917 4883F900                        cmp rcx, 0
  1898 0000191B 0F8C4F030000                    jl L_error_integer_range
  1899 00001921 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1900 00001925 BF02000000                      mov rdi, 2
  1901 0000192A E836EDFFFF                      call malloc
  1902 0000192F C60002                          mov byte [rax], T_char
  1903 00001932 885801                          mov byte [rax + 1], bl
  1904                                          LEAVE
    38 00001935 C9                  <1>  leave
  1905 00001936 C22000                          ret AND_KILL_FRAME(2)
  1906                                  
  1907                                  L_code_ptr_vector_ref:
  1908                                          ENTER
    33 00001939 C8000000            <1>  enter 0, 0
    34 0000193D 4883E4F0            <1>  and rsp, ~15
  1909 00001941 48837D1802                      cmp COUNT, 2
  1910 00001946 0F85BF030000                    jne L_error_arg_count_2
  1911 0000194C 488B7D20                        mov rdi, PARAM(0)
  1912                                          assert_vector(rdi)
    42 00001950 803F22              <1>  cmp byte [%1], %2
    43 00001953 0F8551040000        <1>  jne L_error_incorrect_type
  1913 00001959 488B7528                        mov rsi, PARAM(1)
  1914                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000195D 803E11              <2>  cmp byte [%1], %2
    43 00001960 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001966 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000196B 0F8539040000        <1>  jne L_error_incorrect_type
  1915 00001971 488B5701                        mov rdx, qword [rdi + 1]
  1916 00001975 488B4E01                        mov rcx, qword [rsi + 1]
  1917 00001979 4839D1                          cmp rcx, rdx
  1918 0000197C 0F8DEE020000                    jge L_error_integer_range
  1919 00001982 4883F900                        cmp rcx, 0
  1920 00001986 0F8CE4020000                    jl L_error_integer_range
  1921 0000198C 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1922                                          LEAVE
    38 00001991 C9                  <1>  leave
  1923 00001992 C22000                          ret AND_KILL_FRAME(2)
  1924                                  
  1925                                  L_code_ptr_vector_set:
  1926                                          ENTER
    33 00001995 C8000000            <1>  enter 0, 0
    34 00001999 4883E4F0            <1>  and rsp, ~15
  1927 0000199D 48837D1803                      cmp COUNT, 3
  1928 000019A2 0F85CD030000                    jne L_error_arg_count_3
  1929 000019A8 488B7D20                        mov rdi, PARAM(0)
  1930                                          assert_vector(rdi)
    42 000019AC 803F22              <1>  cmp byte [%1], %2
    43 000019AF 0F85F5030000        <1>  jne L_error_incorrect_type
  1931 000019B5 488B7528                        mov rsi, PARAM(1)
  1932                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019B9 803E11              <2>  cmp byte [%1], %2
    43 000019BC 0F85E8030000        <2>  jne L_error_incorrect_type
    48 000019C2 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019C7 0F85DD030000        <1>  jne L_error_incorrect_type
  1933 000019CD 488B5701                        mov rdx, qword [rdi + 1]
  1934 000019D1 488B4E01                        mov rcx, qword [rsi + 1]
  1935 000019D5 4839D1                          cmp rcx, rdx
  1936 000019D8 0F8D92020000                    jge L_error_integer_range
  1937 000019DE 4883F900                        cmp rcx, 0
  1938 000019E2 0F8C88020000                    jl L_error_integer_range
  1939 000019E8 488B4530                        mov rax, PARAM(2)
  1940 000019EC 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1941 000019F1 48B8-                           mov rax, sob_void
  1941 000019F3 [0000000000000000] 
  1942                                          LEAVE
    38 000019FB C9                  <1>  leave
  1943 000019FC C22800                          ret AND_KILL_FRAME(3)
  1944                                  
  1945                                  L_code_ptr_string_set:
  1946                                          ENTER
    33 000019FF C8000000            <1>  enter 0, 0
    34 00001A03 4883E4F0            <1>  and rsp, ~15
  1947 00001A07 48837D1803                      cmp COUNT, 3
  1948 00001A0C 0F8563030000                    jne L_error_arg_count_3
  1949 00001A12 488B7D20                        mov rdi, PARAM(0)
  1950                                          assert_string(rdi)
    42 00001A16 803F03              <1>  cmp byte [%1], %2
    43 00001A19 0F858B030000        <1>  jne L_error_incorrect_type
  1951 00001A1F 488B7528                        mov rsi, PARAM(1)
  1952                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A23 803E11              <2>  cmp byte [%1], %2
    43 00001A26 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001A2C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A31 0F8573030000        <1>  jne L_error_incorrect_type
  1953 00001A37 488B5701                        mov rdx, qword [rdi + 1]
  1954 00001A3B 488B4E01                        mov rcx, qword [rsi + 1]
  1955 00001A3F 4839D1                          cmp rcx, rdx
  1956 00001A42 0F8D28020000                    jge L_error_integer_range
  1957 00001A48 4883F900                        cmp rcx, 0
  1958 00001A4C 0F8C1E020000                    jl L_error_integer_range
  1959 00001A52 488B4530                        mov rax, PARAM(2)
  1960                                          assert_char(rax)
    42 00001A56 803802              <1>  cmp byte [%1], %2
    43 00001A59 0F854B030000        <1>  jne L_error_incorrect_type
  1961 00001A5F 8A4001                          mov al, byte [rax + 1]
  1962 00001A62 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1963 00001A66 48B8-                           mov rax, sob_void
  1963 00001A68 [0000000000000000] 
  1964                                          LEAVE
    38 00001A70 C9                  <1>  leave
  1965 00001A71 C22800                          ret AND_KILL_FRAME(3)
  1966                                  
  1967                                  L_code_ptr_make_vector:
  1968                                          ENTER
    33 00001A74 C8000000            <1>  enter 0, 0
    34 00001A78 4883E4F0            <1>  and rsp, ~15
  1969 00001A7C 48837D1802                      cmp COUNT, 2
  1970 00001A81 0F8584020000                    jne L_error_arg_count_2
  1971 00001A87 488B4D20                        mov rcx, PARAM(0)
  1972                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A8B 803911              <2>  cmp byte [%1], %2
    43 00001A8E 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001A94 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A99 0F850B030000        <1>  jne L_error_incorrect_type
  1973 00001A9F 488B4901                        mov rcx, qword [rcx + 1]
  1974 00001AA3 4883F900                        cmp rcx, 0
  1975 00001AA7 0F8CC3010000                    jl L_error_integer_range
  1976 00001AAD 488B5528                        mov rdx, PARAM(1)
  1977 00001AB1 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1978 00001AB9 E8A7EBFFFF                      call malloc
  1979 00001ABE C60022                          mov byte [rax], T_vector
  1980 00001AC1 48894801                        mov qword [rax + 1], rcx
  1981 00001AC5 41B800000000                    mov r8, 0
  1982                                  .L0:
  1983 00001ACB 4939C8                          cmp r8, rcx
  1984 00001ACE 740A                            je .L1
  1985 00001AD0 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1986 00001AD5 49FFC0                          inc r8
  1987 00001AD8 EBF1                            jmp .L0
  1988                                  .L1:
  1989                                          LEAVE
    38 00001ADA C9                  <1>  leave
  1990 00001ADB C22000                          ret AND_KILL_FRAME(2)
  1991                                          
  1992                                  L_code_ptr_make_string:
  1993                                          ENTER
    33 00001ADE C8000000            <1>  enter 0, 0
    34 00001AE2 4883E4F0            <1>  and rsp, ~15
  1994 00001AE6 48837D1802                      cmp COUNT, 2
  1995 00001AEB 0F851A020000                    jne L_error_arg_count_2
  1996 00001AF1 488B4D20                        mov rcx, PARAM(0)
  1997                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001AF5 803911              <2>  cmp byte [%1], %2
    43 00001AF8 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001AFE 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B03 0F85A1020000        <1>  jne L_error_incorrect_type
  1998 00001B09 488B4901                        mov rcx, qword [rcx + 1]
  1999 00001B0D 4883F900                        cmp rcx, 0
  2000 00001B11 0F8C59010000                    jl L_error_integer_range
  2001 00001B17 488B5528                        mov rdx, PARAM(1)
  2002                                          assert_char(rdx)
    42 00001B1B 803A02              <1>  cmp byte [%1], %2
    43 00001B1E 0F8586020000        <1>  jne L_error_incorrect_type
  2003 00001B24 8A5201                          mov dl, byte [rdx + 1]
  2004 00001B27 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2005 00001B2B E835EBFFFF                      call malloc
  2006 00001B30 C60003                          mov byte [rax], T_string
  2007 00001B33 48894801                        mov qword [rax + 1], rcx
  2008 00001B37 41B800000000                    mov r8, 0
  2009                                  .L0:
  2010 00001B3D 4939C8                          cmp r8, rcx
  2011 00001B40 740A                            je .L1
  2012 00001B42 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2013 00001B47 49FFC0                          inc r8
  2014 00001B4A EBF1                            jmp .L0
  2015                                  .L1:
  2016                                          LEAVE
    38 00001B4C C9                  <1>  leave
  2017 00001B4D C22000                          ret AND_KILL_FRAME(2)
  2018                                  
  2019                                  L_code_ptr_numerator:
  2020                                          ENTER
    33 00001B50 C8000000            <1>  enter 0, 0
    34 00001B54 4883E4F0            <1>  and rsp, ~15
  2021 00001B58 48837D1801                      cmp COUNT, 1
  2022 00001B5D 0F8573010000                    jne L_error_arg_count_1
  2023 00001B63 488B4520                        mov rax, PARAM(0)
  2024                                          assert_rational(rax)
    42 00001B67 803811              <1>  cmp byte [%1], %2
    43 00001B6A 0F853A020000        <1>  jne L_error_incorrect_type
  2025 00001B70 488B7801                        mov rdi, qword [rax + 1]
  2026 00001B74 E8D1000000                      call make_integer
  2027                                          LEAVE
    38 00001B79 C9                  <1>  leave
  2028 00001B7A C21800                          ret AND_KILL_FRAME(1)
  2029                                          
  2030                                  L_code_ptr_denominator:
  2031                                          ENTER
    33 00001B7D C8000000            <1>  enter 0, 0
    34 00001B81 4883E4F0            <1>  and rsp, ~15
  2032 00001B85 48837D1801                      cmp COUNT, 1
  2033 00001B8A 0F8546010000                    jne L_error_arg_count_1
  2034 00001B90 488B4520                        mov rax, PARAM(0)
  2035                                          assert_rational(rax)
    42 00001B94 803811              <1>  cmp byte [%1], %2
    43 00001B97 0F850D020000        <1>  jne L_error_incorrect_type
  2036 00001B9D 488B7809                        mov rdi, qword [rax + 1 + 8]
  2037 00001BA1 E8A4000000                      call make_integer
  2038                                          LEAVE
    38 00001BA6 C9                  <1>  leave
  2039 00001BA7 C21800                          ret AND_KILL_FRAME(1)
  2040                                  
  2041                                  L_code_ptr_eq:
  2042                                  	ENTER
    33 00001BAA C8000000            <1>  enter 0, 0
    34 00001BAE 4883E4F0            <1>  and rsp, ~15
  2043 00001BB2 48837D1802              	cmp COUNT, 2
  2044 00001BB7 0F854E010000            	jne L_error_arg_count_2
  2045 00001BBD 488B7D20                	mov rdi, PARAM(0)
  2046 00001BC1 488B7528                	mov rsi, PARAM(1)
  2047 00001BC5 4839F7                  	cmp rdi, rsi
  2048 00001BC8 744A                    	je .L_eq_true
  2049 00001BCA 8A17                    	mov dl, byte [rdi]
  2050 00001BCC 3A16                    	cmp dl, byte [rsi]
  2051 00001BCE 7550                    	jne .L_eq_false
  2052 00001BD0 80FA02                  	cmp dl, T_char
  2053 00001BD3 7437                    	je .L_char
  2054 00001BD5 80FA04                  	cmp dl, T_symbol
  2055 00001BD8 742A                    	je .L_symbol
  2056 00001BDA 80FA12                  	cmp dl, T_real
  2057 00001BDD 741D                    	je .L_real
  2058 00001BDF 80FA11                  	cmp dl, T_rational
  2059 00001BE2 7402                    	je .L_rational
  2060 00001BE4 EB3A                    	jmp .L_eq_false
  2061                                  .L_rational:
  2062 00001BE6 488B4601                	mov rax, qword [rsi + 1]
  2063 00001BEA 483B4701                	cmp rax, qword [rdi + 1]
  2064 00001BEE 7530                    	jne .L_eq_false
  2065 00001BF0 488B4609                	mov rax, qword [rsi + 1 + 8]
  2066 00001BF4 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2067 00001BF8 7526                    	jne .L_eq_false
  2068 00001BFA EB18                    	jmp .L_eq_true
  2069                                  .L_real:
  2070 00001BFC 488B4601                	mov rax, qword [rsi + 1]
  2071 00001C00 483B4701                	cmp rax, qword [rdi + 1]
  2072                                  .L_symbol:
  2073                                  	; never reached, because symbols are static!
  2074                                  	; but I'm keeping it in case, I'll ever change
  2075                                  	; the implementation
  2076 00001C04 488B4601                	mov rax, qword [rsi + 1]
  2077 00001C08 483B4701                	cmp rax, qword [rdi + 1]
  2078                                  .L_char:
  2079 00001C0C 8A5E01                  	mov bl, byte [rsi + 1]
  2080 00001C0F 3A5F01                  	cmp bl, byte [rdi + 1]
  2081 00001C12 750C                    	jne .L_eq_false
  2082                                  .L_eq_true:
  2083 00001C14 48B8-                   	mov rax, sob_boolean_true
  2083 00001C16 [0300000000000000] 
  2084 00001C1E EB0A                    	jmp .L_eq_exit
  2085                                  .L_eq_false:
  2086 00001C20 48B8-                   	mov rax, sob_boolean_false
  2086 00001C22 [0200000000000000] 
  2087                                  .L_eq_exit:
  2088                                  	LEAVE
    38 00001C2A C9                  <1>  leave
  2089 00001C2B C22000                  	ret AND_KILL_FRAME(2)
  2090                                  
  2091                                  make_real:
  2092                                          ENTER
    33 00001C2E C8000000            <1>  enter 0, 0
    34 00001C32 4883E4F0            <1>  and rsp, ~15
  2093 00001C36 BF09000000                      mov rdi, (1 + 8)
  2094 00001C3B E825EAFFFF                      call malloc
  2095 00001C40 C60012                          mov byte [rax], T_real
  2096 00001C43 F20F114001                      movsd qword [rax + 1], xmm0
  2097                                          LEAVE
    38 00001C48 C9                  <1>  leave
  2098 00001C49 C3                              ret
  2099                                          
  2100                                  make_integer:
  2101                                          ENTER
    33 00001C4A C8000000            <1>  enter 0, 0
    34 00001C4E 4883E4F0            <1>  and rsp, ~15
  2102 00001C52 4889FE                          mov rsi, rdi
  2103 00001C55 BF11000000                      mov rdi, (1 + 8 + 8)
  2104 00001C5A E806EAFFFF                      call malloc
  2105 00001C5F C60011                          mov byte [rax], T_rational
  2106 00001C62 48897001                        mov qword [rax + 1], rsi
  2107 00001C66 48C7400901000000                mov qword [rax + 1 + 8], 1
  2108                                          LEAVE
    38 00001C6E C9                  <1>  leave
  2109 00001C6F C3                              ret
  2110                                          
  2111                                  L_error_integer_range:
  2112 00001C70 488B3C25[00000000]              mov rdi, qword [stderr]
  2113 00001C78 48BE-                           mov rsi, fmt_integer_range
  2113 00001C7A [5003000000000000] 
  2114 00001C82 B800000000                      mov rax, 0
  2115                                  	ENTER
    33 00001C87 C8000000            <1>  enter 0, 0
    34 00001C8B 4883E4F0            <1>  and rsp, ~15
  2116 00001C8F E8(00000000)                    call fprintf
  2117                                  	LEAVE
    38 00001C94 C9                  <1>  leave
  2118 00001C95 48C7C0FBFFFFFF                  mov rax, -5
  2119 00001C9C E8(00000000)                    call exit
  2120                                  
  2121                                  L_error_arg_count_0:
  2122 00001CA1 488B3C25[00000000]              mov rdi, qword [stderr]
  2123 00001CA9 48BE-                           mov rsi, fmt_arg_count_0
  2123 00001CAB [4E02000000000000] 
  2124 00001CB3 488B5518                        mov rdx, COUNT
  2125 00001CB7 B800000000                      mov rax, 0
  2126                                  	ENTER
    33 00001CBC C8000000            <1>  enter 0, 0
    34 00001CC0 4883E4F0            <1>  and rsp, ~15
  2127 00001CC4 E8(00000000)                    call fprintf
  2128                                  	LEAVE
    38 00001CC9 C9                  <1>  leave
  2129 00001CCA 48C7C0FDFFFFFF                  mov rax, -3
  2130 00001CD1 E8(00000000)                    call exit
  2131                                  
  2132                                  L_error_arg_count_1:
  2133 00001CD6 488B3C25[00000000]              mov rdi, qword [stderr]
  2134 00001CDE 48BE-                           mov rsi, fmt_arg_count_1
  2134 00001CE0 [7602000000000000] 
  2135 00001CE8 488B5518                        mov rdx, COUNT
  2136 00001CEC B800000000                      mov rax, 0
  2137                                  	ENTER
    33 00001CF1 C8000000            <1>  enter 0, 0
    34 00001CF5 4883E4F0            <1>  and rsp, ~15
  2138 00001CF9 E8(00000000)                    call fprintf
  2139                                  	LEAVE
    38 00001CFE C9                  <1>  leave
  2140 00001CFF 48C7C0FDFFFFFF                  mov rax, -3
  2141 00001D06 E8(00000000)                    call exit
  2142                                  
  2143                                  L_error_arg_count_2:
  2144 00001D0B 488B3C25[00000000]              mov rdi, qword [stderr]
  2145 00001D13 48BE-                           mov rsi, fmt_arg_count_2
  2145 00001D15 [DC02000000000000] 
  2146 00001D1D 488B5518                        mov rdx, COUNT
  2147 00001D21 B800000000                      mov rax, 0
  2148                                  	ENTER
    33 00001D26 C8000000            <1>  enter 0, 0
    34 00001D2A 4883E4F0            <1>  and rsp, ~15
  2149 00001D2E E8(00000000)                    call fprintf
  2150                                  	LEAVE
    38 00001D33 C9                  <1>  leave
  2151 00001D34 48C7C0FDFFFFFF                  mov rax, -3
  2152 00001D3B E8(00000000)                    call exit
  2153                                  
  2154                                  L_error_arg_count_12:
  2155 00001D40 488B3C25[00000000]              mov rdi, qword [stderr]
  2156 00001D48 48BE-                           mov rsi, fmt_arg_count_12
  2156 00001D4A [9C02000000000000] 
  2157 00001D52 488B5518                        mov rdx, COUNT
  2158 00001D56 B800000000                      mov rax, 0
  2159                                  	ENTER
    33 00001D5B C8000000            <1>  enter 0, 0
    34 00001D5F 4883E4F0            <1>  and rsp, ~15
  2160 00001D63 E8(00000000)                    call fprintf
  2161                                  	LEAVE
    38 00001D68 C9                  <1>  leave
  2162 00001D69 48C7C0FDFFFFFF                  mov rax, -3
  2163 00001D70 E8(00000000)                    call exit
  2164                                  
  2165                                  L_error_arg_count_3:
  2166 00001D75 488B3C25[00000000]              mov rdi, qword [stderr]
  2167 00001D7D 48BE-                           mov rsi, fmt_arg_count_3
  2167 00001D7F [0303000000000000] 
  2168 00001D87 488B5518                        mov rdx, COUNT
  2169 00001D8B B800000000                      mov rax, 0
  2170                                  	ENTER
    33 00001D90 C8000000            <1>  enter 0, 0
    34 00001D94 4883E4F0            <1>  and rsp, ~15
  2171 00001D98 E8(00000000)                    call fprintf
  2172                                  	LEAVE
    38 00001D9D C9                  <1>  leave
  2173 00001D9E 48C7C0FDFFFFFF                  mov rax, -3
  2174 00001DA5 E8(00000000)                    call exit
  2175                                          
  2176                                  L_error_incorrect_type:
  2177 00001DAA 488B3C25[00000000]              mov rdi, qword [stderr]
  2178 00001DB2 48BE-                           mov rsi, fmt_type
  2178 00001DB4 [2C03000000000000] 
  2179 00001DBC B800000000                      mov rax, 0
  2180                                  	ENTER
    33 00001DC1 C8000000            <1>  enter 0, 0
    34 00001DC5 4883E4F0            <1>  and rsp, ~15
  2181 00001DC9 E8(00000000)                    call fprintf
  2182                                  	LEAVE
    38 00001DCE C9                  <1>  leave
  2183 00001DCF 48C7C0FCFFFFFF                  mov rax, -4
  2184 00001DD6 E8(00000000)                    call exit
  2185                                  
  2186                                  L_error_division_by_zero:
  2187 00001DDB 488B3C25[00000000]              mov rdi, qword [stderr]
  2188 00001DE3 48BE-                           mov rsi, fmt_division_by_zero
  2188 00001DE5 [6D03000000000000] 
  2189 00001DED B800000000                      mov rax, 0
  2190                                  	ENTER
    33 00001DF2 C8000000            <1>  enter 0, 0
    34 00001DF6 4883E4F0            <1>  and rsp, ~15
  2191 00001DFA E8(00000000)                    call fprintf
  2192                                  	LEAVE
    38 00001DFF C9                  <1>  leave
  2193 00001E00 48C7C0F8FFFFFF                  mov rax, -8
  2194 00001E07 E8(00000000)                    call exit
  2195                                  
  2196                                  section .data
  2197                                  fmt_char:
  2198 0000024B 256300                          db `%c\0`
  2199                                  fmt_arg_count_0:
  2200 0000024E 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2200 00000257 74696E67207A65726F-
  2200 00000260 20617267756D656E74-
  2200 00000269 732E20466F756E6420-
  2200 00000272 25640A00           
  2201                                  fmt_arg_count_1:
  2202 00000276 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2202 0000027F 74696E67206F6E6520-
  2202 00000288 617267756D656E742E-
  2202 00000291 20466F756E64202564-
  2202 0000029A 0A00               
  2203                                  fmt_arg_count_12:
  2204 0000029C 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2204 000002A5 74696E67206F6E6520-
  2204 000002AE 726571756972656420-
  2204 000002B7 616E64206F6E65206F-
  2204 000002C0 7074696F6E616C2061-
  2204 000002C9 7267756D656E742E20-
  2204 000002D2 466F756E642025640A-
  2204 000002DB 00                 
  2205                                  fmt_arg_count_2:
  2206 000002DC 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2206 000002E5 74696E672074776F20-
  2206 000002EE 617267756D656E7473-
  2206 000002F7 2E20466F756E642025-
  2206 00000300 640A00             
  2207                                  fmt_arg_count_3:
  2208 00000303 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2208 0000030C 74696E672074687265-
  2208 00000315 6520617267756D656E-
  2208 0000031E 74732E20466F756E64-
  2208 00000327 2025640A00         
  2209                                  fmt_type:
  2210 0000032C 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2210 00000335 696F6E207061737365-
  2210 0000033E 6420696E636F727265-
  2210 00000347 637420747970650A00 
  2211                                  fmt_integer_range:
  2212 00000350 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2212 00000359 7265637420696E7465-
  2212 00000362 6765722072616E6765-
  2212 0000036B 0A00               
  2213                                  fmt_division_by_zero:
  2214 0000036D 212121204469766973-             db `!!! Division by zero\n\0`
  2214 00000376 696F6E206279207A65-
  2214 0000037F 726F0A00           
  2215                                  fmt_scheme_error_part_1:
  2216 00000383 0A2121212054686520-             db `\n!!! The procedure \0`
  2216 0000038C 70726F636564757265-
  2216 00000395 2000               
  2217                                  fmt_scheme_error_part_2:
  2218 00000397 2061736B656420746F-             db ` asked to terminate the program\n`
  2218 000003A0 207465726D696E6174-
  2218 000003A9 65207468652070726F-
  2218 000003B2 6772616D0A         
  2219 000003B7 202020207769746820-             db `    with the following message:\n\n\0`
  2219 000003C0 74686520666F6C6C6F-
  2219 000003C9 77696E67206D657373-
  2219 000003D2 6167653A0A0A00     
  2220                                  fmt_scheme_error_part_3:
  2221 000003D9 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2221 000003E2 210A0A00           

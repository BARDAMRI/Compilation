     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "a"
    84 00000007 0100000000000000        	dq 1
    85 0000000F 61                      	db 0x61
    86 00000010 04                      	db T_symbol	; a
    87 00000011 [0600000000000000]      	dq L_constants + 6
    88 00000019 21                      	db T_pair	; (a)
    89 0000001A [1000000000000000]-     	dq L_constants + 16, L_constants + 1
    89 00000022 [0100000000000000] 
    90                                  
    91                                  section .bss
    92                                  free_var_0:	; location of null?
    93 00000000 ????????????????        	resq 1
    94                                  free_var_1:	; location of pair?
    95 00000008 ????????????????        	resq 1
    96                                  free_var_2:	; location of void?
    97 00000010 ????????????????        	resq 1
    98                                  free_var_3:	; location of char?
    99 00000018 ????????????????        	resq 1
   100                                  free_var_4:	; location of string?
   101 00000020 ????????????????        	resq 1
   102                                  free_var_5:	; location of symbol?
   103 00000028 ????????????????        	resq 1
   104                                  free_var_6:	; location of vector?
   105 00000030 ????????????????        	resq 1
   106                                  free_var_7:	; location of procedure?
   107 00000038 ????????????????        	resq 1
   108                                  free_var_8:	; location of real?
   109 00000040 ????????????????        	resq 1
   110                                  free_var_9:	; location of rational?
   111 00000048 ????????????????        	resq 1
   112                                  free_var_10:	; location of boolean?
   113 00000050 ????????????????        	resq 1
   114                                  free_var_11:	; location of number?
   115 00000058 ????????????????        	resq 1
   116                                  free_var_12:	; location of collection?
   117 00000060 ????????????????        	resq 1
   118                                  free_var_13:	; location of cons
   119 00000068 ????????????????        	resq 1
   120                                  free_var_14:	; location of display-sexpr
   121 00000070 ????????????????        	resq 1
   122                                  free_var_15:	; location of write-char
   123 00000078 ????????????????        	resq 1
   124                                  free_var_16:	; location of car
   125 00000080 ????????????????        	resq 1
   126                                  free_var_17:	; location of cdr
   127 00000088 ????????????????        	resq 1
   128                                  free_var_18:	; location of string-length
   129 00000090 ????????????????        	resq 1
   130                                  free_var_19:	; location of vector-length
   131 00000098 ????????????????        	resq 1
   132                                  free_var_20:	; location of real->integer
   133 000000A0 ????????????????        	resq 1
   134                                  free_var_21:	; location of exit
   135 000000A8 ????????????????        	resq 1
   136                                  free_var_22:	; location of integer->real
   137 000000B0 ????????????????        	resq 1
   138                                  free_var_23:	; location of rational->real
   139 000000B8 ????????????????        	resq 1
   140                                  free_var_24:	; location of char->integer
   141 000000C0 ????????????????        	resq 1
   142                                  free_var_25:	; location of integer->char
   143 000000C8 ????????????????        	resq 1
   144                                  free_var_26:	; location of trng
   145 000000D0 ????????????????        	resq 1
   146                                  free_var_27:	; location of zero?
   147 000000D8 ????????????????        	resq 1
   148                                  free_var_28:	; location of integer?
   149 000000E0 ????????????????        	resq 1
   150                                  free_var_29:	; location of __bin-apply
   151 000000E8 ????????????????        	resq 1
   152                                  free_var_30:	; location of __bin-add-rr
   153 000000F0 ????????????????        	resq 1
   154                                  free_var_31:	; location of __bin-sub-rr
   155 000000F8 ????????????????        	resq 1
   156                                  free_var_32:	; location of __bin-mul-rr
   157 00000100 ????????????????        	resq 1
   158                                  free_var_33:	; location of __bin-div-rr
   159 00000108 ????????????????        	resq 1
   160                                  free_var_34:	; location of __bin-add-qq
   161 00000110 ????????????????        	resq 1
   162                                  free_var_35:	; location of __bin-sub-qq
   163 00000118 ????????????????        	resq 1
   164                                  free_var_36:	; location of __bin-mul-qq
   165 00000120 ????????????????        	resq 1
   166                                  free_var_37:	; location of __bin-div-qq
   167 00000128 ????????????????        	resq 1
   168                                  free_var_38:	; location of error
   169 00000130 ????????????????        	resq 1
   170                                  free_var_39:	; location of __bin-less-than-rr
   171 00000138 ????????????????        	resq 1
   172                                  free_var_40:	; location of __bin-less-than-qq
   173 00000140 ????????????????        	resq 1
   174                                  free_var_41:	; location of __bin-equal-rr
   175 00000148 ????????????????        	resq 1
   176                                  free_var_42:	; location of __bin-equal-qq
   177 00000150 ????????????????        	resq 1
   178                                  free_var_43:	; location of quotient
   179 00000158 ????????????????        	resq 1
   180                                  free_var_44:	; location of remainder
   181 00000160 ????????????????        	resq 1
   182                                  free_var_45:	; location of set-car!
   183 00000168 ????????????????        	resq 1
   184                                  free_var_46:	; location of set-cdr!
   185 00000170 ????????????????        	resq 1
   186                                  free_var_47:	; location of string-ref
   187 00000178 ????????????????        	resq 1
   188                                  free_var_48:	; location of vector-ref
   189 00000180 ????????????????        	resq 1
   190                                  free_var_49:	; location of vector-set!
   191 00000188 ????????????????        	resq 1
   192                                  free_var_50:	; location of string-set!
   193 00000190 ????????????????        	resq 1
   194                                  free_var_51:	; location of make-vector
   195 00000198 ????????????????        	resq 1
   196                                  free_var_52:	; location of make-string
   197 000001A0 ????????????????        	resq 1
   198                                  free_var_53:	; location of numerator
   199 000001A8 ????????????????        	resq 1
   200                                  free_var_54:	; location of denominator
   201 000001B0 ????????????????        	resq 1
   202                                  free_var_55:	; location of eq?
   203 000001B8 ????????????????        	resq 1
   204                                  
   205                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   206                                  global main
   207                                  section .text
   208                                  main:
   209 00000000 C8000000                        enter 0, 0
   210                                          
   211                                  	; building closure for null?
   212 00000004 48BF-                   	mov rdi, free_var_0
   212 00000006 [0000000000000000] 
   213 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   213 00000010 [1E0C000000000000] 
   214 00000018 E8D90B0000              	call bind_primitive
   215                                  
   216                                  	; building closure for pair?
   217 0000001D 48BF-                   	mov rdi, free_var_1
   217 0000001F [0800000000000000] 
   218 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   218 00000029 [540C000000000000] 
   219 00000031 E8C00B0000              	call bind_primitive
   220                                  
   221                                  	; building closure for void?
   222 00000036 48BF-                   	mov rdi, free_var_2
   222 00000038 [1000000000000000] 
   223 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   223 00000042 [8A0C000000000000] 
   224 0000004A E8A70B0000              	call bind_primitive
   225                                  
   226                                  	; building closure for char?
   227 0000004F 48BF-                   	mov rdi, free_var_3
   227 00000051 [1800000000000000] 
   228 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   228 0000005B [C00C000000000000] 
   229 00000063 E88E0B0000              	call bind_primitive
   230                                  
   231                                  	; building closure for string?
   232 00000068 48BF-                   	mov rdi, free_var_4
   232 0000006A [2000000000000000] 
   233 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   233 00000074 [F60C000000000000] 
   234 0000007C E8750B0000              	call bind_primitive
   235                                  
   236                                  	; building closure for symbol?
   237 00000081 48BF-                   	mov rdi, free_var_5
   237 00000083 [2800000000000000] 
   238 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   238 0000008D [2C0D000000000000] 
   239 00000095 E85C0B0000              	call bind_primitive
   240                                  
   241                                  	; building closure for vector?
   242 0000009A 48BF-                   	mov rdi, free_var_6
   242 0000009C [3000000000000000] 
   243 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   243 000000A6 [620D000000000000] 
   244 000000AE E8430B0000              	call bind_primitive
   245                                  
   246                                  	; building closure for procedure?
   247 000000B3 48BF-                   	mov rdi, free_var_7
   247 000000B5 [3800000000000000] 
   248 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   248 000000BF [980D000000000000] 
   249 000000C7 E82A0B0000              	call bind_primitive
   250                                  
   251                                  	; building closure for real?
   252 000000CC 48BF-                   	mov rdi, free_var_8
   252 000000CE [4000000000000000] 
   253 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   253 000000D8 [CE0D000000000000] 
   254 000000E0 E8110B0000              	call bind_primitive
   255                                  
   256                                  	; building closure for rational?
   257 000000E5 48BF-                   	mov rdi, free_var_9
   257 000000E7 [4800000000000000] 
   258 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   258 000000F1 [040E000000000000] 
   259 000000F9 E8F80A0000              	call bind_primitive
   260                                  
   261                                  	; building closure for boolean?
   262 000000FE 48BF-                   	mov rdi, free_var_10
   262 00000100 [5000000000000000] 
   263 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   263 0000010A [3A0E000000000000] 
   264 00000112 E8DF0A0000              	call bind_primitive
   265                                  
   266                                  	; building closure for number?
   267 00000117 48BF-                   	mov rdi, free_var_11
   267 00000119 [5800000000000000] 
   268 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   268 00000123 [720E000000000000] 
   269 0000012B E8C60A0000              	call bind_primitive
   270                                  
   271                                  	; building closure for collection?
   272 00000130 48BF-                   	mov rdi, free_var_12
   272 00000132 [6000000000000000] 
   273 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   273 0000013C [AA0E000000000000] 
   274 00000144 E8AD0A0000              	call bind_primitive
   275                                  
   276                                  	; building closure for cons
   277 00000149 48BF-                   	mov rdi, free_var_13
   277 0000014B [6800000000000000] 
   278 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   278 00000155 [E20E000000000000] 
   279 0000015D E8940A0000              	call bind_primitive
   280                                  
   281                                  	; building closure for display-sexpr
   282 00000162 48BF-                   	mov rdi, free_var_14
   282 00000164 [7000000000000000] 
   283 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   283 0000016E [160F000000000000] 
   284 00000176 E87B0A0000              	call bind_primitive
   285                                  
   286                                  	; building closure for write-char
   287 0000017B 48BF-                   	mov rdi, free_var_15
   287 0000017D [7800000000000000] 
   288 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   288 00000187 [400F000000000000] 
   289 0000018F E8620A0000              	call bind_primitive
   290                                  
   291                                  	; building closure for car
   292 00000194 48BF-                   	mov rdi, free_var_16
   292 00000196 [8000000000000000] 
   293 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   293 000001A0 [970F000000000000] 
   294 000001A8 E8490A0000              	call bind_primitive
   295                                  
   296                                  	; building closure for cdr
   297 000001AD 48BF-                   	mov rdi, free_var_17
   297 000001AF [8800000000000000] 
   298 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   298 000001B9 [BF0F000000000000] 
   299 000001C1 E8300A0000              	call bind_primitive
   300                                  
   301                                  	; building closure for string-length
   302 000001C6 48BF-                   	mov rdi, free_var_18
   302 000001C8 [9000000000000000] 
   303 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   303 000001D2 [E70F000000000000] 
   304 000001DA E8170A0000              	call bind_primitive
   305                                  
   306                                  	; building closure for vector-length
   307 000001DF 48BF-                   	mov rdi, free_var_19
   307 000001E1 [9800000000000000] 
   308 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   308 000001EB [1410000000000000] 
   309 000001F3 E8FE090000              	call bind_primitive
   310                                  
   311                                  	; building closure for real->integer
   312 000001F8 48BF-                   	mov rdi, free_var_20
   312 000001FA [A000000000000000] 
   313 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   313 00000204 [4110000000000000] 
   314 0000020C E8E5090000              	call bind_primitive
   315                                  
   316                                  	; building closure for exit
   317 00000211 48BF-                   	mov rdi, free_var_21
   317 00000213 [A800000000000000] 
   318 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   318 0000021D [7410000000000000] 
   319 00000225 E8CC090000              	call bind_primitive
   320                                  
   321                                  	; building closure for integer->real
   322 0000022A 48BF-                   	mov rdi, free_var_22
   322 0000022C [B000000000000000] 
   323 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   323 00000236 [9110000000000000] 
   324 0000023E E8B3090000              	call bind_primitive
   325                                  
   326                                  	; building closure for rational->real
   327 00000243 48BF-                   	mov rdi, free_var_23
   327 00000245 [B800000000000000] 
   328 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   328 0000024F [CE10000000000000] 
   329 00000257 E89A090000              	call bind_primitive
   330                                  
   331                                  	; building closure for char->integer
   332 0000025C 48BF-                   	mov rdi, free_var_24
   332 0000025E [C000000000000000] 
   333 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   333 00000268 [0D11000000000000] 
   334 00000270 E881090000              	call bind_primitive
   335                                  
   336                                  	; building closure for integer->char
   337 00000275 48BF-                   	mov rdi, free_var_25
   337 00000277 [C800000000000000] 
   338 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   338 00000281 [4211000000000000] 
   339 00000289 E868090000              	call bind_primitive
   340                                  
   341                                  	; building closure for trng
   342 0000028E 48BF-                   	mov rdi, free_var_26
   342 00000290 [D000000000000000] 
   343 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   343 0000029A [9C11000000000000] 
   344 000002A2 E84F090000              	call bind_primitive
   345                                  
   346                                  	; building closure for zero?
   347 000002A7 48BF-                   	mov rdi, free_var_27
   347 000002A9 [D800000000000000] 
   348 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   348 000002B3 [BF11000000000000] 
   349 000002BB E836090000              	call bind_primitive
   350                                  
   351                                  	; building closure for integer?
   352 000002C0 48BF-                   	mov rdi, free_var_28
   352 000002C2 [E000000000000000] 
   353 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   353 000002CC [1A12000000000000] 
   354 000002D4 E81D090000              	call bind_primitive
   355                                  
   356                                  	; building closure for __bin-apply
   357 000002D9 48BF-                   	mov rdi, free_var_29
   357 000002DB [E800000000000000] 
   358 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   358 000002E5 [1E0C000000000000] 
   359 000002ED E804090000              	call bind_primitive
   360                                  
   361                                  	; building closure for __bin-add-rr
   362 000002F2 48BF-                   	mov rdi, free_var_30
   362 000002F4 [F000000000000000] 
   363 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   363 000002FE [5712000000000000] 
   364 00000306 E8EB080000              	call bind_primitive
   365                                  
   366                                  	; building closure for __bin-sub-rr
   367 0000030B 48BF-                   	mov rdi, free_var_31
   367 0000030D [F800000000000000] 
   368 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   368 00000317 [9B12000000000000] 
   369 0000031F E8D2080000              	call bind_primitive
   370                                  
   371                                  	; building closure for __bin-mul-rr
   372 00000324 48BF-                   	mov rdi, free_var_32
   372 00000326 [0001000000000000] 
   373 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   373 00000330 [DF12000000000000] 
   374 00000338 E8B9080000              	call bind_primitive
   375                                  
   376                                  	; building closure for __bin-div-rr
   377 0000033D 48BF-                   	mov rdi, free_var_33
   377 0000033F [0801000000000000] 
   378 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   378 00000349 [2313000000000000] 
   379 00000351 E8A0080000              	call bind_primitive
   380                                  
   381                                  	; building closure for __bin-add-qq
   382 00000356 48BF-                   	mov rdi, free_var_34
   382 00000358 [1001000000000000] 
   383 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   383 00000362 [7513000000000000] 
   384 0000036A E887080000              	call bind_primitive
   385                                  
   386                                  	; building closure for __bin-sub-qq
   387 0000036F 48BF-                   	mov rdi, free_var_35
   387 00000371 [1801000000000000] 
   388 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   388 0000037B [DD13000000000000] 
   389 00000383 E86E080000              	call bind_primitive
   390                                  
   391                                  	; building closure for __bin-mul-qq
   392 00000388 48BF-                   	mov rdi, free_var_36
   392 0000038A [2001000000000000] 
   393 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   393 00000394 [4514000000000000] 
   394 0000039C E855080000              	call bind_primitive
   395                                  
   396                                  	; building closure for __bin-div-qq
   397 000003A1 48BF-                   	mov rdi, free_var_37
   397 000003A3 [2801000000000000] 
   398 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   398 000003AD [9D14000000000000] 
   399 000003B5 E83C080000              	call bind_primitive
   400                                  
   401                                  	; building closure for error
   402 000003BA 48BF-                   	mov rdi, free_var_38
   402 000003BC [3001000000000000] 
   403 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   403 000003C6 [6B15000000000000] 
   404 000003CE E823080000              	call bind_primitive
   405                                  
   406                                  	; building closure for __bin-less-than-rr
   407 000003D3 48BF-                   	mov rdi, free_var_39
   407 000003D5 [3801000000000000] 
   408 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   408 000003DF [2216000000000000] 
   409 000003E7 E80A080000              	call bind_primitive
   410                                  
   411                                  	; building closure for __bin-less-than-qq
   412 000003EC 48BF-                   	mov rdi, free_var_40
   412 000003EE [4001000000000000] 
   413 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   413 000003F8 [7916000000000000] 
   414 00000400 E8F1070000              	call bind_primitive
   415                                  
   416                                  	; building closure for __bin-equal-rr
   417 00000405 48BF-                   	mov rdi, free_var_41
   417 00000407 [4801000000000000] 
   418 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   418 00000411 [DC16000000000000] 
   419 00000419 E8D8070000              	call bind_primitive
   420                                  
   421                                  	; building closure for __bin-equal-qq
   422 0000041E 48BF-                   	mov rdi, free_var_42
   422 00000420 [5001000000000000] 
   423 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   423 0000042A [3317000000000000] 
   424 00000432 E8BF070000              	call bind_primitive
   425                                  
   426                                  	; building closure for quotient
   427 00000437 48BF-                   	mov rdi, free_var_43
   427 00000439 [5801000000000000] 
   428 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   428 00000443 [9617000000000000] 
   429 0000044B E8A6070000              	call bind_primitive
   430                                  
   431                                  	; building closure for remainder
   432 00000450 48BF-                   	mov rdi, free_var_44
   432 00000452 [6001000000000000] 
   433 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   433 0000045C [FC17000000000000] 
   434 00000464 E88D070000              	call bind_primitive
   435                                  
   436                                  	; building closure for set-car!
   437 00000469 48BF-                   	mov rdi, free_var_45
   437 0000046B [6801000000000000] 
   438 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   438 00000475 [6218000000000000] 
   439 0000047D E874070000              	call bind_primitive
   440                                  
   441                                  	; building closure for set-cdr!
   442 00000482 48BF-                   	mov rdi, free_var_46
   442 00000484 [7001000000000000] 
   443 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   443 0000048E [9818000000000000] 
   444 00000496 E85B070000              	call bind_primitive
   445                                  
   446                                  	; building closure for string-ref
   447 0000049B 48BF-                   	mov rdi, free_var_47
   447 0000049D [7801000000000000] 
   448 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   448 000004A7 [CE18000000000000] 
   449 000004AF E842070000              	call bind_primitive
   450                                  
   451                                  	; building closure for vector-ref
   452 000004B4 48BF-                   	mov rdi, free_var_48
   452 000004B6 [8001000000000000] 
   453 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   453 000004C0 [3919000000000000] 
   454 000004C8 E829070000              	call bind_primitive
   455                                  
   456                                  	; building closure for vector-set!
   457 000004CD 48BF-                   	mov rdi, free_var_49
   457 000004CF [8801000000000000] 
   458 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   458 000004D9 [9519000000000000] 
   459 000004E1 E810070000              	call bind_primitive
   460                                  
   461                                  	; building closure for string-set!
   462 000004E6 48BF-                   	mov rdi, free_var_50
   462 000004E8 [9001000000000000] 
   463 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   463 000004F2 [FF19000000000000] 
   464 000004FA E8F7060000              	call bind_primitive
   465                                  
   466                                  	; building closure for make-vector
   467 000004FF 48BF-                   	mov rdi, free_var_51
   467 00000501 [9801000000000000] 
   468 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   468 0000050B [741A000000000000] 
   469 00000513 E8DE060000              	call bind_primitive
   470                                  
   471                                  	; building closure for make-string
   472 00000518 48BF-                   	mov rdi, free_var_52
   472 0000051A [A001000000000000] 
   473 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   473 00000524 [DE1A000000000000] 
   474 0000052C E8C5060000              	call bind_primitive
   475                                  
   476                                  	; building closure for numerator
   477 00000531 48BF-                   	mov rdi, free_var_53
   477 00000533 [A801000000000000] 
   478 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   478 0000053D [501B000000000000] 
   479 00000545 E8AC060000              	call bind_primitive
   480                                  
   481                                  	; building closure for denominator
   482 0000054A 48BF-                   	mov rdi, free_var_54
   482 0000054C [B001000000000000] 
   483 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   483 00000556 [7D1B000000000000] 
   484 0000055E E893060000              	call bind_primitive
   485                                  
   486                                  	; building closure for eq?
   487 00000563 48BF-                   	mov rdi, free_var_55
   487 00000565 [B801000000000000] 
   488 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   488 0000056F [AA1B000000000000] 
   489 00000577 E87A060000              	call bind_primitive
   490                                  
   491                                  	; code generated for ScmConst
   492 0000057C 48B8-                   	mov rax, L_constants + 25
   492 0000057E [1900000000000000] 
   493                                  
   494 00000586 4889C7                  	mov rdi, rax
   495 00000589 E8E8000000              	call print_sexpr_if_not_void
   496                                  
   497 0000058E 48BF-                           mov rdi, fmt_memory_usage
   497 00000590 [8900000000000000] 
   498 00000598 488B3425[10010000]              mov rsi, qword [top_of_memory]
   499 000005A0 4881EE[C0010000]                sub rsi, memory
   500 000005A7 B800000000                      mov rax, 0
   501                                  	ENTER
    33 000005AC C8000000            <1>  enter 0, 0
    34 000005B0 4883E4F0            <1>  and rsp, ~15
   502 000005B4 E8(00000000)                    call printf
   503                                  	LEAVE
    38 000005B9 C9                  <1>  leave
   504 000005BA C9                      	leave
   505 000005BB C3                      	ret
   506                                  
   507                                  L_error_non_closure:
   508 000005BC 488B3C25[00000000]              mov rdi, qword [stderr]
   509 000005C4 48BE-                           mov rsi, fmt_non_closure
   509 000005C6 [C000000000000000] 
   510 000005CE B800000000                      mov rax, 0
   511                                  	ENTER
    33 000005D3 C8000000            <1>  enter 0, 0
    34 000005D7 4883E4F0            <1>  and rsp, ~15
   512 000005DB E8(00000000)                    call fprintf
   513                                  	LEAVE
    38 000005E0 C9                  <1>  leave
   514 000005E1 48C7C0FEFFFFFF                  mov rax, -2
   515 000005E8 E8(00000000)                    call exit
   516                                  
   517                                  L_error_improper_list:
   518 000005ED 488B3C25[00000000]      	mov rdi, qword [stderr]
   519 000005F5 48BE-                   	mov rsi, fmt_error_improper_list
   519 000005F7 [E800000000000000] 
   520 000005FF B800000000              	mov rax, 0
   521                                  	ENTER
    33 00000604 C8000000            <1>  enter 0, 0
    34 00000608 4883E4F0            <1>  and rsp, ~15
   522 0000060C E8(00000000)            	call fprintf
   523                                  	LEAVE
    38 00000611 C9                  <1>  leave
   524 00000612 48C7C0F9FFFFFF          	mov rax, -7
   525 00000619 E8(00000000)            	call exit
   526                                  
   527                                  L_error_incorrect_arity_simple:
   528 0000061E 488B3C25[00000000]              mov rdi, qword [stderr]
   529 00000626 48BE-                           mov rsi, fmt_incorrect_arity_simple
   529 00000628 [2A00000000000000] 
   530 00000630 EB12                            jmp L_error_incorrect_arity_common
   531                                  L_error_incorrect_arity_opt:
   532 00000632 488B3C25[00000000]              mov rdi, qword [stderr]
   533 0000063A 48BE-                           mov rsi, fmt_incorrect_arity_opt
   533 0000063C [5500000000000000] 
   534                                  L_error_incorrect_arity_common:
   535 00000644 5A                              pop rdx
   536 00000645 59                              pop rcx
   537 00000646 B800000000                      mov rax, 0
   538                                  	ENTER
    33 0000064B C8000000            <1>  enter 0, 0
    34 0000064F 4883E4F0            <1>  and rsp, ~15
   539 00000653 E8(00000000)                    call fprintf
   540                                  	LEAVE
    38 00000658 C9                  <1>  leave
   541 00000659 48C7C0FAFFFFFF                  mov rax, -6
   542 00000660 E8(00000000)                    call exit
   543                                  
   544                                  section .data
   545                                  fmt_incorrect_arity_simple:
   546 0000002A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   546 00000033 74656420256C642061-
   546 0000003C 7267756D656E74732C-
   546 00000045 206275742067697665-
   546 0000004E 6E20256C640A00     
   547                                  fmt_incorrect_arity_opt:
   548 00000055 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   548 0000005E 746564206174206C65-
   548 00000067 61737420256C642061-
   548 00000070 7267756D656E74732C-
   548 00000079 206275742067697665-
   548 00000082 6E20256C640A00     
   549                                  fmt_memory_usage:
   550 00000089 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   550 00000092 6420256C6420627974-
   550 0000009B 6573206F662064796E-
   550 000000A4 616D6963616C6C792D-
   550 000000AD 616C6C6F6361746564-
   550 000000B6 206D656D6F72790A0A-
   550 000000BF 00                 
   551                                  fmt_non_closure:
   552 000000C0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   552 000000C9 7074696E6720746F20-
   552 000000D2 6170706C792061206E-
   552 000000DB 6F6E2D636C6F737572-
   552 000000E4 65210A00           
   553                                  fmt_error_improper_list:
   554 000000E8 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   554 000000F1 7267756D656E742069-
   554 000000FA 73206E6F7420612070-
   554 00000103 726F706572206C6973-
   554 0000010C 74210A00           
   555                                  
   556                                  section .bss
   557                                  memory:
   558 000001C0 <res 40000000h>         	resb gbytes(1)
   559                                  
   560                                  section .data
   561                                  top_of_memory:
   562 00000110 [C001000000000000]              dq memory
   563                                  
   564                                  section .text
   565                                  malloc:
   566 00000665 488B0425[10010000]              mov rax, qword [top_of_memory]
   567 0000066D 48013C25[10010000]              add qword [top_of_memory], rdi
   568 00000675 C3                              ret
   569                                          
   570                                  print_sexpr_if_not_void:
   571 00000676 4881FF[00000000]        	cmp rdi, sob_void
   572 0000067D 7501                    	jne print_sexpr
   573 0000067F C3                      	ret
   574                                  
   575                                  section .data
   576                                  fmt_void:
   577 00000118 233C766F69643E00        	db `#<void>\0`
   578                                  fmt_nil:
   579 00000120 282900                  	db `()\0`
   580                                  fmt_boolean_false:
   581 00000123 236600                  	db `#f\0`
   582                                  fmt_boolean_true:
   583 00000126 237400                  	db `#t\0`
   584                                  fmt_char_backslash:
   585 00000129 235C5C00                	db `#\\\\\0`
   586                                  fmt_char_dquote:
   587 0000012D 235C2200                	db `#\\"\0`
   588                                  fmt_char_simple:
   589 00000131 235C256300              	db `#\\%c\0`
   590                                  fmt_char_null:
   591 00000136 235C6E756C00            	db `#\\nul\0`
   592                                  fmt_char_bell:
   593 0000013C 235C62656C6C00          	db `#\\bell\0`
   594                                  fmt_char_backspace:
   595 00000143 235C6261636B737061-     	db `#\\backspace\0`
   595 0000014C 636500             
   596                                  fmt_char_tab:
   597 0000014F 235C74616200            	db `#\\tab\0`
   598                                  fmt_char_newline:
   599 00000155 235C6E65776C696E65-     	db `#\\newline\0`
   599 0000015E 00                 
   600                                  fmt_char_formfeed:
   601 0000015F 235C7061676500          	db `#\\page\0`
   602                                  fmt_char_return:
   603 00000166 235C72657475726E00      	db `#\\return\0`
   604                                  fmt_char_escape:
   605 0000016F 235C65736300            	db `#\\esc\0`
   606                                  fmt_char_space:
   607 00000175 235C737061636500        	db `#\\space\0`
   608                                  fmt_char_hex:
   609 0000017D 235C782530325800        	db `#\\x%02X\0`
   610                                  fmt_closure:
   611 00000185 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   611 0000018E 206174203078253038-
   611 00000197 5820656E763D307825-
   611 000001A0 30385820636F64653D-
   611 000001A9 3078253038583E00   
   612                                  fmt_lparen:
   613 000001B1 2800                    	db `(\0`
   614                                  fmt_dotted_pair:
   615 000001B3 202E2000                	db ` . \0`
   616                                  fmt_rparen:
   617 000001B7 2900                    	db `)\0`
   618                                  fmt_space:
   619 000001B9 2000                    	db ` \0`
   620                                  fmt_empty_vector:
   621 000001BB 23282900                	db `#()\0`
   622                                  fmt_vector:
   623 000001BF 232800                  	db `#(\0`
   624                                  fmt_real:
   625 000001C2 256600                  	db `%f\0`
   626                                  fmt_fraction:
   627 000001C5 256C642F256C6400        	db `%ld/%ld\0`
   628                                  fmt_zero:
   629 000001CD 3000                    	db `0\0`
   630                                  fmt_int:
   631 000001CF 256C6400                	db `%ld\0`
   632                                  fmt_unknown_sexpr_error:
   633 000001D3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   633 000001DC 6F723A20556E6B6E6F-
   633 000001E5 776E2074797065206F-
   633 000001EE 662073657870722028-
   633 000001F7 3078253032582920   
   634 000001FF 617420616464726573-     	db `at address 0x%08X\n\n\0`
   634 00000208 73203078253038580A-
   634 00000211 0A00               
   635                                  fmt_dquote:
   636 00000213 2200                    	db `\"\0`
   637                                  fmt_string_char:
   638 00000215 256300                          db `%c\0`
   639                                  fmt_string_char_7:
   640 00000218 5C6100                          db `\\a\0`
   641                                  fmt_string_char_8:
   642 0000021B 5C6200                          db `\\b\0`
   643                                  fmt_string_char_9:
   644 0000021E 5C7400                          db `\\t\0`
   645                                  fmt_string_char_10:
   646 00000221 5C6E00                          db `\\n\0`
   647                                  fmt_string_char_11:
   648 00000224 5C7600                          db `\\v\0`
   649                                  fmt_string_char_12:
   650 00000227 5C6600                          db `\\f\0`
   651                                  fmt_string_char_13:
   652 0000022A 5C7200                          db `\\r\0`
   653                                  fmt_string_char_34:
   654 0000022D 5C2200                          db `\\"\0`
   655                                  fmt_string_char_92:
   656 00000230 5C5C00                          db `\\\\\0`
   657                                  fmt_string_char_hex:
   658 00000233 5C7825583B00                    db `\\x%X;\0`
   659                                  
   660                                  section .text
   661                                  
   662                                  print_sexpr:
   663                                  	ENTER
    33 00000680 C8000000            <1>  enter 0, 0
    34 00000684 4883E4F0            <1>  and rsp, ~15
   664 00000688 8A07                    	mov al, byte [rdi]
   665 0000068A 3C00                    	cmp al, T_void
   666 0000068C 744D                    	je .Lvoid
   667 0000068E 3C01                    	cmp al, T_nil
   668 00000690 7458                    	je .Lnil
   669 00000692 3C09                    	cmp al, T_boolean_false
   670 00000694 7463                    	je .Lboolean_false
   671 00000696 3C0A                    	cmp al, T_boolean_true
   672 00000698 746E                    	je .Lboolean_true
   673 0000069A 3C02                    	cmp al, T_char
   674 0000069C 7479                    	je .Lchar
   675 0000069E 3C04                    	cmp al, T_symbol
   676 000006A0 0F84BB010000            	je .Lsymbol
   677 000006A6 3C21                    	cmp al, T_pair
   678 000006A8 0F84D6010000            	je .Lpair
   679 000006AE 3C22                    	cmp al, T_vector
   680 000006B0 0F849F020000            	je .Lvector
   681 000006B6 3C05                    	cmp al, T_closure
   682 000006B8 0F8489010000            	je .Lclosure
   683 000006BE 3C12                    	cmp al, T_real
   684 000006C0 0F8430030000            	je .Lreal
   685 000006C6 3C11                    	cmp al, T_rational
   686 000006C8 0F8456030000            	je .Lrational
   687 000006CE 3C03                    	cmp al, T_string
   688 000006D0 0F848F030000            	je .Lstring
   689                                  
   690 000006D6 E9C7040000              	jmp .Lunknown_sexpr_type
   691                                  
   692                                  .Lvoid:
   693 000006DB 48BF-                   	mov rdi, fmt_void
   693 000006DD [1801000000000000] 
   694 000006E5 E9F5040000              	jmp .Lemit
   695                                  
   696                                  .Lnil:
   697 000006EA 48BF-                   	mov rdi, fmt_nil
   697 000006EC [2001000000000000] 
   698 000006F4 E9E6040000              	jmp .Lemit
   699                                  
   700                                  .Lboolean_false:
   701 000006F9 48BF-                   	mov rdi, fmt_boolean_false
   701 000006FB [2301000000000000] 
   702 00000703 E9D7040000              	jmp .Lemit
   703                                  
   704                                  .Lboolean_true:
   705 00000708 48BF-                   	mov rdi, fmt_boolean_true
   705 0000070A [2601000000000000] 
   706 00000712 E9C8040000              	jmp .Lemit
   707                                  
   708                                  .Lchar:
   709 00000717 8A4701                  	mov al, byte [rdi + 1]
   710 0000071A 3C20                    	cmp al, ' '
   711 0000071C 7E28                    	jle .Lchar_whitespace
   712 0000071E 3C5C                    	cmp al, 92 		; backslash
   713 00000720 0F847C000000            	je .Lchar_backslash
   714 00000726 3C22                    	cmp al, '"'
   715 00000728 0F8483000000            	je .Lchar_dquote
   716 0000072E 4825FF000000            	and rax, 255
   717 00000734 48BF-                   	mov rdi, fmt_char_simple
   717 00000736 [3101000000000000] 
   718 0000073E 4889C6                  	mov rsi, rax
   719 00000741 E999040000              	jmp .Lemit
   720                                  
   721                                  .Lchar_whitespace:
   722 00000746 3C00                    	cmp al, 0
   723 00000748 7476                    	je .Lchar_null
   724 0000074A 3C07                    	cmp al, 7
   725 0000074C 0F847D000000            	je .Lchar_bell
   726 00000752 3C08                    	cmp al, 8
   727 00000754 0F8484000000            	je .Lchar_backspace
   728 0000075A 3C09                    	cmp al, 9
   729 0000075C 0F848B000000            	je .Lchar_tab
   730 00000762 3C0A                    	cmp al, 10
   731 00000764 0F8492000000            	je .Lchar_newline
   732 0000076A 3C0C                    	cmp al, 12
   733 0000076C 0F8499000000            	je .Lchar_formfeed
   734 00000772 3C0D                    	cmp al, 13
   735 00000774 0F84A0000000            	je .Lchar_return
   736 0000077A 3C1B                    	cmp al, 27
   737 0000077C 0F84A7000000            	je .Lchar_escape
   738 00000782 4825FF000000            	and rax, 255
   739 00000788 3C20                    	cmp al, ' '
   740 0000078A 0F84A8000000            	je .Lchar_space
   741 00000790 48BF-                   	mov rdi, fmt_char_hex
   741 00000792 [7D01000000000000] 
   742 0000079A 4889C6                  	mov rsi, rax
   743 0000079D E93D040000              	jmp .Lemit	
   744                                  
   745                                  .Lchar_backslash:
   746 000007A2 48BF-                   	mov rdi, fmt_char_backslash
   746 000007A4 [2901000000000000] 
   747 000007AC E92E040000              	jmp .Lemit
   748                                  
   749                                  .Lchar_dquote:
   750 000007B1 48BF-                   	mov rdi, fmt_char_dquote
   750 000007B3 [2D01000000000000] 
   751 000007BB E91F040000              	jmp .Lemit
   752                                  
   753                                  .Lchar_null:
   754 000007C0 48BF-                   	mov rdi, fmt_char_null
   754 000007C2 [3601000000000000] 
   755 000007CA E910040000              	jmp .Lemit
   756                                  
   757                                  .Lchar_bell:
   758 000007CF 48BF-                   	mov rdi, fmt_char_bell
   758 000007D1 [3C01000000000000] 
   759 000007D9 E901040000              	jmp .Lemit
   760                                  
   761                                  .Lchar_backspace:
   762 000007DE 48BF-                   	mov rdi, fmt_char_backspace
   762 000007E0 [4301000000000000] 
   763 000007E8 E9F2030000              	jmp .Lemit
   764                                  
   765                                  .Lchar_tab:
   766 000007ED 48BF-                   	mov rdi, fmt_char_tab
   766 000007EF [4F01000000000000] 
   767 000007F7 E9E3030000              	jmp .Lemit
   768                                  
   769                                  .Lchar_newline:
   770 000007FC 48BF-                   	mov rdi, fmt_char_newline
   770 000007FE [5501000000000000] 
   771 00000806 E9D4030000              	jmp .Lemit
   772                                  
   773                                  .Lchar_formfeed:
   774 0000080B 48BF-                   	mov rdi, fmt_char_formfeed
   774 0000080D [5F01000000000000] 
   775 00000815 E9C5030000              	jmp .Lemit
   776                                  
   777                                  .Lchar_return:
   778 0000081A 48BF-                   	mov rdi, fmt_char_return
   778 0000081C [6601000000000000] 
   779 00000824 E9B6030000              	jmp .Lemit
   780                                  
   781                                  .Lchar_escape:
   782 00000829 48BF-                   	mov rdi, fmt_char_escape
   782 0000082B [6F01000000000000] 
   783 00000833 E9A7030000              	jmp .Lemit
   784                                  
   785                                  .Lchar_space:
   786 00000838 48BF-                   	mov rdi, fmt_char_space
   786 0000083A [7501000000000000] 
   787 00000842 E998030000              	jmp .Lemit
   788                                  
   789                                  .Lclosure:
   790 00000847 4889FE                  	mov rsi, qword rdi
   791 0000084A 48BF-                   	mov rdi, fmt_closure
   791 0000084C [8501000000000000] 
   792 00000854 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   793 00000858 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   794 0000085C E97E030000              	jmp .Lemit
   795                                  
   796                                  .Lsymbol:
   797 00000861 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   798 00000865 BE01000000              	mov rsi, 1		 ; size = 1 byte
   799 0000086A 488B5701                	mov rdx, qword [rdi + 1] ; length
   800 0000086E 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   801 00000872 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   802 0000087A E8(00000000)            	call fwrite
   803 0000087F E970030000              	jmp .Lend
   804                                  	
   805                                  .Lpair:
   806 00000884 57                      	push rdi
   807 00000885 48BF-                   	mov rdi, fmt_lparen
   807 00000887 [B101000000000000] 
   808 0000088F B800000000              	mov rax, 0
   809                                          ENTER
    33 00000894 C8000000            <1>  enter 0, 0
    34 00000898 4883E4F0            <1>  and rsp, ~15
   810 0000089C E8(00000000)            	call printf
   811                                          LEAVE
    38 000008A1 C9                  <1>  leave
   812 000008A2 488B3C24                	mov rdi, qword [rsp] 	; pair
   813 000008A6 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   814 000008AA E8D1FDFFFF              	call print_sexpr
   815 000008AF 5F                      	pop rdi 		; pair
   816 000008B0 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   817                                  .Lcdr:
   818 000008B4 8A07                    	mov al, byte [rdi]
   819 000008B6 3C01                    	cmp al, T_nil
   820 000008B8 7447                    	je .Lcdr_nil
   821 000008BA 3C21                    	cmp al, T_pair
   822 000008BC 7462                    	je .Lcdr_pair
   823 000008BE 57                      	push rdi
   824 000008BF 48BF-                   	mov rdi, fmt_dotted_pair
   824 000008C1 [B301000000000000] 
   825 000008C9 B800000000              	mov rax, 0
   826                                  	ENTER
    33 000008CE C8000000            <1>  enter 0, 0
    34 000008D2 4883E4F0            <1>  and rsp, ~15
   827 000008D6 E8(00000000)            	call printf
   828                                  	LEAVE
    38 000008DB C9                  <1>  leave
   829 000008DC 5F                      	pop rdi
   830 000008DD E89EFDFFFF              	call print_sexpr
   831 000008E2 48BF-                   	mov rdi, fmt_rparen
   831 000008E4 [B701000000000000] 
   832 000008EC B800000000              	mov rax, 0
   833                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   834 000008F9 E8(00000000)            	call printf
   835                                  	LEAVE
    38 000008FE C9                  <1>  leave
   836                                  	LEAVE
    38 000008FF C9                  <1>  leave
   837 00000900 C3                      	ret
   838                                  
   839                                  .Lcdr_nil:
   840 00000901 48BF-                   	mov rdi, fmt_rparen
   840 00000903 [B701000000000000] 
   841 0000090B B800000000              	mov rax, 0
   842                                  	ENTER
    33 00000910 C8000000            <1>  enter 0, 0
    34 00000914 4883E4F0            <1>  and rsp, ~15
   843 00000918 E8(00000000)            	call printf
   844                                  	LEAVE
    38 0000091D C9                  <1>  leave
   845                                  	LEAVE
    38 0000091E C9                  <1>  leave
   846 0000091F C3                      	ret
   847                                  
   848                                  .Lcdr_pair:
   849 00000920 57                      	push rdi
   850 00000921 48BF-                   	mov rdi, fmt_space
   850 00000923 [B901000000000000] 
   851 0000092B B800000000              	mov rax, 0
   852                                  	ENTER
    33 00000930 C8000000            <1>  enter 0, 0
    34 00000934 4883E4F0            <1>  and rsp, ~15
   853 00000938 E8(00000000)            	call printf
   854                                  	LEAVE
    38 0000093D C9                  <1>  leave
   855 0000093E 488B3C24                	mov rdi, qword [rsp]
   856 00000942 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   857 00000946 E835FDFFFF              	call print_sexpr
   858 0000094B 5F                      	pop rdi
   859 0000094C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   860 00000950 E95FFFFFFF              	jmp .Lcdr
   861                                  
   862                                  .Lvector:
   863 00000955 488B4701                	mov rax, qword [rdi + 1] ; length
   864 00000959 4883F800                	cmp rax, 0
   865 0000095D 0F8484000000            	je .Lvector_empty
   866 00000963 57                      	push rdi
   867 00000964 48BF-                   	mov rdi, fmt_vector
   867 00000966 [BF01000000000000] 
   868 0000096E B800000000              	mov rax, 0
   869                                  	ENTER
    33 00000973 C8000000            <1>  enter 0, 0
    34 00000977 4883E4F0            <1>  and rsp, ~15
   870 0000097B E8(00000000)            	call printf
   871                                  	LEAVE
    38 00000980 C9                  <1>  leave
   872 00000981 488B3C24                	mov rdi, qword [rsp]
   873 00000985 FF7701                  	push qword [rdi + 1]
   874 00000988 6A01                    	push 1
   875 0000098A 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   876 0000098E E8EDFCFFFF              	call print_sexpr
   877                                  .Lvector_loop:
   878                                  	; [rsp] index
   879                                  	; [rsp + 8*1] limit
   880                                  	; [rsp + 8*2] vector
   881 00000993 488B0424                	mov rax, qword [rsp]
   882 00000997 483B442408              	cmp rax, qword [rsp + 8*1]
   883 0000099C 7436                    	je .Lvector_end
   884 0000099E 48BF-                   	mov rdi, fmt_space
   884 000009A0 [B901000000000000] 
   885 000009A8 B800000000              	mov rax, 0
   886                                  	ENTER
    33 000009AD C8000000            <1>  enter 0, 0
    34 000009B1 4883E4F0            <1>  and rsp, ~15
   887 000009B5 E8(00000000)            	call printf
   888                                  	LEAVE
    38 000009BA C9                  <1>  leave
   889 000009BB 488B0424                	mov rax, qword [rsp]
   890 000009BF 488B5C2410              	mov rbx, qword [rsp + 8*2]
   891 000009C4 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   892 000009C9 E8B2FCFFFF              	call print_sexpr
   893 000009CE 48FF0424                	inc qword [rsp]
   894 000009D2 EBBF                    	jmp .Lvector_loop
   895                                  
   896                                  .Lvector_end:
   897 000009D4 4883C418                	add rsp, 8*3
   898 000009D8 48BF-                   	mov rdi, fmt_rparen
   898 000009DA [B701000000000000] 
   899 000009E2 E9F8010000              	jmp .Lemit	
   900                                  
   901                                  .Lvector_empty:
   902 000009E7 48BF-                   	mov rdi, fmt_empty_vector
   902 000009E9 [BB01000000000000] 
   903 000009F1 E9E9010000              	jmp .Lemit
   904                                  
   905                                  .Lreal:
   906 000009F6 FF7701                  	push qword [rdi + 1]
   907 000009F9 F20F100424              	movsd xmm0, qword [rsp]
   908 000009FE 4883C408                	add rsp, 8*1
   909 00000A02 48BF-                   	mov rdi, fmt_real
   909 00000A04 [C201000000000000] 
   910 00000A0C B801000000              	mov rax, 1
   911                                  	ENTER
    33 00000A11 C8000000            <1>  enter 0, 0
    34 00000A15 4883E4F0            <1>  and rsp, ~15
   912 00000A19 E8(00000000)            	call printf
   913                                  	LEAVE
    38 00000A1E C9                  <1>  leave
   914 00000A1F E9D0010000              	jmp .Lend
   915                                  
   916                                  .Lrational:
   917 00000A24 488B7701                	mov rsi, qword [rdi + 1]
   918 00000A28 488B5709                	mov rdx, qword [rdi + 1 + 8]
   919 00000A2C 4883FE00                	cmp rsi, 0
   920 00000A30 7415                    	je .Lrat_zero
   921 00000A32 4883FA01                	cmp rdx, 1
   922 00000A36 741E                    	je .Lrat_int
   923 00000A38 48BF-                   	mov rdi, fmt_fraction
   923 00000A3A [C501000000000000] 
   924 00000A42 E998010000              	jmp .Lemit
   925                                  
   926                                  .Lrat_zero:
   927 00000A47 48BF-                   	mov rdi, fmt_zero
   927 00000A49 [CD01000000000000] 
   928 00000A51 E989010000              	jmp .Lemit
   929                                  
   930                                  .Lrat_int:
   931 00000A56 48BF-                   	mov rdi, fmt_int
   931 00000A58 [CF01000000000000] 
   932 00000A60 E97A010000              	jmp .Lemit
   933                                  
   934                                  .Lstring:
   935 00000A65 488D4709                	lea rax, [rdi + 1 + 8]
   936 00000A69 50                      	push rax
   937 00000A6A FF7701                  	push qword [rdi + 1]
   938 00000A6D 48BF-                   	mov rdi, fmt_dquote
   938 00000A6F [1302000000000000] 
   939 00000A77 B800000000              	mov rax, 0
   940                                  	ENTER
    33 00000A7C C8000000            <1>  enter 0, 0
    34 00000A80 4883E4F0            <1>  and rsp, ~15
   941 00000A84 E8(00000000)            	call printf
   942                                  	LEAVE
    38 00000A89 C9                  <1>  leave
   943                                  .Lstring_loop:
   944                                  	; qword [rsp]: limit
   945                                  	; qword [rsp + 8*1]: char *
   946 00000A8A 48833C2400              	cmp qword [rsp], 0
   947 00000A8F 0F84FD000000            	je .Lstring_end
   948 00000A95 488B442408              	mov rax, qword [rsp + 8*1]
   949 00000A9A 8A00                    	mov al, byte [rax]
   950 00000A9C 4825FF000000            	and rax, 255
   951 00000AA2 3C07                    	cmp al, 7
   952 00000AA4 7468                            je .Lstring_char_7
   953 00000AA6 3C08                            cmp al, 8
   954 00000AA8 7470                            je .Lstring_char_8
   955 00000AAA 3C09                            cmp al, 9
   956 00000AAC 7478                            je .Lstring_char_9
   957 00000AAE 3C0A                            cmp al, 10
   958 00000AB0 0F847C000000                    je .Lstring_char_10
   959 00000AB6 3C0B                            cmp al, 11
   960 00000AB8 0F8480000000                    je .Lstring_char_11
   961 00000ABE 3C0C                            cmp al, 12
   962 00000AC0 0F8484000000                    je .Lstring_char_12
   963 00000AC6 3C0D                            cmp al, 13
   964 00000AC8 0F8488000000                    je .Lstring_char_13
   965 00000ACE 3C22                            cmp al, 34
   966 00000AD0 0F848C000000                    je .Lstring_char_34
   967 00000AD6 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   969 00000AD8 3C20                            cmp al, ' '
   970 00000ADA 0F8CA0000000                    jl .Lstring_char_hex
   971 00000AE0 48BF-                           mov rdi, fmt_string_char
   971 00000AE2 [1502000000000000] 
   972 00000AEA 4889C6                          mov rsi, rax
   973                                  .Lstring_char_emit:
   974 00000AED B800000000                      mov rax, 0
   975                                          ENTER
    33 00000AF2 C8000000            <1>  enter 0, 0
    34 00000AF6 4883E4F0            <1>  and rsp, ~15
   976 00000AFA E8(00000000)                    call printf
   977                                          LEAVE
    38 00000AFF C9                  <1>  leave
   978 00000B00 48FF0C24                        dec qword [rsp]
   979 00000B04 48FF442408                      inc qword [rsp + 8*1]
   980 00000B09 E97CFFFFFF                      jmp .Lstring_loop
   981                                  
   982                                  .Lstring_char_7:
   983 00000B0E 48BF-                           mov rdi, fmt_string_char_7
   983 00000B10 [1802000000000000] 
   984 00000B18 EBD3                            jmp .Lstring_char_emit
   985                                  
   986                                  .Lstring_char_8:
   987 00000B1A 48BF-                           mov rdi, fmt_string_char_8
   987 00000B1C [1B02000000000000] 
   988 00000B24 EBC7                            jmp .Lstring_char_emit
   989                                          
   990                                  .Lstring_char_9:
   991 00000B26 48BF-                           mov rdi, fmt_string_char_9
   991 00000B28 [1E02000000000000] 
   992 00000B30 EBBB                            jmp .Lstring_char_emit
   993                                  
   994                                  .Lstring_char_10:
   995 00000B32 48BF-                           mov rdi, fmt_string_char_10
   995 00000B34 [2102000000000000] 
   996 00000B3C EBAF                            jmp .Lstring_char_emit
   997                                  
   998                                  .Lstring_char_11:
   999 00000B3E 48BF-                           mov rdi, fmt_string_char_11
   999 00000B40 [2402000000000000] 
  1000 00000B48 EBA3                            jmp .Lstring_char_emit
  1001                                  
  1002                                  .Lstring_char_12:
  1003 00000B4A 48BF-                           mov rdi, fmt_string_char_12
  1003 00000B4C [2702000000000000] 
  1004 00000B54 EB97                            jmp .Lstring_char_emit
  1005                                  
  1006                                  .Lstring_char_13:
  1007 00000B56 48BF-                           mov rdi, fmt_string_char_13
  1007 00000B58 [2A02000000000000] 
  1008 00000B60 EB8B                            jmp .Lstring_char_emit
  1009                                  
  1010                                  .Lstring_char_34:
  1011 00000B62 48BF-                           mov rdi, fmt_string_char_34
  1011 00000B64 [2D02000000000000] 
  1012 00000B6C E97CFFFFFF                      jmp .Lstring_char_emit
  1013                                  
  1014                                  .Lstring_char_92:
  1015 00000B71 48BF-                           mov rdi, fmt_string_char_92
  1015 00000B73 [3002000000000000] 
  1016 00000B7B E96DFFFFFF                      jmp .Lstring_char_emit
  1017                                  
  1018                                  .Lstring_char_hex:
  1019 00000B80 48BF-                           mov rdi, fmt_string_char_hex
  1019 00000B82 [3302000000000000] 
  1020 00000B8A 4889C6                          mov rsi, rax
  1021 00000B8D E95BFFFFFF                      jmp .Lstring_char_emit        
  1022                                  
  1023                                  .Lstring_end:
  1024 00000B92 4883C410                	add rsp, 8 * 2
  1025 00000B96 48BF-                   	mov rdi, fmt_dquote
  1025 00000B98 [1302000000000000] 
  1026 00000BA0 EB3D                    	jmp .Lemit
  1027                                  
  1028                                  .Lunknown_sexpr_type:
  1029 00000BA2 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1029 00000BA4 [D301000000000000] 
  1030 00000BAC 4825FF000000            	and rax, 255
  1031 00000BB2 4889C2                  	mov rdx, rax
  1032 00000BB5 4889F9                  	mov rcx, rdi
  1033 00000BB8 488B3C25[00000000]      	mov rdi, qword [stderr]
  1034 00000BC0 B800000000              	mov rax, 0
  1035                                  	ENTER
    33 00000BC5 C8000000            <1>  enter 0, 0
    34 00000BC9 4883E4F0            <1>  and rsp, ~15
  1036 00000BCD E8(00000000)            	call fprintf
  1037                                  	LEAVE
    38 00000BD2 C9                  <1>  leave
  1038 00000BD3 48C7C0FFFFFFFF          	mov rax, -1
  1039 00000BDA E8(00000000)            	call exit
  1040                                  
  1041                                  .Lemit:
  1042 00000BDF B800000000              	mov rax, 0
  1043                                  	ENTER
    33 00000BE4 C8000000            <1>  enter 0, 0
    34 00000BE8 4883E4F0            <1>  and rsp, ~15
  1044 00000BEC E8(00000000)            	call printf
  1045                                  	LEAVE
    38 00000BF1 C9                  <1>  leave
  1046 00000BF2 EB00                    	jmp .Lend
  1047                                  
  1048                                  .Lend:
  1049                                  	LEAVE
    38 00000BF4 C9                  <1>  leave
  1050 00000BF5 C3                      	ret
  1051                                  
  1052                                  ;;; rdi: address of free variable
  1053                                  ;;; rsi: address of code-pointer
  1054                                  bind_primitive:
  1055                                          ENTER
    33 00000BF6 C8000000            <1>  enter 0, 0
    34 00000BFA 4883E4F0            <1>  and rsp, ~15
  1056 00000BFE 57                              push rdi
  1057 00000BFF BF11000000                      mov rdi, (1 + 8 + 8)
  1058 00000C04 E85CFAFFFF                      call malloc
  1059 00000C09 5F                              pop rdi
  1060 00000C0A C60005                          mov byte [rax], T_closure
  1061 00000C0D 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1062 00000C15 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1063 00000C19 488907                          mov qword [rdi], rax
  1064                                          LEAVE
    38 00000C1C C9                  <1>  leave
  1065 00000C1D C3                              ret
  1066                                  
  1067                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1068                                  L_code_ptr_bin_apply:
  1069                                  	
  1070                                  L_code_ptr_is_null:
  1071                                          ENTER
    33 00000C1E C8000000            <1>  enter 0, 0
    34 00000C22 4883E4F0            <1>  and rsp, ~15
  1072 00000C26 48837D1801                      cmp COUNT, 1
  1073 00000C2B 0F85A5100000                    jne L_error_arg_count_1
  1074 00000C31 488B4520                        mov rax, PARAM(0)
  1075 00000C35 803801                          cmp byte [rax], T_nil
  1076 00000C38 750C                            jne .L_false
  1077 00000C3A 48B8-                           mov rax, sob_boolean_true
  1077 00000C3C [0300000000000000] 
  1078 00000C44 EB0A                            jmp .L_end
  1079                                  .L_false:
  1080 00000C46 48B8-                           mov rax, sob_boolean_false
  1080 00000C48 [0200000000000000] 
  1081                                  .L_end:
  1082                                          LEAVE
    38 00000C50 C9                  <1>  leave
  1083 00000C51 C21800                          ret AND_KILL_FRAME(1)
  1084                                  
  1085                                  L_code_ptr_is_pair:
  1086                                          ENTER
    33 00000C54 C8000000            <1>  enter 0, 0
    34 00000C58 4883E4F0            <1>  and rsp, ~15
  1087 00000C5C 48837D1801                      cmp COUNT, 1
  1088 00000C61 0F856F100000                    jne L_error_arg_count_1
  1089 00000C67 488B4520                        mov rax, PARAM(0)
  1090 00000C6B 803821                          cmp byte [rax], T_pair
  1091 00000C6E 750C                            jne .L_false
  1092 00000C70 48B8-                           mov rax, sob_boolean_true
  1092 00000C72 [0300000000000000] 
  1093 00000C7A EB0A                            jmp .L_end
  1094                                  .L_false:
  1095 00000C7C 48B8-                           mov rax, sob_boolean_false
  1095 00000C7E [0200000000000000] 
  1096                                  .L_end:
  1097                                          LEAVE
    38 00000C86 C9                  <1>  leave
  1098 00000C87 C21800                          ret AND_KILL_FRAME(1)
  1099                                          
  1100                                  L_code_ptr_is_void:
  1101                                          ENTER
    33 00000C8A C8000000            <1>  enter 0, 0
    34 00000C8E 4883E4F0            <1>  and rsp, ~15
  1102 00000C92 48837D1801                      cmp COUNT, 1
  1103 00000C97 0F8539100000                    jne L_error_arg_count_1
  1104 00000C9D 488B4520                        mov rax, PARAM(0)
  1105 00000CA1 803800                          cmp byte [rax], T_void
  1106 00000CA4 750C                            jne .L_false
  1107 00000CA6 48B8-                           mov rax, sob_boolean_true
  1107 00000CA8 [0300000000000000] 
  1108 00000CB0 EB0A                            jmp .L_end
  1109                                  .L_false:
  1110 00000CB2 48B8-                           mov rax, sob_boolean_false
  1110 00000CB4 [0200000000000000] 
  1111                                  .L_end:
  1112                                          LEAVE
    38 00000CBC C9                  <1>  leave
  1113 00000CBD C21800                          ret AND_KILL_FRAME(1)
  1114                                  
  1115                                  L_code_ptr_is_char:
  1116                                          ENTER
    33 00000CC0 C8000000            <1>  enter 0, 0
    34 00000CC4 4883E4F0            <1>  and rsp, ~15
  1117 00000CC8 48837D1801                      cmp COUNT, 1
  1118 00000CCD 0F8503100000                    jne L_error_arg_count_1
  1119 00000CD3 488B4520                        mov rax, PARAM(0)
  1120 00000CD7 803802                          cmp byte [rax], T_char
  1121 00000CDA 750C                            jne .L_false
  1122 00000CDC 48B8-                           mov rax, sob_boolean_true
  1122 00000CDE [0300000000000000] 
  1123 00000CE6 EB0A                            jmp .L_end
  1124                                  .L_false:
  1125 00000CE8 48B8-                           mov rax, sob_boolean_false
  1125 00000CEA [0200000000000000] 
  1126                                  .L_end:
  1127                                          LEAVE
    38 00000CF2 C9                  <1>  leave
  1128 00000CF3 C21800                          ret AND_KILL_FRAME(1)
  1129                                  
  1130                                  L_code_ptr_is_string:
  1131                                          ENTER
    33 00000CF6 C8000000            <1>  enter 0, 0
    34 00000CFA 4883E4F0            <1>  and rsp, ~15
  1132 00000CFE 48837D1801                      cmp COUNT, 1
  1133 00000D03 0F85CD0F0000                    jne L_error_arg_count_1
  1134 00000D09 488B4520                        mov rax, PARAM(0)
  1135 00000D0D 803803                          cmp byte [rax], T_string
  1136 00000D10 750C                            jne .L_false
  1137 00000D12 48B8-                           mov rax, sob_boolean_true
  1137 00000D14 [0300000000000000] 
  1138 00000D1C EB0A                            jmp .L_end
  1139                                  .L_false:
  1140 00000D1E 48B8-                           mov rax, sob_boolean_false
  1140 00000D20 [0200000000000000] 
  1141                                  .L_end:
  1142                                          LEAVE
    38 00000D28 C9                  <1>  leave
  1143 00000D29 C21800                          ret AND_KILL_FRAME(1)
  1144                                  
  1145                                  L_code_ptr_is_symbol:
  1146                                          ENTER
    33 00000D2C C8000000            <1>  enter 0, 0
    34 00000D30 4883E4F0            <1>  and rsp, ~15
  1147 00000D34 48837D1801                      cmp COUNT, 1
  1148 00000D39 0F85970F0000                    jne L_error_arg_count_1
  1149 00000D3F 488B4520                        mov rax, PARAM(0)
  1150 00000D43 803804                          cmp byte [rax], T_symbol
  1151 00000D46 750C                            jne .L_false
  1152 00000D48 48B8-                           mov rax, sob_boolean_true
  1152 00000D4A [0300000000000000] 
  1153 00000D52 EB0A                            jmp .L_end
  1154                                  .L_false:
  1155 00000D54 48B8-                           mov rax, sob_boolean_false
  1155 00000D56 [0200000000000000] 
  1156                                  .L_end:
  1157                                          LEAVE
    38 00000D5E C9                  <1>  leave
  1158 00000D5F C21800                          ret AND_KILL_FRAME(1)
  1159                                  
  1160                                  L_code_ptr_is_vector:
  1161                                          ENTER
    33 00000D62 C8000000            <1>  enter 0, 0
    34 00000D66 4883E4F0            <1>  and rsp, ~15
  1162 00000D6A 48837D1801                      cmp COUNT, 1
  1163 00000D6F 0F85610F0000                    jne L_error_arg_count_1
  1164 00000D75 488B4520                        mov rax, PARAM(0)
  1165 00000D79 803822                          cmp byte [rax], T_vector
  1166 00000D7C 750C                            jne .L_false
  1167 00000D7E 48B8-                           mov rax, sob_boolean_true
  1167 00000D80 [0300000000000000] 
  1168 00000D88 EB0A                            jmp .L_end
  1169                                  .L_false:
  1170 00000D8A 48B8-                           mov rax, sob_boolean_false
  1170 00000D8C [0200000000000000] 
  1171                                  .L_end:
  1172                                          LEAVE
    38 00000D94 C9                  <1>  leave
  1173 00000D95 C21800                          ret AND_KILL_FRAME(1)
  1174                                  
  1175                                  L_code_ptr_is_closure:
  1176                                          ENTER
    33 00000D98 C8000000            <1>  enter 0, 0
    34 00000D9C 4883E4F0            <1>  and rsp, ~15
  1177 00000DA0 48837D1801                      cmp COUNT, 1
  1178 00000DA5 0F852B0F0000                    jne L_error_arg_count_1
  1179 00000DAB 488B4520                        mov rax, PARAM(0)
  1180 00000DAF 803805                          cmp byte [rax], T_closure
  1181 00000DB2 750C                            jne .L_false
  1182 00000DB4 48B8-                           mov rax, sob_boolean_true
  1182 00000DB6 [0300000000000000] 
  1183 00000DBE EB0A                            jmp .L_end
  1184                                  .L_false:
  1185 00000DC0 48B8-                           mov rax, sob_boolean_false
  1185 00000DC2 [0200000000000000] 
  1186                                  .L_end:
  1187                                          LEAVE
    38 00000DCA C9                  <1>  leave
  1188 00000DCB C21800                          ret AND_KILL_FRAME(1)
  1189                                  
  1190                                  L_code_ptr_is_real:
  1191                                          ENTER
    33 00000DCE C8000000            <1>  enter 0, 0
    34 00000DD2 4883E4F0            <1>  and rsp, ~15
  1192 00000DD6 48837D1801                      cmp COUNT, 1
  1193 00000DDB 0F85F50E0000                    jne L_error_arg_count_1
  1194 00000DE1 488B4520                        mov rax, PARAM(0)
  1195 00000DE5 803812                          cmp byte [rax], T_real
  1196 00000DE8 750C                            jne .L_false
  1197 00000DEA 48B8-                           mov rax, sob_boolean_true
  1197 00000DEC [0300000000000000] 
  1198 00000DF4 EB0A                            jmp .L_end
  1199                                  .L_false:
  1200 00000DF6 48B8-                           mov rax, sob_boolean_false
  1200 00000DF8 [0200000000000000] 
  1201                                  .L_end:
  1202                                          LEAVE
    38 00000E00 C9                  <1>  leave
  1203 00000E01 C21800                          ret AND_KILL_FRAME(1)
  1204                                  
  1205                                  L_code_ptr_is_rational:
  1206                                          ENTER
    33 00000E04 C8000000            <1>  enter 0, 0
    34 00000E08 4883E4F0            <1>  and rsp, ~15
  1207 00000E0C 48837D1801                      cmp COUNT, 1
  1208 00000E11 0F85BF0E0000                    jne L_error_arg_count_1
  1209 00000E17 488B4520                        mov rax, PARAM(0)
  1210 00000E1B 803811                          cmp byte [rax], T_rational
  1211 00000E1E 750C                            jne .L_false
  1212 00000E20 48B8-                           mov rax, sob_boolean_true
  1212 00000E22 [0300000000000000] 
  1213 00000E2A EB0A                            jmp .L_end
  1214                                  .L_false:
  1215 00000E2C 48B8-                           mov rax, sob_boolean_false
  1215 00000E2E [0200000000000000] 
  1216                                  .L_end:
  1217                                          LEAVE
    38 00000E36 C9                  <1>  leave
  1218 00000E37 C21800                          ret AND_KILL_FRAME(1)
  1219                                  
  1220                                  L_code_ptr_is_boolean:
  1221                                          ENTER
    33 00000E3A C8000000            <1>  enter 0, 0
    34 00000E3E 4883E4F0            <1>  and rsp, ~15
  1222 00000E42 48837D1801                      cmp COUNT, 1
  1223 00000E47 0F85890E0000                    jne L_error_arg_count_1
  1224 00000E4D 488B4520                        mov rax, PARAM(0)
  1225 00000E51 8A18                            mov bl, byte [rax]
  1226 00000E53 80E308                          and bl, T_boolean
  1227 00000E56 740C                            je .L_false
  1228 00000E58 48B8-                           mov rax, sob_boolean_true
  1228 00000E5A [0300000000000000] 
  1229 00000E62 EB0A                            jmp .L_end
  1230                                  .L_false:
  1231 00000E64 48B8-                           mov rax, sob_boolean_false
  1231 00000E66 [0200000000000000] 
  1232                                  .L_end:
  1233                                          LEAVE
    38 00000E6E C9                  <1>  leave
  1234 00000E6F C21800                          ret AND_KILL_FRAME(1)
  1235                                          
  1236                                  L_code_ptr_is_number:
  1237                                          ENTER
    33 00000E72 C8000000            <1>  enter 0, 0
    34 00000E76 4883E4F0            <1>  and rsp, ~15
  1238 00000E7A 48837D1801                      cmp COUNT, 1
  1239 00000E7F 0F85510E0000                    jne L_error_arg_count_1
  1240 00000E85 488B4520                        mov rax, PARAM(0)
  1241 00000E89 8A18                            mov bl, byte [rax]
  1242 00000E8B 80E310                          and bl, T_number
  1243 00000E8E 740C                            je .L_false
  1244 00000E90 48B8-                           mov rax, sob_boolean_true
  1244 00000E92 [0300000000000000] 
  1245 00000E9A EB0A                            jmp .L_end
  1246                                  .L_false:
  1247 00000E9C 48B8-                           mov rax, sob_boolean_false
  1247 00000E9E [0200000000000000] 
  1248                                  .L_end:
  1249                                          LEAVE
    38 00000EA6 C9                  <1>  leave
  1250 00000EA7 C21800                          ret AND_KILL_FRAME(1)
  1251                                          
  1252                                  L_code_ptr_is_collection:
  1253                                          ENTER
    33 00000EAA C8000000            <1>  enter 0, 0
    34 00000EAE 4883E4F0            <1>  and rsp, ~15
  1254 00000EB2 48837D1801                      cmp COUNT, 1
  1255 00000EB7 0F85190E0000                    jne L_error_arg_count_1
  1256 00000EBD 488B4520                        mov rax, PARAM(0)
  1257 00000EC1 8A18                            mov bl, byte [rax]
  1258 00000EC3 80E320                          and bl, T_collection
  1259 00000EC6 740C                            je .L_false
  1260 00000EC8 48B8-                           mov rax, sob_boolean_true
  1260 00000ECA [0300000000000000] 
  1261 00000ED2 EB0A                            jmp .L_end
  1262                                  .L_false:
  1263 00000ED4 48B8-                           mov rax, sob_boolean_false
  1263 00000ED6 [0200000000000000] 
  1264                                  .L_end:
  1265                                          LEAVE
    38 00000EDE C9                  <1>  leave
  1266 00000EDF C21800                          ret AND_KILL_FRAME(1)
  1267                                  
  1268                                  L_code_ptr_cons:
  1269                                          ENTER
    33 00000EE2 C8000000            <1>  enter 0, 0
    34 00000EE6 4883E4F0            <1>  and rsp, ~15
  1270 00000EEA 48837D1802                      cmp COUNT, 2
  1271 00000EEF 0F85160E0000                    jne L_error_arg_count_2
  1272 00000EF5 BF11000000                      mov rdi, (1 + 8 + 8)
  1273 00000EFA E866F7FFFF                      call malloc
  1274 00000EFF C60021                          mov byte [rax], T_pair
  1275 00000F02 488B5D20                        mov rbx, PARAM(0)
  1276 00000F06 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1277 00000F0A 488B5D28                        mov rbx, PARAM(1)
  1278 00000F0E 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1279                                          LEAVE
    38 00000F12 C9                  <1>  leave
  1280 00000F13 C22000                          ret AND_KILL_FRAME(2)
  1281                                  
  1282                                  L_code_ptr_display_sexpr:
  1283                                          ENTER
    33 00000F16 C8000000            <1>  enter 0, 0
    34 00000F1A 4883E4F0            <1>  and rsp, ~15
  1284 00000F1E 48837D1801                      cmp COUNT, 1
  1285 00000F23 0F85AD0D0000                    jne L_error_arg_count_1
  1286 00000F29 488B7D20                        mov rdi, PARAM(0)
  1287 00000F2D E84EF7FFFF                      call print_sexpr
  1288 00000F32 48B8-                           mov rax, sob_void
  1288 00000F34 [0000000000000000] 
  1289                                          LEAVE
    38 00000F3C C9                  <1>  leave
  1290 00000F3D C21800                          ret AND_KILL_FRAME(1)
  1291                                  
  1292                                  L_code_ptr_write_char:
  1293                                          ENTER
    33 00000F40 C8000000            <1>  enter 0, 0
    34 00000F44 4883E4F0            <1>  and rsp, ~15
  1294 00000F48 48837D1801                      cmp COUNT, 1
  1295 00000F4D 0F85830D0000                    jne L_error_arg_count_1
  1296 00000F53 488B4520                        mov rax, PARAM(0)
  1297                                          assert_char(rax)
    42 00000F57 803802              <1>  cmp byte [%1], %2
    43 00000F5A 0F854A0E0000        <1>  jne L_error_incorrect_type
  1298 00000F60 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1299 00000F63 4825FF000000                    and rax, 255
  1300 00000F69 48BF-                           mov rdi, fmt_char
  1300 00000F6B [3902000000000000] 
  1301 00000F73 4889C6                          mov rsi, rax
  1302 00000F76 B800000000                      mov rax, 0
  1303                                  	ENTER
    33 00000F7B C8000000            <1>  enter 0, 0
    34 00000F7F 4883E4F0            <1>  and rsp, ~15
  1304 00000F83 E8(00000000)                    call printf
  1305                                  	LEAVE
    38 00000F88 C9                  <1>  leave
  1306 00000F89 48B8-                           mov rax, sob_void
  1306 00000F8B [0000000000000000] 
  1307                                          LEAVE
    38 00000F93 C9                  <1>  leave
  1308 00000F94 C21800                          ret AND_KILL_FRAME(1)
  1309                                  
  1310                                  L_code_ptr_car:
  1311                                          ENTER
    33 00000F97 C8000000            <1>  enter 0, 0
    34 00000F9B 4883E4F0            <1>  and rsp, ~15
  1312 00000F9F 48837D1801                      cmp COUNT, 1
  1313 00000FA4 0F852C0D0000                    jne L_error_arg_count_1
  1314 00000FAA 488B4520                        mov rax, PARAM(0)
  1315                                          assert_pair(rax)
    42 00000FAE 803821              <1>  cmp byte [%1], %2
    43 00000FB1 0F85F30D0000        <1>  jne L_error_incorrect_type
  1316 00000FB7 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1317                                          LEAVE
    38 00000FBB C9                  <1>  leave
  1318 00000FBC C21800                          ret AND_KILL_FRAME(1)
  1319                                          
  1320                                  L_code_ptr_cdr:
  1321                                          ENTER
    33 00000FBF C8000000            <1>  enter 0, 0
    34 00000FC3 4883E4F0            <1>  and rsp, ~15
  1322 00000FC7 48837D1801                      cmp COUNT, 1
  1323 00000FCC 0F85040D0000                    jne L_error_arg_count_1
  1324 00000FD2 488B4520                        mov rax, PARAM(0)
  1325                                          assert_pair(rax)
    42 00000FD6 803821              <1>  cmp byte [%1], %2
    43 00000FD9 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1326 00000FDF 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1327                                          LEAVE
    38 00000FE3 C9                  <1>  leave
  1328 00000FE4 C21800                          ret AND_KILL_FRAME(1)
  1329                                          
  1330                                  L_code_ptr_string_length:
  1331                                          ENTER
    33 00000FE7 C8000000            <1>  enter 0, 0
    34 00000FEB 4883E4F0            <1>  and rsp, ~15
  1332 00000FEF 48837D1801                      cmp COUNT, 1
  1333 00000FF4 0F85DC0C0000                    jne L_error_arg_count_1
  1334 00000FFA 488B4520                        mov rax, PARAM(0)
  1335                                          assert_string(rax)
    42 00000FFE 803803              <1>  cmp byte [%1], %2
    43 00001001 0F85A30D0000        <1>  jne L_error_incorrect_type
  1336 00001007 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1337 0000100B E83A0C0000                      call make_integer
  1338                                          LEAVE
    38 00001010 C9                  <1>  leave
  1339 00001011 C21800                          ret AND_KILL_FRAME(1)
  1340                                  
  1341                                  L_code_ptr_vector_length:
  1342                                          ENTER
    33 00001014 C8000000            <1>  enter 0, 0
    34 00001018 4883E4F0            <1>  and rsp, ~15
  1343 0000101C 48837D1801                      cmp COUNT, 1
  1344 00001021 0F85AF0C0000                    jne L_error_arg_count_1
  1345 00001027 488B4520                        mov rax, PARAM(0)
  1346                                          assert_vector(rax)
    42 0000102B 803822              <1>  cmp byte [%1], %2
    43 0000102E 0F85760D0000        <1>  jne L_error_incorrect_type
  1347 00001034 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1348 00001038 E80D0C0000                      call make_integer
  1349                                          LEAVE
    38 0000103D C9                  <1>  leave
  1350 0000103E C21800                          ret AND_KILL_FRAME(1)
  1351                                  
  1352                                  L_code_ptr_real_to_integer:
  1353                                          ENTER
    33 00001041 C8000000            <1>  enter 0, 0
    34 00001045 4883E4F0            <1>  and rsp, ~15
  1354 00001049 48837D1801                      cmp COUNT, 1
  1355 0000104E 0F85820C0000                    jne L_error_arg_count_1
  1356 00001054 488B5D20                        mov rbx, PARAM(0)
  1357                                          assert_real(rbx)
    42 00001058 803B12              <1>  cmp byte [%1], %2
    43 0000105B 0F85490D0000        <1>  jne L_error_incorrect_type
  1358 00001061 F20F104301                      movsd xmm0, qword [rbx + 1]
  1359 00001066 F2480F2CF8                      cvttsd2si rdi, xmm0
  1360 0000106B E8DA0B0000                      call make_integer
  1361                                          LEAVE
    38 00001070 C9                  <1>  leave
  1362 00001071 C21800                          ret AND_KILL_FRAME(1)
  1363                                  
  1364                                  L_code_ptr_exit:
  1365                                          ENTER
    33 00001074 C8000000            <1>  enter 0, 0
    34 00001078 4883E4F0            <1>  and rsp, ~15
  1366 0000107C 48837D1800                      cmp COUNT, 0
  1367 00001081 0F851A0C0000                    jne L_error_arg_count_0
  1368 00001087 B800000000                      mov rax, 0
  1369 0000108C E8(00000000)                    call exit
  1370                                  
  1371                                  L_code_ptr_integer_to_real:
  1372                                          ENTER
    33 00001091 C8000000            <1>  enter 0, 0
    34 00001095 4883E4F0            <1>  and rsp, ~15
  1373 00001099 48837D1801                      cmp COUNT, 1
  1374 0000109E 0F85320C0000                    jne L_error_arg_count_1
  1375 000010A4 488B4520                        mov rax, PARAM(0)
  1376                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010A8 803811              <2>  cmp byte [%1], %2
    43 000010AB 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000010B1 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010B6 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1377 000010BC FF7001                          push qword [rax + 1]
  1378 000010BF F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1379 000010C5 E8640B0000                      call make_real
  1380                                          LEAVE
    38 000010CA C9                  <1>  leave
  1381 000010CB C21800                          ret AND_KILL_FRAME(1)
  1382                                  
  1383                                  L_code_ptr_rational_to_real:
  1384                                          ENTER
    33 000010CE C8000000            <1>  enter 0, 0
    34 000010D2 4883E4F0            <1>  and rsp, ~15
  1385 000010D6 48837D1801                      cmp COUNT, 1
  1386 000010DB 0F85F50B0000                    jne L_error_arg_count_1
  1387 000010E1 488B4520                        mov rax, PARAM(0)
  1388                                          assert_rational(rax)
    42 000010E5 803811              <1>  cmp byte [%1], %2
    43 000010E8 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1389 000010EE FF7001                          push qword [rax + 1]
  1390 000010F1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1391 000010F7 FF7009                          push qword [rax + 1 + 8]
  1392 000010FA F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1393 00001100 F20F5EC1                        divsd xmm0, xmm1
  1394 00001104 E8250B0000                      call make_real
  1395                                          LEAVE
    38 00001109 C9                  <1>  leave
  1396 0000110A C21800                          ret AND_KILL_FRAME(1)
  1397                                  
  1398                                  L_code_ptr_char_to_integer:
  1399                                          ENTER
    33 0000110D C8000000            <1>  enter 0, 0
    34 00001111 4883E4F0            <1>  and rsp, ~15
  1400 00001115 48837D1801                      cmp COUNT, 1
  1401 0000111A 0F85B60B0000                    jne L_error_arg_count_1
  1402 00001120 488B4520                        mov rax, PARAM(0)
  1403                                          assert_char(rax)
    42 00001124 803802              <1>  cmp byte [%1], %2
    43 00001127 0F857D0C0000        <1>  jne L_error_incorrect_type
  1404 0000112D 8A4001                          mov al, byte [rax + 1]
  1405 00001130 4825FF000000                    and rax, 255
  1406 00001136 4889C7                          mov rdi, rax
  1407 00001139 E80C0B0000                      call make_integer
  1408                                          LEAVE
    38 0000113E C9                  <1>  leave
  1409 0000113F C21800                          ret AND_KILL_FRAME(1)
  1410                                  
  1411                                  L_code_ptr_integer_to_char:
  1412                                          ENTER
    33 00001142 C8000000            <1>  enter 0, 0
    34 00001146 4883E4F0            <1>  and rsp, ~15
  1413 0000114A 48837D1801                      cmp COUNT, 1
  1414 0000114F 0F85810B0000                    jne L_error_arg_count_1
  1415 00001155 488B4520                        mov rax, PARAM(0)
  1416                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001159 803811              <2>  cmp byte [%1], %2
    43 0000115C 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001162 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001167 0F853D0C0000        <1>  jne L_error_incorrect_type
  1417 0000116D 488B5801                        mov rbx, qword [rax + 1]
  1418 00001171 4883FB00                        cmp rbx, 0
  1419 00001175 0F8EF50A0000                    jle L_error_integer_range
  1420 0000117B 4881FB00010000                  cmp rbx, 256
  1421 00001182 0F8DE80A0000                    jge L_error_integer_range
  1422 00001188 BF02000000                      mov rdi, (1 + 1)
  1423 0000118D E8D3F4FFFF                      call malloc
  1424 00001192 C60002                          mov byte [rax], T_char
  1425 00001195 885801                          mov byte [rax + 1], bl
  1426                                          LEAVE
    38 00001198 C9                  <1>  leave
  1427 00001199 C21800                          ret AND_KILL_FRAME(1)
  1428                                  
  1429                                  L_code_ptr_trng:
  1430                                          ENTER
    33 0000119C C8000000            <1>  enter 0, 0
    34 000011A0 4883E4F0            <1>  and rsp, ~15
  1431 000011A4 48837D1800                      cmp COUNT, 0
  1432 000011A9 0F85F20A0000                    jne L_error_arg_count_0
  1433 000011AF 480FC7F7                        rdrand rdi
  1434 000011B3 48D1EF                          shr rdi, 1
  1435 000011B6 E88F0A0000                      call make_integer
  1436                                          LEAVE
    38 000011BB C9                  <1>  leave
  1437 000011BC C21000                          ret AND_KILL_FRAME(0)
  1438                                  
  1439                                  L_code_ptr_is_zero:
  1440                                          ENTER
    33 000011BF C8000000            <1>  enter 0, 0
    34 000011C3 4883E4F0            <1>  and rsp, ~15
  1441 000011C7 48837D1801                      cmp COUNT, 1
  1442 000011CC 0F85040B0000                    jne L_error_arg_count_1
  1443 000011D2 488B4520                        mov rax, PARAM(0)
  1444 000011D6 803811                          cmp byte [rax], T_rational
  1445 000011D9 740A                            je .L_rational
  1446 000011DB 803812                          cmp byte [rax], T_real
  1447 000011DE 740E                            je .L_real
  1448 000011E0 E9C50B0000                      jmp L_error_incorrect_type
  1449                                  .L_rational:
  1450 000011E5 4883780100                      cmp qword [rax + 1], 0
  1451 000011EA 7420                            je .L_zero
  1452 000011EC EB12                            jmp .L_not_zero
  1453                                  .L_real:
  1454 000011EE 660FEFC0                        pxor xmm0, xmm0
  1455 000011F2 FF7001                          push qword [rax + 1]
  1456 000011F5 F20F100C24                      movsd xmm1, qword [rsp]
  1457 000011FA 660F2EC1                        ucomisd xmm0, xmm1
  1458 000011FE 740C                            je .L_zero
  1459                                  .L_not_zero:
  1460 00001200 48B8-                           mov rax, sob_boolean_false
  1460 00001202 [0200000000000000] 
  1461 0000120A EB0A                            jmp .L_end
  1462                                  .L_zero:
  1463 0000120C 48B8-                           mov rax, sob_boolean_true
  1463 0000120E [0300000000000000] 
  1464                                  .L_end:
  1465                                          LEAVE
    38 00001216 C9                  <1>  leave
  1466 00001217 C21800                          ret AND_KILL_FRAME(1)
  1467                                  
  1468                                  L_code_ptr_is_integer:
  1469                                          ENTER
    33 0000121A C8000000            <1>  enter 0, 0
    34 0000121E 4883E4F0            <1>  and rsp, ~15
  1470 00001222 48837D1801                      cmp COUNT, 1
  1471 00001227 0F85A90A0000                    jne L_error_arg_count_1
  1472 0000122D 488B4520                        mov rax, PARAM(0)
  1473 00001231 803811                          cmp byte [rax], T_rational
  1474 00001234 7513                            jne .L_false
  1475 00001236 4883780901                      cmp qword [rax + 1 + 8], 1
  1476 0000123B 750C                            jne .L_false
  1477 0000123D 48B8-                           mov rax, sob_boolean_true
  1477 0000123F [0300000000000000] 
  1478 00001247 EB0A                            jmp .L_exit
  1479                                  .L_false:
  1480 00001249 48B8-                           mov rax, sob_boolean_false
  1480 0000124B [0200000000000000] 
  1481                                  .L_exit:
  1482                                          LEAVE
    38 00001253 C9                  <1>  leave
  1483 00001254 C21800                          ret AND_KILL_FRAME(1)
  1484                                  
  1485                                  L_code_ptr_raw_bin_add_rr:
  1486                                          ENTER
    33 00001257 C8000000            <1>  enter 0, 0
    34 0000125B 4883E4F0            <1>  and rsp, ~15
  1487 0000125F 48837D1802                      cmp COUNT, 2
  1488 00001264 0F85A10A0000                    jne L_error_arg_count_2
  1489 0000126A 488B5D20                        mov rbx, PARAM(0)
  1490                                          assert_real(rbx)
    42 0000126E 803B12              <1>  cmp byte [%1], %2
    43 00001271 0F85330B0000        <1>  jne L_error_incorrect_type
  1491 00001277 488B4D28                        mov rcx, PARAM(1)
  1492                                          assert_real(rcx)
    42 0000127B 803912              <1>  cmp byte [%1], %2
    43 0000127E 0F85260B0000        <1>  jne L_error_incorrect_type
  1493 00001284 F20F104301                      movsd xmm0, qword [rbx + 1]
  1494 00001289 F20F104901                      movsd xmm1, qword [rcx + 1]
  1495 0000128E F20F58C1                        addsd xmm0, xmm1
  1496 00001292 E897090000                      call make_real
  1497                                          LEAVE
    38 00001297 C9                  <1>  leave
  1498 00001298 C22000                          ret AND_KILL_FRAME(2)
  1499                                  
  1500                                  L_code_ptr_raw_bin_sub_rr:
  1501                                          ENTER
    33 0000129B C8000000            <1>  enter 0, 0
    34 0000129F 4883E4F0            <1>  and rsp, ~15
  1502 000012A3 48837D1802                      cmp COUNT, 2
  1503 000012A8 0F855D0A0000                    jne L_error_arg_count_2
  1504 000012AE 488B5D20                        mov rbx, PARAM(0)
  1505                                          assert_real(rbx)
    42 000012B2 803B12              <1>  cmp byte [%1], %2
    43 000012B5 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1506 000012BB 488B4D28                        mov rcx, PARAM(1)
  1507                                          assert_real(rcx)
    42 000012BF 803912              <1>  cmp byte [%1], %2
    43 000012C2 0F85E20A0000        <1>  jne L_error_incorrect_type
  1508 000012C8 F20F104301                      movsd xmm0, qword [rbx + 1]
  1509 000012CD F20F104901                      movsd xmm1, qword [rcx + 1]
  1510 000012D2 F20F5CC1                        subsd xmm0, xmm1
  1511 000012D6 E853090000                      call make_real
  1512                                          LEAVE
    38 000012DB C9                  <1>  leave
  1513 000012DC C22000                          ret AND_KILL_FRAME(2)
  1514                                  
  1515                                  L_code_ptr_raw_bin_mul_rr:
  1516                                          ENTER
    33 000012DF C8000000            <1>  enter 0, 0
    34 000012E3 4883E4F0            <1>  and rsp, ~15
  1517 000012E7 48837D1802                      cmp COUNT, 2
  1518 000012EC 0F85190A0000                    jne L_error_arg_count_2
  1519 000012F2 488B5D20                        mov rbx, PARAM(0)
  1520                                          assert_real(rbx)
    42 000012F6 803B12              <1>  cmp byte [%1], %2
    43 000012F9 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1521 000012FF 488B4D28                        mov rcx, PARAM(1)
  1522                                          assert_real(rcx)
    42 00001303 803912              <1>  cmp byte [%1], %2
    43 00001306 0F859E0A0000        <1>  jne L_error_incorrect_type
  1523 0000130C F20F104301                      movsd xmm0, qword [rbx + 1]
  1524 00001311 F20F104901                      movsd xmm1, qword [rcx + 1]
  1525 00001316 F20F59C1                        mulsd xmm0, xmm1
  1526 0000131A E80F090000                      call make_real
  1527                                          LEAVE
    38 0000131F C9                  <1>  leave
  1528 00001320 C22000                          ret AND_KILL_FRAME(2)
  1529                                  
  1530                                  L_code_ptr_raw_bin_div_rr:
  1531                                          ENTER
    33 00001323 C8000000            <1>  enter 0, 0
    34 00001327 4883E4F0            <1>  and rsp, ~15
  1532 0000132B 48837D1802                      cmp COUNT, 2
  1533 00001330 0F85D5090000                    jne L_error_arg_count_2
  1534 00001336 488B5D20                        mov rbx, PARAM(0)
  1535                                          assert_real(rbx)
    42 0000133A 803B12              <1>  cmp byte [%1], %2
    43 0000133D 0F85670A0000        <1>  jne L_error_incorrect_type
  1536 00001343 488B4D28                        mov rcx, PARAM(1)
  1537                                          assert_real(rcx)
    42 00001347 803912              <1>  cmp byte [%1], %2
    43 0000134A 0F855A0A0000        <1>  jne L_error_incorrect_type
  1538 00001350 F20F104301                      movsd xmm0, qword [rbx + 1]
  1539 00001355 F20F104901                      movsd xmm1, qword [rcx + 1]
  1540 0000135A 660FEFD2                        pxor xmm2, xmm2
  1541 0000135E 660F2ECA                        ucomisd xmm1, xmm2
  1542 00001362 0F84730A0000                    je L_error_division_by_zero
  1543 00001368 F20F5EC1                        divsd xmm0, xmm1
  1544 0000136C E8BD080000                      call make_real
  1545                                          LEAVE
    38 00001371 C9                  <1>  leave
  1546 00001372 C22000                          ret AND_KILL_FRAME(2)
  1547                                  
  1548                                  L_code_ptr_raw_bin_add_qq:
  1549                                          ENTER
    33 00001375 C8000000            <1>  enter 0, 0
    34 00001379 4883E4F0            <1>  and rsp, ~15
  1550 0000137D 48837D1802                      cmp COUNT, 2
  1551 00001382 0F8583090000                    jne L_error_arg_count_2
  1552 00001388 4C8B4520                        mov r8, PARAM(0)
  1553                                          assert_rational(r8)
    42 0000138C 41803811            <1>  cmp byte [%1], %2
    43 00001390 0F85140A0000        <1>  jne L_error_incorrect_type
  1554 00001396 4C8B4D28                        mov r9, PARAM(1)
  1555                                          assert_rational(r9)
    42 0000139A 41803911            <1>  cmp byte [%1], %2
    43 0000139E 0F85060A0000        <1>  jne L_error_incorrect_type
  1556 000013A4 498B4001                        mov rax, qword [r8 + 1] ; num1
  1557 000013A8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1558 000013AC 4899                            cqo
  1559 000013AE 48F7EB                          imul rbx
  1560 000013B1 4889C6                          mov rsi, rax
  1561 000013B4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1562 000013B8 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1563 000013BC 4899                            cqo
  1564 000013BE 48F7EB                          imul rbx
  1565 000013C1 4801C6                          add rsi, rax
  1566 000013C4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1567 000013C8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1568 000013CC 4899                            cqo
  1569 000013CE 48F7EB                          imul rbx
  1570 000013D1 4889C7                          mov rdi, rax
  1571 000013D4 E827010000                      call normalize_rational
  1572                                          LEAVE
    38 000013D9 C9                  <1>  leave
  1573 000013DA C22000                          ret AND_KILL_FRAME(2)
  1574                                  
  1575                                  L_code_ptr_raw_bin_sub_qq:
  1576                                          ENTER
    33 000013DD C8000000            <1>  enter 0, 0
    34 000013E1 4883E4F0            <1>  and rsp, ~15
  1577 000013E5 48837D1802                      cmp COUNT, 2
  1578 000013EA 0F851B090000                    jne L_error_arg_count_2
  1579 000013F0 4C8B4520                        mov r8, PARAM(0)
  1580                                          assert_rational(r8)
    42 000013F4 41803811            <1>  cmp byte [%1], %2
    43 000013F8 0F85AC090000        <1>  jne L_error_incorrect_type
  1581 000013FE 4C8B4D28                        mov r9, PARAM(1)
  1582                                          assert_rational(r9)
    42 00001402 41803911            <1>  cmp byte [%1], %2
    43 00001406 0F859E090000        <1>  jne L_error_incorrect_type
  1583 0000140C 498B4001                        mov rax, qword [r8 + 1] ; num1
  1584 00001410 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1585 00001414 4899                            cqo
  1586 00001416 48F7EB                          imul rbx
  1587 00001419 4889C6                          mov rsi, rax
  1588 0000141C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1589 00001420 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1590 00001424 4899                            cqo
  1591 00001426 48F7EB                          imul rbx
  1592 00001429 4829C6                          sub rsi, rax
  1593 0000142C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1594 00001430 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1595 00001434 4899                            cqo
  1596 00001436 48F7EB                          imul rbx
  1597 00001439 4889C7                          mov rdi, rax
  1598 0000143C E8BF000000                      call normalize_rational
  1599                                          LEAVE
    38 00001441 C9                  <1>  leave
  1600 00001442 C22000                          ret AND_KILL_FRAME(2)
  1601                                  
  1602                                  L_code_ptr_raw_bin_mul_qq:
  1603                                          ENTER
    33 00001445 C8000000            <1>  enter 0, 0
    34 00001449 4883E4F0            <1>  and rsp, ~15
  1604 0000144D 48837D1802                      cmp COUNT, 2
  1605 00001452 0F85B3080000                    jne L_error_arg_count_2
  1606 00001458 4C8B4520                        mov r8, PARAM(0)
  1607                                          assert_rational(r8)
    42 0000145C 41803811            <1>  cmp byte [%1], %2
    43 00001460 0F8544090000        <1>  jne L_error_incorrect_type
  1608 00001466 4C8B4D28                        mov r9, PARAM(1)
  1609                                          assert_rational(r9)
    42 0000146A 41803911            <1>  cmp byte [%1], %2
    43 0000146E 0F8536090000        <1>  jne L_error_incorrect_type
  1610 00001474 498B4001                        mov rax, qword [r8 + 1] ; num1
  1611 00001478 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1612 0000147C 4899                            cqo
  1613 0000147E 48F7EB                          imul rbx
  1614 00001481 4889C6                          mov rsi, rax
  1615 00001484 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1616 00001488 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1617 0000148C 4899                            cqo
  1618 0000148E 48F7EB                          imul rbx
  1619 00001491 4889C7                          mov rdi, rax
  1620 00001494 E867000000                      call normalize_rational
  1621                                          LEAVE
    38 00001499 C9                  <1>  leave
  1622 0000149A C22000                          ret AND_KILL_FRAME(2)
  1623                                          
  1624                                  L_code_ptr_raw_bin_div_qq:
  1625                                          ENTER
    33 0000149D C8000000            <1>  enter 0, 0
    34 000014A1 4883E4F0            <1>  and rsp, ~15
  1626 000014A5 48837D1802                      cmp COUNT, 2
  1627 000014AA 0F855B080000                    jne L_error_arg_count_2
  1628 000014B0 4C8B4520                        mov r8, PARAM(0)
  1629                                          assert_rational(r8)
    42 000014B4 41803811            <1>  cmp byte [%1], %2
    43 000014B8 0F85EC080000        <1>  jne L_error_incorrect_type
  1630 000014BE 4C8B4D28                        mov r9, PARAM(1)
  1631                                          assert_rational(r9)
    42 000014C2 41803911            <1>  cmp byte [%1], %2
    43 000014C6 0F85DE080000        <1>  jne L_error_incorrect_type
  1632 000014CC 4983790100                      cmp qword [r9 + 1], 0
  1633 000014D1 0F8404090000                    je L_error_division_by_zero
  1634 000014D7 498B4001                        mov rax, qword [r8 + 1] ; num1
  1635 000014DB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1636 000014DF 4899                            cqo
  1637 000014E1 48F7EB                          imul rbx
  1638 000014E4 4889C6                          mov rsi, rax
  1639 000014E7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1640 000014EB 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1641 000014EF 4899                            cqo
  1642 000014F1 48F7EB                          imul rbx
  1643 000014F4 4889C7                          mov rdi, rax
  1644 000014F7 E804000000                      call normalize_rational
  1645                                          LEAVE
    38 000014FC C9                  <1>  leave
  1646 000014FD C22000                          ret AND_KILL_FRAME(2)
  1647                                          
  1648                                  normalize_rational:
  1649 00001500 56                              push rsi
  1650 00001501 57                              push rdi
  1651 00001502 E839000000                      call gcd
  1652 00001507 4889C3                          mov rbx, rax
  1653 0000150A 58                              pop rax
  1654 0000150B 4899                            cqo
  1655 0000150D 48F7FB                          idiv rbx
  1656 00001510 4989C0                          mov r8, rax
  1657 00001513 58                              pop rax
  1658 00001514 4899                            cqo
  1659 00001516 48F7FB                          idiv rbx
  1660 00001519 4989C1                          mov r9, rax
  1661 0000151C BF11000000                      mov rdi, (1 + 8 + 8)
  1662 00001521 E83FF1FFFF                      call malloc
  1663 00001526 C60011                          mov byte [rax], T_rational
  1664 00001529 4C894801                        mov qword [rax + 1], r9
  1665 0000152D 4C894009                        mov qword [rax + 1 + 8], r8
  1666 00001531 C3                              ret
  1667                                  
  1668                                  iabs:
  1669 00001532 4889F8                          mov rax, rdi
  1670 00001535 4883F800                        cmp rax, 0
  1671 00001539 7C01                            jl .Lneg
  1672 0000153B C3                              ret
  1673                                  .Lneg:
  1674 0000153C 48F7D8                          neg rax
  1675 0000153F C3                              ret
  1676                                  
  1677                                  gcd:
  1678 00001540 E8EDFFFFFF                      call iabs
  1679 00001545 4889C3                          mov rbx, rax
  1680 00001548 4889F7                          mov rdi, rsi
  1681 0000154B E8E2FFFFFF                      call iabs
  1682 00001550 4883F800                        cmp rax, 0
  1683 00001554 7502                            jne .L0
  1684 00001556 4893                            xchg rax, rbx
  1685                                  .L0:
  1686 00001558 4883FB00                        cmp rbx, 0
  1687 0000155C 740C                            je .L1
  1688 0000155E 4899                            cqo
  1689 00001560 48F7F3                          div rbx
  1690 00001563 4889D0                          mov rax, rdx
  1691 00001566 4893                            xchg rax, rbx
  1692 00001568 EBEE                            jmp .L0
  1693                                  .L1:
  1694 0000156A C3                              ret
  1695                                  
  1696                                  L_code_ptr_error:
  1697                                          ENTER
    33 0000156B C8000000            <1>  enter 0, 0
    34 0000156F 4883E4F0            <1>  and rsp, ~15
  1698 00001573 48837D1802                      cmp COUNT, 2
  1699 00001578 0F858D070000                    jne L_error_arg_count_2
  1700 0000157E 488B7520                        mov rsi, PARAM(0)
  1701                                          assert_symbol(rsi)
    42 00001582 803E04              <1>  cmp byte [%1], %2
    43 00001585 0F851F080000        <1>  jne L_error_incorrect_type
  1702 0000158B 488B7528                        mov rsi, PARAM(1)
  1703                                          assert_string(rsi)
    42 0000158F 803E03              <1>  cmp byte [%1], %2
    43 00001592 0F8512080000        <1>  jne L_error_incorrect_type
  1704 00001598 48BF-                           mov rdi, fmt_scheme_error_part_1
  1704 0000159A [7103000000000000] 
  1705 000015A2 B800000000                      mov rax, 0
  1706                                  	ENTER
    33 000015A7 C8000000            <1>  enter 0, 0
    34 000015AB 4883E4F0            <1>  and rsp, ~15
  1707 000015AF E8(00000000)                    call printf
  1708                                  	LEAVE
    38 000015B4 C9                  <1>  leave
  1709 000015B5 488B7D20                        mov rdi, PARAM(0)
  1710 000015B9 E8C2F0FFFF                      call print_sexpr
  1711 000015BE 48BF-                           mov rdi, fmt_scheme_error_part_2
  1711 000015C0 [8503000000000000] 
  1712 000015C8 B800000000                      mov rax, 0
  1713                                  	ENTER
    33 000015CD C8000000            <1>  enter 0, 0
    34 000015D1 4883E4F0            <1>  and rsp, ~15
  1714 000015D5 E8(00000000)                    call printf
  1715                                  	LEAVE
    38 000015DA C9                  <1>  leave
  1716 000015DB 488B4528                        mov rax, PARAM(1)       ; sob_string
  1717 000015DF BE01000000                      mov rsi, 1              ; size = 1 byte
  1718 000015E4 488B5001                        mov rdx, qword [rax + 1] ; length
  1719 000015E8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1720 000015EC 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1721 000015F4 E8(00000000)                    call fwrite
  1722 000015F9 48BF-                           mov rdi, fmt_scheme_error_part_3
  1722 000015FB [C703000000000000] 
  1723 00001603 B800000000                      mov rax, 0
  1724                                  	ENTER
    33 00001608 C8000000            <1>  enter 0, 0
    34 0000160C 4883E4F0            <1>  and rsp, ~15
  1725 00001610 E8(00000000)                    call printf
  1726                                  	LEAVE
    38 00001615 C9                  <1>  leave
  1727 00001616 48C7C0F7FFFFFF                  mov rax, -9
  1728 0000161D E8(00000000)                    call exit
  1729                                  
  1730                                  L_code_ptr_raw_less_than_rr:
  1731                                          ENTER
    33 00001622 C8000000            <1>  enter 0, 0
    34 00001626 4883E4F0            <1>  and rsp, ~15
  1732 0000162A 48837D1802                      cmp COUNT, 2
  1733 0000162F 0F85D6060000                    jne L_error_arg_count_2
  1734 00001635 488B7520                        mov rsi, PARAM(0)
  1735                                          assert_real(rsi)
    42 00001639 803E12              <1>  cmp byte [%1], %2
    43 0000163C 0F8568070000        <1>  jne L_error_incorrect_type
  1736 00001642 488B7D28                        mov rdi, PARAM(1)
  1737                                          assert_real(rdi)
    42 00001646 803F12              <1>  cmp byte [%1], %2
    43 00001649 0F855B070000        <1>  jne L_error_incorrect_type
  1738 0000164F F20F104601                      movsd xmm0, qword [rsi + 1]
  1739 00001654 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1740 00001659 660F2FC1                        comisd xmm0, xmm1
  1741 0000165D 730C                            jae .L_false
  1742 0000165F 48B8-                           mov rax, sob_boolean_true
  1742 00001661 [0300000000000000] 
  1743 00001669 EB0A                            jmp .L_exit
  1744                                  .L_false:
  1745 0000166B 48B8-                           mov rax, sob_boolean_false
  1745 0000166D [0200000000000000] 
  1746                                  .L_exit:
  1747                                          LEAVE
    38 00001675 C9                  <1>  leave
  1748 00001676 C22000                          ret AND_KILL_FRAME(2)
  1749                                          
  1750                                  L_code_ptr_raw_less_than_qq:
  1751                                          ENTER
    33 00001679 C8000000            <1>  enter 0, 0
    34 0000167D 4883E4F0            <1>  and rsp, ~15
  1752 00001681 48837D1802                      cmp COUNT, 2
  1753 00001686 0F857F060000                    jne L_error_arg_count_2
  1754 0000168C 488B7520                        mov rsi, PARAM(0)
  1755                                          assert_rational(rsi)
    42 00001690 803E11              <1>  cmp byte [%1], %2
    43 00001693 0F8511070000        <1>  jne L_error_incorrect_type
  1756 00001699 488B7D28                        mov rdi, PARAM(1)
  1757                                          assert_rational(rdi)
    42 0000169D 803F11              <1>  cmp byte [%1], %2
    43 000016A0 0F8504070000        <1>  jne L_error_incorrect_type
  1758 000016A6 488B4601                        mov rax, qword [rsi + 1] ; num1
  1759 000016AA 4899                            cqo
  1760 000016AC 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1761 000016B0 4889C1                          mov rcx, rax
  1762 000016B3 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1763 000016B7 4899                            cqo
  1764 000016B9 48F76F01                        imul qword [rdi + 1]          ; num2
  1765 000016BD 4829C1                          sub rcx, rax
  1766 000016C0 7D0C                            jge .L_false
  1767 000016C2 48B8-                           mov rax, sob_boolean_true
  1767 000016C4 [0300000000000000] 
  1768 000016CC EB0A                            jmp .L_exit
  1769                                  .L_false:
  1770 000016CE 48B8-                           mov rax, sob_boolean_false
  1770 000016D0 [0200000000000000] 
  1771                                  .L_exit:
  1772                                          LEAVE
    38 000016D8 C9                  <1>  leave
  1773 000016D9 C22000                          ret AND_KILL_FRAME(2)
  1774                                  
  1775                                  L_code_ptr_raw_equal_rr:
  1776                                          ENTER
    33 000016DC C8000000            <1>  enter 0, 0
    34 000016E0 4883E4F0            <1>  and rsp, ~15
  1777 000016E4 48837D1802                      cmp COUNT, 2
  1778 000016E9 0F851C060000                    jne L_error_arg_count_2
  1779 000016EF 488B7520                        mov rsi, PARAM(0)
  1780                                          assert_real(rsi)
    42 000016F3 803E12              <1>  cmp byte [%1], %2
    43 000016F6 0F85AE060000        <1>  jne L_error_incorrect_type
  1781 000016FC 488B7D28                        mov rdi, PARAM(1)
  1782                                          assert_real(rdi)
    42 00001700 803F12              <1>  cmp byte [%1], %2
    43 00001703 0F85A1060000        <1>  jne L_error_incorrect_type
  1783 00001709 F20F104601                      movsd xmm0, qword [rsi + 1]
  1784 0000170E F20F104F01                      movsd xmm1, qword [rdi + 1]
  1785 00001713 660F2FC1                        comisd xmm0, xmm1
  1786 00001717 750C                            jne .L_false
  1787 00001719 48B8-                           mov rax, sob_boolean_true
  1787 0000171B [0300000000000000] 
  1788 00001723 EB0A                            jmp .L_exit
  1789                                  .L_false:
  1790 00001725 48B8-                           mov rax, sob_boolean_false
  1790 00001727 [0200000000000000] 
  1791                                  .L_exit:
  1792                                          LEAVE
    38 0000172F C9                  <1>  leave
  1793 00001730 C22000                          ret AND_KILL_FRAME(2)
  1794                                          
  1795                                  L_code_ptr_raw_equal_qq:
  1796                                          ENTER
    33 00001733 C8000000            <1>  enter 0, 0
    34 00001737 4883E4F0            <1>  and rsp, ~15
  1797 0000173B 48837D1802                      cmp COUNT, 2
  1798 00001740 0F85C5050000                    jne L_error_arg_count_2
  1799 00001746 488B7520                        mov rsi, PARAM(0)
  1800                                          assert_rational(rsi)
    42 0000174A 803E11              <1>  cmp byte [%1], %2
    43 0000174D 0F8557060000        <1>  jne L_error_incorrect_type
  1801 00001753 488B7D28                        mov rdi, PARAM(1)
  1802                                          assert_rational(rdi)
    42 00001757 803F11              <1>  cmp byte [%1], %2
    43 0000175A 0F854A060000        <1>  jne L_error_incorrect_type
  1803 00001760 488B4601                        mov rax, qword [rsi + 1] ; num1
  1804 00001764 4899                            cqo
  1805 00001766 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1806 0000176A 4889C1                          mov rcx, rax
  1807 0000176D 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1808 00001771 4899                            cqo
  1809 00001773 48F76F01                        imul qword [rdi + 1]          ; num2
  1810 00001777 4829C1                          sub rcx, rax
  1811 0000177A 750C                            jne .L_false
  1812 0000177C 48B8-                           mov rax, sob_boolean_true
  1812 0000177E [0300000000000000] 
  1813 00001786 EB0A                            jmp .L_exit
  1814                                  .L_false:
  1815 00001788 48B8-                           mov rax, sob_boolean_false
  1815 0000178A [0200000000000000] 
  1816                                  .L_exit:
  1817                                          LEAVE
    38 00001792 C9                  <1>  leave
  1818 00001793 C22000                          ret AND_KILL_FRAME(2)
  1819                                  
  1820                                  L_code_ptr_quotient:
  1821                                          ENTER
    33 00001796 C8000000            <1>  enter 0, 0
    34 0000179A 4883E4F0            <1>  and rsp, ~15
  1822 0000179E 48837D1802                      cmp COUNT, 2
  1823 000017A3 0F8562050000                    jne L_error_arg_count_2
  1824 000017A9 488B7520                        mov rsi, PARAM(0)
  1825                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000017AD 803E11              <2>  cmp byte [%1], %2
    43 000017B0 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000017B6 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017BB 0F85E9050000        <1>  jne L_error_incorrect_type
  1826 000017C1 488B7D28                        mov rdi, PARAM(1)
  1827                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000017C5 803F11              <2>  cmp byte [%1], %2
    43 000017C8 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000017CE 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017D3 0F85D1050000        <1>  jne L_error_incorrect_type
  1828 000017D9 488B4601                        mov rax, qword [rsi + 1]
  1829 000017DD 488B5F01                        mov rbx, qword [rdi + 1]
  1830 000017E1 4883FB00                        cmp rbx, 0
  1831 000017E5 0F84F0050000                    je L_error_division_by_zero
  1832 000017EB 4899                            cqo
  1833 000017ED 48F7FB                          idiv rbx
  1834 000017F0 4889C7                          mov rdi, rax
  1835 000017F3 E852040000                      call make_integer
  1836                                          LEAVE
    38 000017F8 C9                  <1>  leave
  1837 000017F9 C22000                          ret AND_KILL_FRAME(2)
  1838                                          
  1839                                  L_code_ptr_remainder:
  1840                                          ENTER
    33 000017FC C8000000            <1>  enter 0, 0
    34 00001800 4883E4F0            <1>  and rsp, ~15
  1841 00001804 48837D1802                      cmp COUNT, 2
  1842 00001809 0F85FC040000                    jne L_error_arg_count_2
  1843 0000180F 488B7520                        mov rsi, PARAM(0)
  1844                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001813 803E11              <2>  cmp byte [%1], %2
    43 00001816 0F858E050000        <2>  jne L_error_incorrect_type
    48 0000181C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001821 0F8583050000        <1>  jne L_error_incorrect_type
  1845 00001827 488B7D28                        mov rdi, PARAM(1)
  1846                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000182B 803F11              <2>  cmp byte [%1], %2
    43 0000182E 0F8576050000        <2>  jne L_error_incorrect_type
    48 00001834 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001839 0F856B050000        <1>  jne L_error_incorrect_type
  1847 0000183F 488B4601                        mov rax, qword [rsi + 1]
  1848 00001843 488B5F01                        mov rbx, qword [rdi + 1]
  1849 00001847 4883FB00                        cmp rbx, 0
  1850 0000184B 0F848A050000                    je L_error_division_by_zero
  1851 00001851 4899                            cqo
  1852 00001853 48F7FB                          idiv rbx
  1853 00001856 4889D7                          mov rdi, rdx
  1854 00001859 E8EC030000                      call make_integer
  1855                                          LEAVE
    38 0000185E C9                  <1>  leave
  1856 0000185F C22000                          ret AND_KILL_FRAME(2)
  1857                                  
  1858                                  L_code_ptr_set_car:
  1859                                          ENTER
    33 00001862 C8000000            <1>  enter 0, 0
    34 00001866 4883E4F0            <1>  and rsp, ~15
  1860 0000186A 48837D1802                      cmp COUNT, 2
  1861 0000186F 0F8596040000                    jne L_error_arg_count_2
  1862 00001875 488B4520                        mov rax, PARAM(0)
  1863                                          assert_pair(rax)
    42 00001879 803821              <1>  cmp byte [%1], %2
    43 0000187C 0F8528050000        <1>  jne L_error_incorrect_type
  1864 00001882 488B5D28                        mov rbx, PARAM(1)
  1865 00001886 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1866 0000188A 48B8-                           mov rax, sob_void
  1866 0000188C [0000000000000000] 
  1867                                          LEAVE
    38 00001894 C9                  <1>  leave
  1868 00001895 C22000                          ret AND_KILL_FRAME(2)
  1869                                  
  1870                                  L_code_ptr_set_cdr:
  1871                                          ENTER
    33 00001898 C8000000            <1>  enter 0, 0
    34 0000189C 4883E4F0            <1>  and rsp, ~15
  1872 000018A0 48837D1802                      cmp COUNT, 2
  1873 000018A5 0F8560040000                    jne L_error_arg_count_2
  1874 000018AB 488B4520                        mov rax, PARAM(0)
  1875                                          assert_pair(rax)
    42 000018AF 803821              <1>  cmp byte [%1], %2
    43 000018B2 0F85F2040000        <1>  jne L_error_incorrect_type
  1876 000018B8 488B5D28                        mov rbx, PARAM(1)
  1877 000018BC 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1878 000018C0 48B8-                           mov rax, sob_void
  1878 000018C2 [0000000000000000] 
  1879                                          LEAVE
    38 000018CA C9                  <1>  leave
  1880 000018CB C22000                          ret AND_KILL_FRAME(2)
  1881                                  
  1882                                  L_code_ptr_string_ref:
  1883                                          ENTER
    33 000018CE C8000000            <1>  enter 0, 0
    34 000018D2 4883E4F0            <1>  and rsp, ~15
  1884 000018D6 48837D1802                      cmp COUNT, 2
  1885 000018DB 0F852A040000                    jne L_error_arg_count_2
  1886 000018E1 488B7D20                        mov rdi, PARAM(0)
  1887                                          assert_string(rdi)
    42 000018E5 803F03              <1>  cmp byte [%1], %2
    43 000018E8 0F85BC040000        <1>  jne L_error_incorrect_type
  1888 000018EE 488B7528                        mov rsi, PARAM(1)
  1889                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018F2 803E11              <2>  cmp byte [%1], %2
    43 000018F5 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000018FB 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001900 0F85A4040000        <1>  jne L_error_incorrect_type
  1890 00001906 488B5701                        mov rdx, qword [rdi + 1]
  1891 0000190A 488B4E01                        mov rcx, qword [rsi + 1]
  1892 0000190E 4839D1                          cmp rcx, rdx
  1893 00001911 0F8D59030000                    jge L_error_integer_range
  1894 00001917 4883F900                        cmp rcx, 0
  1895 0000191B 0F8C4F030000                    jl L_error_integer_range
  1896 00001921 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1897 00001925 BF02000000                      mov rdi, 2
  1898 0000192A E836EDFFFF                      call malloc
  1899 0000192F C60002                          mov byte [rax], T_char
  1900 00001932 885801                          mov byte [rax + 1], bl
  1901                                          LEAVE
    38 00001935 C9                  <1>  leave
  1902 00001936 C22000                          ret AND_KILL_FRAME(2)
  1903                                  
  1904                                  L_code_ptr_vector_ref:
  1905                                          ENTER
    33 00001939 C8000000            <1>  enter 0, 0
    34 0000193D 4883E4F0            <1>  and rsp, ~15
  1906 00001941 48837D1802                      cmp COUNT, 2
  1907 00001946 0F85BF030000                    jne L_error_arg_count_2
  1908 0000194C 488B7D20                        mov rdi, PARAM(0)
  1909                                          assert_vector(rdi)
    42 00001950 803F22              <1>  cmp byte [%1], %2
    43 00001953 0F8551040000        <1>  jne L_error_incorrect_type
  1910 00001959 488B7528                        mov rsi, PARAM(1)
  1911                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000195D 803E11              <2>  cmp byte [%1], %2
    43 00001960 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001966 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000196B 0F8539040000        <1>  jne L_error_incorrect_type
  1912 00001971 488B5701                        mov rdx, qword [rdi + 1]
  1913 00001975 488B4E01                        mov rcx, qword [rsi + 1]
  1914 00001979 4839D1                          cmp rcx, rdx
  1915 0000197C 0F8DEE020000                    jge L_error_integer_range
  1916 00001982 4883F900                        cmp rcx, 0
  1917 00001986 0F8CE4020000                    jl L_error_integer_range
  1918 0000198C 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1919                                          LEAVE
    38 00001991 C9                  <1>  leave
  1920 00001992 C22000                          ret AND_KILL_FRAME(2)
  1921                                  
  1922                                  L_code_ptr_vector_set:
  1923                                          ENTER
    33 00001995 C8000000            <1>  enter 0, 0
    34 00001999 4883E4F0            <1>  and rsp, ~15
  1924 0000199D 48837D1803                      cmp COUNT, 3
  1925 000019A2 0F85CD030000                    jne L_error_arg_count_3
  1926 000019A8 488B7D20                        mov rdi, PARAM(0)
  1927                                          assert_vector(rdi)
    42 000019AC 803F22              <1>  cmp byte [%1], %2
    43 000019AF 0F85F5030000        <1>  jne L_error_incorrect_type
  1928 000019B5 488B7528                        mov rsi, PARAM(1)
  1929                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019B9 803E11              <2>  cmp byte [%1], %2
    43 000019BC 0F85E8030000        <2>  jne L_error_incorrect_type
    48 000019C2 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019C7 0F85DD030000        <1>  jne L_error_incorrect_type
  1930 000019CD 488B5701                        mov rdx, qword [rdi + 1]
  1931 000019D1 488B4E01                        mov rcx, qword [rsi + 1]
  1932 000019D5 4839D1                          cmp rcx, rdx
  1933 000019D8 0F8D92020000                    jge L_error_integer_range
  1934 000019DE 4883F900                        cmp rcx, 0
  1935 000019E2 0F8C88020000                    jl L_error_integer_range
  1936 000019E8 488B4530                        mov rax, PARAM(2)
  1937 000019EC 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1938 000019F1 48B8-                           mov rax, sob_void
  1938 000019F3 [0000000000000000] 
  1939                                          LEAVE
    38 000019FB C9                  <1>  leave
  1940 000019FC C22800                          ret AND_KILL_FRAME(3)
  1941                                  
  1942                                  L_code_ptr_string_set:
  1943                                          ENTER
    33 000019FF C8000000            <1>  enter 0, 0
    34 00001A03 4883E4F0            <1>  and rsp, ~15
  1944 00001A07 48837D1803                      cmp COUNT, 3
  1945 00001A0C 0F8563030000                    jne L_error_arg_count_3
  1946 00001A12 488B7D20                        mov rdi, PARAM(0)
  1947                                          assert_string(rdi)
    42 00001A16 803F03              <1>  cmp byte [%1], %2
    43 00001A19 0F858B030000        <1>  jne L_error_incorrect_type
  1948 00001A1F 488B7528                        mov rsi, PARAM(1)
  1949                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A23 803E11              <2>  cmp byte [%1], %2
    43 00001A26 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001A2C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A31 0F8573030000        <1>  jne L_error_incorrect_type
  1950 00001A37 488B5701                        mov rdx, qword [rdi + 1]
  1951 00001A3B 488B4E01                        mov rcx, qword [rsi + 1]
  1952 00001A3F 4839D1                          cmp rcx, rdx
  1953 00001A42 0F8D28020000                    jge L_error_integer_range
  1954 00001A48 4883F900                        cmp rcx, 0
  1955 00001A4C 0F8C1E020000                    jl L_error_integer_range
  1956 00001A52 488B4530                        mov rax, PARAM(2)
  1957                                          assert_char(rax)
    42 00001A56 803802              <1>  cmp byte [%1], %2
    43 00001A59 0F854B030000        <1>  jne L_error_incorrect_type
  1958 00001A5F 8A4001                          mov al, byte [rax + 1]
  1959 00001A62 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1960 00001A66 48B8-                           mov rax, sob_void
  1960 00001A68 [0000000000000000] 
  1961                                          LEAVE
    38 00001A70 C9                  <1>  leave
  1962 00001A71 C22800                          ret AND_KILL_FRAME(3)
  1963                                  
  1964                                  L_code_ptr_make_vector:
  1965                                          ENTER
    33 00001A74 C8000000            <1>  enter 0, 0
    34 00001A78 4883E4F0            <1>  and rsp, ~15
  1966 00001A7C 48837D1802                      cmp COUNT, 2
  1967 00001A81 0F8584020000                    jne L_error_arg_count_2
  1968 00001A87 488B4D20                        mov rcx, PARAM(0)
  1969                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A8B 803911              <2>  cmp byte [%1], %2
    43 00001A8E 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001A94 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A99 0F850B030000        <1>  jne L_error_incorrect_type
  1970 00001A9F 488B4901                        mov rcx, qword [rcx + 1]
  1971 00001AA3 4883F900                        cmp rcx, 0
  1972 00001AA7 0F8CC3010000                    jl L_error_integer_range
  1973 00001AAD 488B5528                        mov rdx, PARAM(1)
  1974 00001AB1 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1975 00001AB9 E8A7EBFFFF                      call malloc
  1976 00001ABE C60022                          mov byte [rax], T_vector
  1977 00001AC1 48894801                        mov qword [rax + 1], rcx
  1978 00001AC5 41B800000000                    mov r8, 0
  1979                                  .L0:
  1980 00001ACB 4939C8                          cmp r8, rcx
  1981 00001ACE 740A                            je .L1
  1982 00001AD0 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1983 00001AD5 49FFC0                          inc r8
  1984 00001AD8 EBF1                            jmp .L0
  1985                                  .L1:
  1986                                          LEAVE
    38 00001ADA C9                  <1>  leave
  1987 00001ADB C22000                          ret AND_KILL_FRAME(2)
  1988                                          
  1989                                  L_code_ptr_make_string:
  1990                                          ENTER
    33 00001ADE C8000000            <1>  enter 0, 0
    34 00001AE2 4883E4F0            <1>  and rsp, ~15
  1991 00001AE6 48837D1802                      cmp COUNT, 2
  1992 00001AEB 0F851A020000                    jne L_error_arg_count_2
  1993 00001AF1 488B4D20                        mov rcx, PARAM(0)
  1994                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001AF5 803911              <2>  cmp byte [%1], %2
    43 00001AF8 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001AFE 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B03 0F85A1020000        <1>  jne L_error_incorrect_type
  1995 00001B09 488B4901                        mov rcx, qword [rcx + 1]
  1996 00001B0D 4883F900                        cmp rcx, 0
  1997 00001B11 0F8C59010000                    jl L_error_integer_range
  1998 00001B17 488B5528                        mov rdx, PARAM(1)
  1999                                          assert_char(rdx)
    42 00001B1B 803A02              <1>  cmp byte [%1], %2
    43 00001B1E 0F8586020000        <1>  jne L_error_incorrect_type
  2000 00001B24 8A5201                          mov dl, byte [rdx + 1]
  2001 00001B27 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2002 00001B2B E835EBFFFF                      call malloc
  2003 00001B30 C60003                          mov byte [rax], T_string
  2004 00001B33 48894801                        mov qword [rax + 1], rcx
  2005 00001B37 41B800000000                    mov r8, 0
  2006                                  .L0:
  2007 00001B3D 4939C8                          cmp r8, rcx
  2008 00001B40 740A                            je .L1
  2009 00001B42 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2010 00001B47 49FFC0                          inc r8
  2011 00001B4A EBF1                            jmp .L0
  2012                                  .L1:
  2013                                          LEAVE
    38 00001B4C C9                  <1>  leave
  2014 00001B4D C22000                          ret AND_KILL_FRAME(2)
  2015                                  
  2016                                  L_code_ptr_numerator:
  2017                                          ENTER
    33 00001B50 C8000000            <1>  enter 0, 0
    34 00001B54 4883E4F0            <1>  and rsp, ~15
  2018 00001B58 48837D1801                      cmp COUNT, 1
  2019 00001B5D 0F8573010000                    jne L_error_arg_count_1
  2020 00001B63 488B4520                        mov rax, PARAM(0)
  2021                                          assert_rational(rax)
    42 00001B67 803811              <1>  cmp byte [%1], %2
    43 00001B6A 0F853A020000        <1>  jne L_error_incorrect_type
  2022 00001B70 488B7801                        mov rdi, qword [rax + 1]
  2023 00001B74 E8D1000000                      call make_integer
  2024                                          LEAVE
    38 00001B79 C9                  <1>  leave
  2025 00001B7A C21800                          ret AND_KILL_FRAME(1)
  2026                                          
  2027                                  L_code_ptr_denominator:
  2028                                          ENTER
    33 00001B7D C8000000            <1>  enter 0, 0
    34 00001B81 4883E4F0            <1>  and rsp, ~15
  2029 00001B85 48837D1801                      cmp COUNT, 1
  2030 00001B8A 0F8546010000                    jne L_error_arg_count_1
  2031 00001B90 488B4520                        mov rax, PARAM(0)
  2032                                          assert_rational(rax)
    42 00001B94 803811              <1>  cmp byte [%1], %2
    43 00001B97 0F850D020000        <1>  jne L_error_incorrect_type
  2033 00001B9D 488B7809                        mov rdi, qword [rax + 1 + 8]
  2034 00001BA1 E8A4000000                      call make_integer
  2035                                          LEAVE
    38 00001BA6 C9                  <1>  leave
  2036 00001BA7 C21800                          ret AND_KILL_FRAME(1)
  2037                                  
  2038                                  L_code_ptr_eq:
  2039                                  	ENTER
    33 00001BAA C8000000            <1>  enter 0, 0
    34 00001BAE 4883E4F0            <1>  and rsp, ~15
  2040 00001BB2 48837D1802              	cmp COUNT, 2
  2041 00001BB7 0F854E010000            	jne L_error_arg_count_2
  2042 00001BBD 488B7D20                	mov rdi, PARAM(0)
  2043 00001BC1 488B7528                	mov rsi, PARAM(1)
  2044 00001BC5 4839F7                  	cmp rdi, rsi
  2045 00001BC8 744A                    	je .L_eq_true
  2046 00001BCA 8A17                    	mov dl, byte [rdi]
  2047 00001BCC 3A16                    	cmp dl, byte [rsi]
  2048 00001BCE 7550                    	jne .L_eq_false
  2049 00001BD0 80FA02                  	cmp dl, T_char
  2050 00001BD3 7437                    	je .L_char
  2051 00001BD5 80FA04                  	cmp dl, T_symbol
  2052 00001BD8 742A                    	je .L_symbol
  2053 00001BDA 80FA12                  	cmp dl, T_real
  2054 00001BDD 741D                    	je .L_real
  2055 00001BDF 80FA11                  	cmp dl, T_rational
  2056 00001BE2 7402                    	je .L_rational
  2057 00001BE4 EB3A                    	jmp .L_eq_false
  2058                                  .L_rational:
  2059 00001BE6 488B4601                	mov rax, qword [rsi + 1]
  2060 00001BEA 483B4701                	cmp rax, qword [rdi + 1]
  2061 00001BEE 7530                    	jne .L_eq_false
  2062 00001BF0 488B4609                	mov rax, qword [rsi + 1 + 8]
  2063 00001BF4 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2064 00001BF8 7526                    	jne .L_eq_false
  2065 00001BFA EB18                    	jmp .L_eq_true
  2066                                  .L_real:
  2067 00001BFC 488B4601                	mov rax, qword [rsi + 1]
  2068 00001C00 483B4701                	cmp rax, qword [rdi + 1]
  2069                                  .L_symbol:
  2070                                  	; never reached, because symbols are static!
  2071                                  	; but I'm keeping it in case, I'll ever change
  2072                                  	; the implementation
  2073 00001C04 488B4601                	mov rax, qword [rsi + 1]
  2074 00001C08 483B4701                	cmp rax, qword [rdi + 1]
  2075                                  .L_char:
  2076 00001C0C 8A5E01                  	mov bl, byte [rsi + 1]
  2077 00001C0F 3A5F01                  	cmp bl, byte [rdi + 1]
  2078 00001C12 750C                    	jne .L_eq_false
  2079                                  .L_eq_true:
  2080 00001C14 48B8-                   	mov rax, sob_boolean_true
  2080 00001C16 [0300000000000000] 
  2081 00001C1E EB0A                    	jmp .L_eq_exit
  2082                                  .L_eq_false:
  2083 00001C20 48B8-                   	mov rax, sob_boolean_false
  2083 00001C22 [0200000000000000] 
  2084                                  .L_eq_exit:
  2085                                  	LEAVE
    38 00001C2A C9                  <1>  leave
  2086 00001C2B C22000                  	ret AND_KILL_FRAME(2)
  2087                                  
  2088                                  make_real:
  2089                                          ENTER
    33 00001C2E C8000000            <1>  enter 0, 0
    34 00001C32 4883E4F0            <1>  and rsp, ~15
  2090 00001C36 BF09000000                      mov rdi, (1 + 8)
  2091 00001C3B E825EAFFFF                      call malloc
  2092 00001C40 C60012                          mov byte [rax], T_real
  2093 00001C43 F20F114001                      movsd qword [rax + 1], xmm0
  2094                                          LEAVE
    38 00001C48 C9                  <1>  leave
  2095 00001C49 C3                              ret
  2096                                          
  2097                                  make_integer:
  2098                                          ENTER
    33 00001C4A C8000000            <1>  enter 0, 0
    34 00001C4E 4883E4F0            <1>  and rsp, ~15
  2099 00001C52 4889FE                          mov rsi, rdi
  2100 00001C55 BF11000000                      mov rdi, (1 + 8 + 8)
  2101 00001C5A E806EAFFFF                      call malloc
  2102 00001C5F C60011                          mov byte [rax], T_rational
  2103 00001C62 48897001                        mov qword [rax + 1], rsi
  2104 00001C66 48C7400901000000                mov qword [rax + 1 + 8], 1
  2105                                          LEAVE
    38 00001C6E C9                  <1>  leave
  2106 00001C6F C3                              ret
  2107                                          
  2108                                  L_error_integer_range:
  2109 00001C70 488B3C25[00000000]              mov rdi, qword [stderr]
  2110 00001C78 48BE-                           mov rsi, fmt_integer_range
  2110 00001C7A [3E03000000000000] 
  2111 00001C82 B800000000                      mov rax, 0
  2112                                  	ENTER
    33 00001C87 C8000000            <1>  enter 0, 0
    34 00001C8B 4883E4F0            <1>  and rsp, ~15
  2113 00001C8F E8(00000000)                    call fprintf
  2114                                  	LEAVE
    38 00001C94 C9                  <1>  leave
  2115 00001C95 48C7C0FBFFFFFF                  mov rax, -5
  2116 00001C9C E8(00000000)                    call exit
  2117                                  
  2118                                  L_error_arg_count_0:
  2119 00001CA1 488B3C25[00000000]              mov rdi, qword [stderr]
  2120 00001CA9 48BE-                           mov rsi, fmt_arg_count_0
  2120 00001CAB [3C02000000000000] 
  2121 00001CB3 488B5518                        mov rdx, COUNT
  2122 00001CB7 B800000000                      mov rax, 0
  2123                                  	ENTER
    33 00001CBC C8000000            <1>  enter 0, 0
    34 00001CC0 4883E4F0            <1>  and rsp, ~15
  2124 00001CC4 E8(00000000)                    call fprintf
  2125                                  	LEAVE
    38 00001CC9 C9                  <1>  leave
  2126 00001CCA 48C7C0FDFFFFFF                  mov rax, -3
  2127 00001CD1 E8(00000000)                    call exit
  2128                                  
  2129                                  L_error_arg_count_1:
  2130 00001CD6 488B3C25[00000000]              mov rdi, qword [stderr]
  2131 00001CDE 48BE-                           mov rsi, fmt_arg_count_1
  2131 00001CE0 [6402000000000000] 
  2132 00001CE8 488B5518                        mov rdx, COUNT
  2133 00001CEC B800000000                      mov rax, 0
  2134                                  	ENTER
    33 00001CF1 C8000000            <1>  enter 0, 0
    34 00001CF5 4883E4F0            <1>  and rsp, ~15
  2135 00001CF9 E8(00000000)                    call fprintf
  2136                                  	LEAVE
    38 00001CFE C9                  <1>  leave
  2137 00001CFF 48C7C0FDFFFFFF                  mov rax, -3
  2138 00001D06 E8(00000000)                    call exit
  2139                                  
  2140                                  L_error_arg_count_2:
  2141 00001D0B 488B3C25[00000000]              mov rdi, qword [stderr]
  2142 00001D13 48BE-                           mov rsi, fmt_arg_count_2
  2142 00001D15 [CA02000000000000] 
  2143 00001D1D 488B5518                        mov rdx, COUNT
  2144 00001D21 B800000000                      mov rax, 0
  2145                                  	ENTER
    33 00001D26 C8000000            <1>  enter 0, 0
    34 00001D2A 4883E4F0            <1>  and rsp, ~15
  2146 00001D2E E8(00000000)                    call fprintf
  2147                                  	LEAVE
    38 00001D33 C9                  <1>  leave
  2148 00001D34 48C7C0FDFFFFFF                  mov rax, -3
  2149 00001D3B E8(00000000)                    call exit
  2150                                  
  2151                                  L_error_arg_count_12:
  2152 00001D40 488B3C25[00000000]              mov rdi, qword [stderr]
  2153 00001D48 48BE-                           mov rsi, fmt_arg_count_12
  2153 00001D4A [8A02000000000000] 
  2154 00001D52 488B5518                        mov rdx, COUNT
  2155 00001D56 B800000000                      mov rax, 0
  2156                                  	ENTER
    33 00001D5B C8000000            <1>  enter 0, 0
    34 00001D5F 4883E4F0            <1>  and rsp, ~15
  2157 00001D63 E8(00000000)                    call fprintf
  2158                                  	LEAVE
    38 00001D68 C9                  <1>  leave
  2159 00001D69 48C7C0FDFFFFFF                  mov rax, -3
  2160 00001D70 E8(00000000)                    call exit
  2161                                  
  2162                                  L_error_arg_count_3:
  2163 00001D75 488B3C25[00000000]              mov rdi, qword [stderr]
  2164 00001D7D 48BE-                           mov rsi, fmt_arg_count_3
  2164 00001D7F [F102000000000000] 
  2165 00001D87 488B5518                        mov rdx, COUNT
  2166 00001D8B B800000000                      mov rax, 0
  2167                                  	ENTER
    33 00001D90 C8000000            <1>  enter 0, 0
    34 00001D94 4883E4F0            <1>  and rsp, ~15
  2168 00001D98 E8(00000000)                    call fprintf
  2169                                  	LEAVE
    38 00001D9D C9                  <1>  leave
  2170 00001D9E 48C7C0FDFFFFFF                  mov rax, -3
  2171 00001DA5 E8(00000000)                    call exit
  2172                                          
  2173                                  L_error_incorrect_type:
  2174 00001DAA 488B3C25[00000000]              mov rdi, qword [stderr]
  2175 00001DB2 48BE-                           mov rsi, fmt_type
  2175 00001DB4 [1A03000000000000] 
  2176 00001DBC B800000000                      mov rax, 0
  2177                                  	ENTER
    33 00001DC1 C8000000            <1>  enter 0, 0
    34 00001DC5 4883E4F0            <1>  and rsp, ~15
  2178 00001DC9 E8(00000000)                    call fprintf
  2179                                  	LEAVE
    38 00001DCE C9                  <1>  leave
  2180 00001DCF 48C7C0FCFFFFFF                  mov rax, -4
  2181 00001DD6 E8(00000000)                    call exit
  2182                                  
  2183                                  L_error_division_by_zero:
  2184 00001DDB 488B3C25[00000000]              mov rdi, qword [stderr]
  2185 00001DE3 48BE-                           mov rsi, fmt_division_by_zero
  2185 00001DE5 [5B03000000000000] 
  2186 00001DED B800000000                      mov rax, 0
  2187                                  	ENTER
    33 00001DF2 C8000000            <1>  enter 0, 0
    34 00001DF6 4883E4F0            <1>  and rsp, ~15
  2188 00001DFA E8(00000000)                    call fprintf
  2189                                  	LEAVE
    38 00001DFF C9                  <1>  leave
  2190 00001E00 48C7C0F8FFFFFF                  mov rax, -8
  2191 00001E07 E8(00000000)                    call exit
  2192                                  
  2193                                  section .data
  2194                                  fmt_char:
  2195 00000239 256300                          db `%c\0`
  2196                                  fmt_arg_count_0:
  2197 0000023C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2197 00000245 74696E67207A65726F-
  2197 0000024E 20617267756D656E74-
  2197 00000257 732E20466F756E6420-
  2197 00000260 25640A00           
  2198                                  fmt_arg_count_1:
  2199 00000264 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2199 0000026D 74696E67206F6E6520-
  2199 00000276 617267756D656E742E-
  2199 0000027F 20466F756E64202564-
  2199 00000288 0A00               
  2200                                  fmt_arg_count_12:
  2201 0000028A 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2201 00000293 74696E67206F6E6520-
  2201 0000029C 726571756972656420-
  2201 000002A5 616E64206F6E65206F-
  2201 000002AE 7074696F6E616C2061-
  2201 000002B7 7267756D656E742E20-
  2201 000002C0 466F756E642025640A-
  2201 000002C9 00                 
  2202                                  fmt_arg_count_2:
  2203 000002CA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2203 000002D3 74696E672074776F20-
  2203 000002DC 617267756D656E7473-
  2203 000002E5 2E20466F756E642025-
  2203 000002EE 640A00             
  2204                                  fmt_arg_count_3:
  2205 000002F1 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2205 000002FA 74696E672074687265-
  2205 00000303 6520617267756D656E-
  2205 0000030C 74732E20466F756E64-
  2205 00000315 2025640A00         
  2206                                  fmt_type:
  2207 0000031A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2207 00000323 696F6E207061737365-
  2207 0000032C 6420696E636F727265-
  2207 00000335 637420747970650A00 
  2208                                  fmt_integer_range:
  2209 0000033E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2209 00000347 7265637420696E7465-
  2209 00000350 6765722072616E6765-
  2209 00000359 0A00               
  2210                                  fmt_division_by_zero:
  2211 0000035B 212121204469766973-             db `!!! Division by zero\n\0`
  2211 00000364 696F6E206279207A65-
  2211 0000036D 726F0A00           
  2212                                  fmt_scheme_error_part_1:
  2213 00000371 0A2121212054686520-             db `\n!!! The procedure \0`
  2213 0000037A 70726F636564757265-
  2213 00000383 2000               
  2214                                  fmt_scheme_error_part_2:
  2215 00000385 2061736B656420746F-             db ` asked to terminate the program\n`
  2215 0000038E 207465726D696E6174-
  2215 00000397 65207468652070726F-
  2215 000003A0 6772616D0A         
  2216 000003A5 202020207769746820-             db `    with the following message:\n\n\0`
  2216 000003AE 74686520666F6C6C6F-
  2216 000003B7 77696E67206D657373-
  2216 000003C0 6167653A0A0A00     
  2217                                  fmt_scheme_error_part_3:
  2218 000003C7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2218 000003D0 210A0A00           

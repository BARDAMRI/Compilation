     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "a"
    84 00000007 0100000000000000        	dq 1
    85 0000000F 61                      	db 0x61
    86 00000010 03                      	db T_string	; "b"
    87 00000011 0100000000000000        	dq 1
    88 00000019 62                      	db 0x62
    89 0000001A 03                      	db T_string	; "c"
    90 0000001B 0100000000000000        	dq 1
    91 00000023 63                      	db 0x63
    92 00000024 21                      	db T_pair	; (c)
    93 00000025 [FFFFFFFFFFFFFFFF]-     	dq L_constants + -1, L_constants + 1
    93 0000002D [0100000000000000] 
    94 00000035 21                      	db T_pair	; (b c)
    95 00000036 [FFFFFFFFFFFFFFFF]-     	dq L_constants + -1, L_constants + 36
    95 0000003E [2400000000000000] 
    96 00000046 21                      	db T_pair	; (a b c)
    97 00000047 [FFFFFFFFFFFFFFFF]-     	dq L_constants + -1, L_constants + 53
    97 0000004F [3500000000000000] 
    98                                  
    99                                  section .bss
   100                                  free_var_0:	; location of null?
   101 00000000 ????????????????        	resq 1
   102                                  free_var_1:	; location of pair?
   103 00000008 ????????????????        	resq 1
   104                                  free_var_2:	; location of void?
   105 00000010 ????????????????        	resq 1
   106                                  free_var_3:	; location of char?
   107 00000018 ????????????????        	resq 1
   108                                  free_var_4:	; location of string?
   109 00000020 ????????????????        	resq 1
   110                                  free_var_5:	; location of symbol?
   111 00000028 ????????????????        	resq 1
   112                                  free_var_6:	; location of vector?
   113 00000030 ????????????????        	resq 1
   114                                  free_var_7:	; location of procedure?
   115 00000038 ????????????????        	resq 1
   116                                  free_var_8:	; location of real?
   117 00000040 ????????????????        	resq 1
   118                                  free_var_9:	; location of rational?
   119 00000048 ????????????????        	resq 1
   120                                  free_var_10:	; location of boolean?
   121 00000050 ????????????????        	resq 1
   122                                  free_var_11:	; location of number?
   123 00000058 ????????????????        	resq 1
   124                                  free_var_12:	; location of collection?
   125 00000060 ????????????????        	resq 1
   126                                  free_var_13:	; location of cons
   127 00000068 ????????????????        	resq 1
   128                                  free_var_14:	; location of display-sexpr
   129 00000070 ????????????????        	resq 1
   130                                  free_var_15:	; location of write-char
   131 00000078 ????????????????        	resq 1
   132                                  free_var_16:	; location of car
   133 00000080 ????????????????        	resq 1
   134                                  free_var_17:	; location of cdr
   135 00000088 ????????????????        	resq 1
   136                                  free_var_18:	; location of string-length
   137 00000090 ????????????????        	resq 1
   138                                  free_var_19:	; location of vector-length
   139 00000098 ????????????????        	resq 1
   140                                  free_var_20:	; location of real->integer
   141 000000A0 ????????????????        	resq 1
   142                                  free_var_21:	; location of exit
   143 000000A8 ????????????????        	resq 1
   144                                  free_var_22:	; location of integer->real
   145 000000B0 ????????????????        	resq 1
   146                                  free_var_23:	; location of rational->real
   147 000000B8 ????????????????        	resq 1
   148                                  free_var_24:	; location of char->integer
   149 000000C0 ????????????????        	resq 1
   150                                  free_var_25:	; location of integer->char
   151 000000C8 ????????????????        	resq 1
   152                                  free_var_26:	; location of trng
   153 000000D0 ????????????????        	resq 1
   154                                  free_var_27:	; location of zero?
   155 000000D8 ????????????????        	resq 1
   156                                  free_var_28:	; location of integer?
   157 000000E0 ????????????????        	resq 1
   158                                  free_var_29:	; location of __bin-apply
   159 000000E8 ????????????????        	resq 1
   160                                  free_var_30:	; location of __bin-add-rr
   161 000000F0 ????????????????        	resq 1
   162                                  free_var_31:	; location of __bin-sub-rr
   163 000000F8 ????????????????        	resq 1
   164                                  free_var_32:	; location of __bin-mul-rr
   165 00000100 ????????????????        	resq 1
   166                                  free_var_33:	; location of __bin-div-rr
   167 00000108 ????????????????        	resq 1
   168                                  free_var_34:	; location of __bin-add-qq
   169 00000110 ????????????????        	resq 1
   170                                  free_var_35:	; location of __bin-sub-qq
   171 00000118 ????????????????        	resq 1
   172                                  free_var_36:	; location of __bin-mul-qq
   173 00000120 ????????????????        	resq 1
   174                                  free_var_37:	; location of __bin-div-qq
   175 00000128 ????????????????        	resq 1
   176                                  free_var_38:	; location of error
   177 00000130 ????????????????        	resq 1
   178                                  free_var_39:	; location of __bin-less-than-rr
   179 00000138 ????????????????        	resq 1
   180                                  free_var_40:	; location of __bin-less-than-qq
   181 00000140 ????????????????        	resq 1
   182                                  free_var_41:	; location of __bin-equal-rr
   183 00000148 ????????????????        	resq 1
   184                                  free_var_42:	; location of __bin-equal-qq
   185 00000150 ????????????????        	resq 1
   186                                  free_var_43:	; location of quotient
   187 00000158 ????????????????        	resq 1
   188                                  free_var_44:	; location of remainder
   189 00000160 ????????????????        	resq 1
   190                                  free_var_45:	; location of set-car!
   191 00000168 ????????????????        	resq 1
   192                                  free_var_46:	; location of set-cdr!
   193 00000170 ????????????????        	resq 1
   194                                  free_var_47:	; location of string-ref
   195 00000178 ????????????????        	resq 1
   196                                  free_var_48:	; location of vector-ref
   197 00000180 ????????????????        	resq 1
   198                                  free_var_49:	; location of vector-set!
   199 00000188 ????????????????        	resq 1
   200                                  free_var_50:	; location of string-set!
   201 00000190 ????????????????        	resq 1
   202                                  free_var_51:	; location of make-vector
   203 00000198 ????????????????        	resq 1
   204                                  free_var_52:	; location of make-string
   205 000001A0 ????????????????        	resq 1
   206                                  free_var_53:	; location of numerator
   207 000001A8 ????????????????        	resq 1
   208                                  free_var_54:	; location of denominator
   209 000001B0 ????????????????        	resq 1
   210                                  free_var_55:	; location of eq?
   211 000001B8 ????????????????        	resq 1
   212                                  free_var_56:	; location of x
   213 000001C0 ????????????????        	resq 1
   214                                  
   215                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   216                                  global main
   217                                  section .text
   218                                  main:
   219 00000000 C8000000                        enter 0, 0
   220                                          
   221                                  	; building closure for null?
   222 00000004 48BF-                   	mov rdi, free_var_0
   222 00000006 [0000000000000000] 
   223 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   223 00000010 [400C000000000000] 
   224 00000018 E8FB0B0000              	call bind_primitive
   225                                  
   226                                  	; building closure for pair?
   227 0000001D 48BF-                   	mov rdi, free_var_1
   227 0000001F [0800000000000000] 
   228 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   228 00000029 [760C000000000000] 
   229 00000031 E8E20B0000              	call bind_primitive
   230                                  
   231                                  	; building closure for void?
   232 00000036 48BF-                   	mov rdi, free_var_2
   232 00000038 [1000000000000000] 
   233 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   233 00000042 [AC0C000000000000] 
   234 0000004A E8C90B0000              	call bind_primitive
   235                                  
   236                                  	; building closure for char?
   237 0000004F 48BF-                   	mov rdi, free_var_3
   237 00000051 [1800000000000000] 
   238 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   238 0000005B [E20C000000000000] 
   239 00000063 E8B00B0000              	call bind_primitive
   240                                  
   241                                  	; building closure for string?
   242 00000068 48BF-                   	mov rdi, free_var_4
   242 0000006A [2000000000000000] 
   243 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   243 00000074 [180D000000000000] 
   244 0000007C E8970B0000              	call bind_primitive
   245                                  
   246                                  	; building closure for symbol?
   247 00000081 48BF-                   	mov rdi, free_var_5
   247 00000083 [2800000000000000] 
   248 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   248 0000008D [4E0D000000000000] 
   249 00000095 E87E0B0000              	call bind_primitive
   250                                  
   251                                  	; building closure for vector?
   252 0000009A 48BF-                   	mov rdi, free_var_6
   252 0000009C [3000000000000000] 
   253 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   253 000000A6 [840D000000000000] 
   254 000000AE E8650B0000              	call bind_primitive
   255                                  
   256                                  	; building closure for procedure?
   257 000000B3 48BF-                   	mov rdi, free_var_7
   257 000000B5 [3800000000000000] 
   258 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   258 000000BF [BA0D000000000000] 
   259 000000C7 E84C0B0000              	call bind_primitive
   260                                  
   261                                  	; building closure for real?
   262 000000CC 48BF-                   	mov rdi, free_var_8
   262 000000CE [4000000000000000] 
   263 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   263 000000D8 [F00D000000000000] 
   264 000000E0 E8330B0000              	call bind_primitive
   265                                  
   266                                  	; building closure for rational?
   267 000000E5 48BF-                   	mov rdi, free_var_9
   267 000000E7 [4800000000000000] 
   268 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   268 000000F1 [260E000000000000] 
   269 000000F9 E81A0B0000              	call bind_primitive
   270                                  
   271                                  	; building closure for boolean?
   272 000000FE 48BF-                   	mov rdi, free_var_10
   272 00000100 [5000000000000000] 
   273 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   273 0000010A [5C0E000000000000] 
   274 00000112 E8010B0000              	call bind_primitive
   275                                  
   276                                  	; building closure for number?
   277 00000117 48BF-                   	mov rdi, free_var_11
   277 00000119 [5800000000000000] 
   278 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   278 00000123 [940E000000000000] 
   279 0000012B E8E80A0000              	call bind_primitive
   280                                  
   281                                  	; building closure for collection?
   282 00000130 48BF-                   	mov rdi, free_var_12
   282 00000132 [6000000000000000] 
   283 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   283 0000013C [CC0E000000000000] 
   284 00000144 E8CF0A0000              	call bind_primitive
   285                                  
   286                                  	; building closure for cons
   287 00000149 48BF-                   	mov rdi, free_var_13
   287 0000014B [6800000000000000] 
   288 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   288 00000155 [040F000000000000] 
   289 0000015D E8B60A0000              	call bind_primitive
   290                                  
   291                                  	; building closure for display-sexpr
   292 00000162 48BF-                   	mov rdi, free_var_14
   292 00000164 [7000000000000000] 
   293 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   293 0000016E [380F000000000000] 
   294 00000176 E89D0A0000              	call bind_primitive
   295                                  
   296                                  	; building closure for write-char
   297 0000017B 48BF-                   	mov rdi, free_var_15
   297 0000017D [7800000000000000] 
   298 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   298 00000187 [620F000000000000] 
   299 0000018F E8840A0000              	call bind_primitive
   300                                  
   301                                  	; building closure for car
   302 00000194 48BF-                   	mov rdi, free_var_16
   302 00000196 [8000000000000000] 
   303 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   303 000001A0 [B90F000000000000] 
   304 000001A8 E86B0A0000              	call bind_primitive
   305                                  
   306                                  	; building closure for cdr
   307 000001AD 48BF-                   	mov rdi, free_var_17
   307 000001AF [8800000000000000] 
   308 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   308 000001B9 [E10F000000000000] 
   309 000001C1 E8520A0000              	call bind_primitive
   310                                  
   311                                  	; building closure for string-length
   312 000001C6 48BF-                   	mov rdi, free_var_18
   312 000001C8 [9000000000000000] 
   313 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   313 000001D2 [0910000000000000] 
   314 000001DA E8390A0000              	call bind_primitive
   315                                  
   316                                  	; building closure for vector-length
   317 000001DF 48BF-                   	mov rdi, free_var_19
   317 000001E1 [9800000000000000] 
   318 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   318 000001EB [3610000000000000] 
   319 000001F3 E8200A0000              	call bind_primitive
   320                                  
   321                                  	; building closure for real->integer
   322 000001F8 48BF-                   	mov rdi, free_var_20
   322 000001FA [A000000000000000] 
   323 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   323 00000204 [6310000000000000] 
   324 0000020C E8070A0000              	call bind_primitive
   325                                  
   326                                  	; building closure for exit
   327 00000211 48BF-                   	mov rdi, free_var_21
   327 00000213 [A800000000000000] 
   328 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   328 0000021D [9610000000000000] 
   329 00000225 E8EE090000              	call bind_primitive
   330                                  
   331                                  	; building closure for integer->real
   332 0000022A 48BF-                   	mov rdi, free_var_22
   332 0000022C [B000000000000000] 
   333 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   333 00000236 [B310000000000000] 
   334 0000023E E8D5090000              	call bind_primitive
   335                                  
   336                                  	; building closure for rational->real
   337 00000243 48BF-                   	mov rdi, free_var_23
   337 00000245 [B800000000000000] 
   338 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   338 0000024F [F010000000000000] 
   339 00000257 E8BC090000              	call bind_primitive
   340                                  
   341                                  	; building closure for char->integer
   342 0000025C 48BF-                   	mov rdi, free_var_24
   342 0000025E [C000000000000000] 
   343 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   343 00000268 [2F11000000000000] 
   344 00000270 E8A3090000              	call bind_primitive
   345                                  
   346                                  	; building closure for integer->char
   347 00000275 48BF-                   	mov rdi, free_var_25
   347 00000277 [C800000000000000] 
   348 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   348 00000281 [6411000000000000] 
   349 00000289 E88A090000              	call bind_primitive
   350                                  
   351                                  	; building closure for trng
   352 0000028E 48BF-                   	mov rdi, free_var_26
   352 00000290 [D000000000000000] 
   353 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   353 0000029A [BE11000000000000] 
   354 000002A2 E871090000              	call bind_primitive
   355                                  
   356                                  	; building closure for zero?
   357 000002A7 48BF-                   	mov rdi, free_var_27
   357 000002A9 [D800000000000000] 
   358 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   358 000002B3 [E111000000000000] 
   359 000002BB E858090000              	call bind_primitive
   360                                  
   361                                  	; building closure for integer?
   362 000002C0 48BF-                   	mov rdi, free_var_28
   362 000002C2 [E000000000000000] 
   363 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   363 000002CC [3C12000000000000] 
   364 000002D4 E83F090000              	call bind_primitive
   365                                  
   366                                  	; building closure for __bin-apply
   367 000002D9 48BF-                   	mov rdi, free_var_29
   367 000002DB [E800000000000000] 
   368 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   368 000002E5 [400C000000000000] 
   369 000002ED E826090000              	call bind_primitive
   370                                  
   371                                  	; building closure for __bin-add-rr
   372 000002F2 48BF-                   	mov rdi, free_var_30
   372 000002F4 [F000000000000000] 
   373 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   373 000002FE [7912000000000000] 
   374 00000306 E80D090000              	call bind_primitive
   375                                  
   376                                  	; building closure for __bin-sub-rr
   377 0000030B 48BF-                   	mov rdi, free_var_31
   377 0000030D [F800000000000000] 
   378 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   378 00000317 [BD12000000000000] 
   379 0000031F E8F4080000              	call bind_primitive
   380                                  
   381                                  	; building closure for __bin-mul-rr
   382 00000324 48BF-                   	mov rdi, free_var_32
   382 00000326 [0001000000000000] 
   383 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   383 00000330 [0113000000000000] 
   384 00000338 E8DB080000              	call bind_primitive
   385                                  
   386                                  	; building closure for __bin-div-rr
   387 0000033D 48BF-                   	mov rdi, free_var_33
   387 0000033F [0801000000000000] 
   388 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   388 00000349 [4513000000000000] 
   389 00000351 E8C2080000              	call bind_primitive
   390                                  
   391                                  	; building closure for __bin-add-qq
   392 00000356 48BF-                   	mov rdi, free_var_34
   392 00000358 [1001000000000000] 
   393 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   393 00000362 [9713000000000000] 
   394 0000036A E8A9080000              	call bind_primitive
   395                                  
   396                                  	; building closure for __bin-sub-qq
   397 0000036F 48BF-                   	mov rdi, free_var_35
   397 00000371 [1801000000000000] 
   398 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   398 0000037B [FF13000000000000] 
   399 00000383 E890080000              	call bind_primitive
   400                                  
   401                                  	; building closure for __bin-mul-qq
   402 00000388 48BF-                   	mov rdi, free_var_36
   402 0000038A [2001000000000000] 
   403 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   403 00000394 [6714000000000000] 
   404 0000039C E877080000              	call bind_primitive
   405                                  
   406                                  	; building closure for __bin-div-qq
   407 000003A1 48BF-                   	mov rdi, free_var_37
   407 000003A3 [2801000000000000] 
   408 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   408 000003AD [BF14000000000000] 
   409 000003B5 E85E080000              	call bind_primitive
   410                                  
   411                                  	; building closure for error
   412 000003BA 48BF-                   	mov rdi, free_var_38
   412 000003BC [3001000000000000] 
   413 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   413 000003C6 [8D15000000000000] 
   414 000003CE E845080000              	call bind_primitive
   415                                  
   416                                  	; building closure for __bin-less-than-rr
   417 000003D3 48BF-                   	mov rdi, free_var_39
   417 000003D5 [3801000000000000] 
   418 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   418 000003DF [4416000000000000] 
   419 000003E7 E82C080000              	call bind_primitive
   420                                  
   421                                  	; building closure for __bin-less-than-qq
   422 000003EC 48BF-                   	mov rdi, free_var_40
   422 000003EE [4001000000000000] 
   423 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   423 000003F8 [9B16000000000000] 
   424 00000400 E813080000              	call bind_primitive
   425                                  
   426                                  	; building closure for __bin-equal-rr
   427 00000405 48BF-                   	mov rdi, free_var_41
   427 00000407 [4801000000000000] 
   428 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   428 00000411 [FE16000000000000] 
   429 00000419 E8FA070000              	call bind_primitive
   430                                  
   431                                  	; building closure for __bin-equal-qq
   432 0000041E 48BF-                   	mov rdi, free_var_42
   432 00000420 [5001000000000000] 
   433 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   433 0000042A [5517000000000000] 
   434 00000432 E8E1070000              	call bind_primitive
   435                                  
   436                                  	; building closure for quotient
   437 00000437 48BF-                   	mov rdi, free_var_43
   437 00000439 [5801000000000000] 
   438 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   438 00000443 [B817000000000000] 
   439 0000044B E8C8070000              	call bind_primitive
   440                                  
   441                                  	; building closure for remainder
   442 00000450 48BF-                   	mov rdi, free_var_44
   442 00000452 [6001000000000000] 
   443 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   443 0000045C [1E18000000000000] 
   444 00000464 E8AF070000              	call bind_primitive
   445                                  
   446                                  	; building closure for set-car!
   447 00000469 48BF-                   	mov rdi, free_var_45
   447 0000046B [6801000000000000] 
   448 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   448 00000475 [8418000000000000] 
   449 0000047D E896070000              	call bind_primitive
   450                                  
   451                                  	; building closure for set-cdr!
   452 00000482 48BF-                   	mov rdi, free_var_46
   452 00000484 [7001000000000000] 
   453 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   453 0000048E [BA18000000000000] 
   454 00000496 E87D070000              	call bind_primitive
   455                                  
   456                                  	; building closure for string-ref
   457 0000049B 48BF-                   	mov rdi, free_var_47
   457 0000049D [7801000000000000] 
   458 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   458 000004A7 [F018000000000000] 
   459 000004AF E864070000              	call bind_primitive
   460                                  
   461                                  	; building closure for vector-ref
   462 000004B4 48BF-                   	mov rdi, free_var_48
   462 000004B6 [8001000000000000] 
   463 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   463 000004C0 [5B19000000000000] 
   464 000004C8 E84B070000              	call bind_primitive
   465                                  
   466                                  	; building closure for vector-set!
   467 000004CD 48BF-                   	mov rdi, free_var_49
   467 000004CF [8801000000000000] 
   468 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   468 000004D9 [B719000000000000] 
   469 000004E1 E832070000              	call bind_primitive
   470                                  
   471                                  	; building closure for string-set!
   472 000004E6 48BF-                   	mov rdi, free_var_50
   472 000004E8 [9001000000000000] 
   473 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   473 000004F2 [211A000000000000] 
   474 000004FA E819070000              	call bind_primitive
   475                                  
   476                                  	; building closure for make-vector
   477 000004FF 48BF-                   	mov rdi, free_var_51
   477 00000501 [9801000000000000] 
   478 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   478 0000050B [961A000000000000] 
   479 00000513 E800070000              	call bind_primitive
   480                                  
   481                                  	; building closure for make-string
   482 00000518 48BF-                   	mov rdi, free_var_52
   482 0000051A [A001000000000000] 
   483 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   483 00000524 [001B000000000000] 
   484 0000052C E8E7060000              	call bind_primitive
   485                                  
   486                                  	; building closure for numerator
   487 00000531 48BF-                   	mov rdi, free_var_53
   487 00000533 [A801000000000000] 
   488 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   488 0000053D [721B000000000000] 
   489 00000545 E8CE060000              	call bind_primitive
   490                                  
   491                                  	; building closure for denominator
   492 0000054A 48BF-                   	mov rdi, free_var_54
   492 0000054C [B001000000000000] 
   493 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   493 00000556 [9F1B000000000000] 
   494 0000055E E8B5060000              	call bind_primitive
   495                                  
   496                                  	; building closure for eq?
   497 00000563 48BF-                   	mov rdi, free_var_55
   497 00000565 [B801000000000000] 
   498 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   498 0000056F [CC1B000000000000] 
   499 00000577 E89C060000              	call bind_primitive
   500                                  
   501                                  	; code generated for ScmConst
   502 0000057C 48B8-                   	mov rax, L_constants + 70
   502 0000057E [4600000000000000] 
   503 00000586 48890425[C0010000]      	mov qword [free_var_56], rax
   504 0000058E 48B8-                   	mov rax, sob_void
   504 00000590 [0000000000000000] 
   505                                  
   506 00000598 4889C7                  	mov rdi, rax
   507 0000059B E8F8000000              	call print_sexpr_if_not_void
   508                                  
   509                                  	; code generated for ScmVarGet' (Free))
   510 000005A0 488B0425[C0010000]      	mov rax, qword [free_var_56]
   511                                  
   512 000005A8 4889C7                  	mov rdi, rax
   513 000005AB E8E8000000              	call print_sexpr_if_not_void
   514                                  
   515 000005B0 48BF-                           mov rdi, fmt_memory_usage
   515 000005B2 [B600000000000000] 
   516 000005BA 488B3425[3D010000]              mov rsi, qword [top_of_memory]
   517 000005C2 4881EE[C8010000]                sub rsi, memory
   518 000005C9 B800000000                      mov rax, 0
   519                                  	ENTER
    33 000005CE C8000000            <1>  enter 0, 0
    34 000005D2 4883E4F0            <1>  and rsp, ~15
   520 000005D6 E8(00000000)                    call printf
   521                                  	LEAVE
    38 000005DB C9                  <1>  leave
   522 000005DC C9                      	leave
   523 000005DD C3                      	ret
   524                                  
   525                                  L_error_non_closure:
   526 000005DE 488B3C25[00000000]              mov rdi, qword [stderr]
   527 000005E6 48BE-                           mov rsi, fmt_non_closure
   527 000005E8 [ED00000000000000] 
   528 000005F0 B800000000                      mov rax, 0
   529                                  	ENTER
    33 000005F5 C8000000            <1>  enter 0, 0
    34 000005F9 4883E4F0            <1>  and rsp, ~15
   530 000005FD E8(00000000)                    call fprintf
   531                                  	LEAVE
    38 00000602 C9                  <1>  leave
   532 00000603 48C7C0FEFFFFFF                  mov rax, -2
   533 0000060A E8(00000000)                    call exit
   534                                  
   535                                  L_error_improper_list:
   536 0000060F 488B3C25[00000000]      	mov rdi, qword [stderr]
   537 00000617 48BE-                   	mov rsi, fmt_error_improper_list
   537 00000619 [1501000000000000] 
   538 00000621 B800000000              	mov rax, 0
   539                                  	ENTER
    33 00000626 C8000000            <1>  enter 0, 0
    34 0000062A 4883E4F0            <1>  and rsp, ~15
   540 0000062E E8(00000000)            	call fprintf
   541                                  	LEAVE
    38 00000633 C9                  <1>  leave
   542 00000634 48C7C0F9FFFFFF          	mov rax, -7
   543 0000063B E8(00000000)            	call exit
   544                                  
   545                                  L_error_incorrect_arity_simple:
   546 00000640 488B3C25[00000000]              mov rdi, qword [stderr]
   547 00000648 48BE-                           mov rsi, fmt_incorrect_arity_simple
   547 0000064A [5700000000000000] 
   548 00000652 EB12                            jmp L_error_incorrect_arity_common
   549                                  L_error_incorrect_arity_opt:
   550 00000654 488B3C25[00000000]              mov rdi, qword [stderr]
   551 0000065C 48BE-                           mov rsi, fmt_incorrect_arity_opt
   551 0000065E [8200000000000000] 
   552                                  L_error_incorrect_arity_common:
   553 00000666 5A                              pop rdx
   554 00000667 59                              pop rcx
   555 00000668 B800000000                      mov rax, 0
   556                                  	ENTER
    33 0000066D C8000000            <1>  enter 0, 0
    34 00000671 4883E4F0            <1>  and rsp, ~15
   557 00000675 E8(00000000)                    call fprintf
   558                                  	LEAVE
    38 0000067A C9                  <1>  leave
   559 0000067B 48C7C0FAFFFFFF                  mov rax, -6
   560 00000682 E8(00000000)                    call exit
   561                                  
   562                                  section .data
   563                                  fmt_incorrect_arity_simple:
   564 00000057 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   564 00000060 74656420256C642061-
   564 00000069 7267756D656E74732C-
   564 00000072 206275742067697665-
   564 0000007B 6E20256C640A00     
   565                                  fmt_incorrect_arity_opt:
   566 00000082 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   566 0000008B 746564206174206C65-
   566 00000094 61737420256C642061-
   566 0000009D 7267756D656E74732C-
   566 000000A6 206275742067697665-
   566 000000AF 6E20256C640A00     
   567                                  fmt_memory_usage:
   568 000000B6 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   568 000000BF 6420256C6420627974-
   568 000000C8 6573206F662064796E-
   568 000000D1 616D6963616C6C792D-
   568 000000DA 616C6C6F6361746564-
   568 000000E3 206D656D6F72790A0A-
   568 000000EC 00                 
   569                                  fmt_non_closure:
   570 000000ED 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   570 000000F6 7074696E6720746F20-
   570 000000FF 6170706C792061206E-
   570 00000108 6F6E2D636C6F737572-
   570 00000111 65210A00           
   571                                  fmt_error_improper_list:
   572 00000115 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   572 0000011E 7267756D656E742069-
   572 00000127 73206E6F7420612070-
   572 00000130 726F706572206C6973-
   572 00000139 74210A00           
   573                                  
   574                                  section .bss
   575                                  memory:
   576 000001C8 <res 40000000h>         	resb gbytes(1)
   577                                  
   578                                  section .data
   579                                  top_of_memory:
   580 0000013D [C801000000000000]              dq memory
   581                                  
   582                                  section .text
   583                                  malloc:
   584 00000687 488B0425[3D010000]              mov rax, qword [top_of_memory]
   585 0000068F 48013C25[3D010000]              add qword [top_of_memory], rdi
   586 00000697 C3                              ret
   587                                          
   588                                  print_sexpr_if_not_void:
   589 00000698 4881FF[00000000]        	cmp rdi, sob_void
   590 0000069F 7501                    	jne print_sexpr
   591 000006A1 C3                      	ret
   592                                  
   593                                  section .data
   594                                  fmt_void:
   595 00000145 233C766F69643E00        	db `#<void>\0`
   596                                  fmt_nil:
   597 0000014D 282900                  	db `()\0`
   598                                  fmt_boolean_false:
   599 00000150 236600                  	db `#f\0`
   600                                  fmt_boolean_true:
   601 00000153 237400                  	db `#t\0`
   602                                  fmt_char_backslash:
   603 00000156 235C5C00                	db `#\\\\\0`
   604                                  fmt_char_dquote:
   605 0000015A 235C2200                	db `#\\"\0`
   606                                  fmt_char_simple:
   607 0000015E 235C256300              	db `#\\%c\0`
   608                                  fmt_char_null:
   609 00000163 235C6E756C00            	db `#\\nul\0`
   610                                  fmt_char_bell:
   611 00000169 235C62656C6C00          	db `#\\bell\0`
   612                                  fmt_char_backspace:
   613 00000170 235C6261636B737061-     	db `#\\backspace\0`
   613 00000179 636500             
   614                                  fmt_char_tab:
   615 0000017C 235C74616200            	db `#\\tab\0`
   616                                  fmt_char_newline:
   617 00000182 235C6E65776C696E65-     	db `#\\newline\0`
   617 0000018B 00                 
   618                                  fmt_char_formfeed:
   619 0000018C 235C7061676500          	db `#\\page\0`
   620                                  fmt_char_return:
   621 00000193 235C72657475726E00      	db `#\\return\0`
   622                                  fmt_char_escape:
   623 0000019C 235C65736300            	db `#\\esc\0`
   624                                  fmt_char_space:
   625 000001A2 235C737061636500        	db `#\\space\0`
   626                                  fmt_char_hex:
   627 000001AA 235C782530325800        	db `#\\x%02X\0`
   628                                  fmt_closure:
   629 000001B2 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   629 000001BB 206174203078253038-
   629 000001C4 5820656E763D307825-
   629 000001CD 30385820636F64653D-
   629 000001D6 3078253038583E00   
   630                                  fmt_lparen:
   631 000001DE 2800                    	db `(\0`
   632                                  fmt_dotted_pair:
   633 000001E0 202E2000                	db ` . \0`
   634                                  fmt_rparen:
   635 000001E4 2900                    	db `)\0`
   636                                  fmt_space:
   637 000001E6 2000                    	db ` \0`
   638                                  fmt_empty_vector:
   639 000001E8 23282900                	db `#()\0`
   640                                  fmt_vector:
   641 000001EC 232800                  	db `#(\0`
   642                                  fmt_real:
   643 000001EF 256600                  	db `%f\0`
   644                                  fmt_fraction:
   645 000001F2 256C642F256C6400        	db `%ld/%ld\0`
   646                                  fmt_zero:
   647 000001FA 3000                    	db `0\0`
   648                                  fmt_int:
   649 000001FC 256C6400                	db `%ld\0`
   650                                  fmt_unknown_sexpr_error:
   651 00000200 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   651 00000209 6F723A20556E6B6E6F-
   651 00000212 776E2074797065206F-
   651 0000021B 662073657870722028-
   651 00000224 3078253032582920   
   652 0000022C 617420616464726573-     	db `at address 0x%08X\n\n\0`
   652 00000235 73203078253038580A-
   652 0000023E 0A00               
   653                                  fmt_dquote:
   654 00000240 2200                    	db `\"\0`
   655                                  fmt_string_char:
   656 00000242 256300                          db `%c\0`
   657                                  fmt_string_char_7:
   658 00000245 5C6100                          db `\\a\0`
   659                                  fmt_string_char_8:
   660 00000248 5C6200                          db `\\b\0`
   661                                  fmt_string_char_9:
   662 0000024B 5C7400                          db `\\t\0`
   663                                  fmt_string_char_10:
   664 0000024E 5C6E00                          db `\\n\0`
   665                                  fmt_string_char_11:
   666 00000251 5C7600                          db `\\v\0`
   667                                  fmt_string_char_12:
   668 00000254 5C6600                          db `\\f\0`
   669                                  fmt_string_char_13:
   670 00000257 5C7200                          db `\\r\0`
   671                                  fmt_string_char_34:
   672 0000025A 5C2200                          db `\\"\0`
   673                                  fmt_string_char_92:
   674 0000025D 5C5C00                          db `\\\\\0`
   675                                  fmt_string_char_hex:
   676 00000260 5C7825583B00                    db `\\x%X;\0`
   677                                  
   678                                  section .text
   679                                  
   680                                  print_sexpr:
   681                                  	ENTER
    33 000006A2 C8000000            <1>  enter 0, 0
    34 000006A6 4883E4F0            <1>  and rsp, ~15
   682 000006AA 8A07                    	mov al, byte [rdi]
   683 000006AC 3C00                    	cmp al, T_void
   684 000006AE 744D                    	je .Lvoid
   685 000006B0 3C01                    	cmp al, T_nil
   686 000006B2 7458                    	je .Lnil
   687 000006B4 3C09                    	cmp al, T_boolean_false
   688 000006B6 7463                    	je .Lboolean_false
   689 000006B8 3C0A                    	cmp al, T_boolean_true
   690 000006BA 746E                    	je .Lboolean_true
   691 000006BC 3C02                    	cmp al, T_char
   692 000006BE 7479                    	je .Lchar
   693 000006C0 3C04                    	cmp al, T_symbol
   694 000006C2 0F84BB010000            	je .Lsymbol
   695 000006C8 3C21                    	cmp al, T_pair
   696 000006CA 0F84D6010000            	je .Lpair
   697 000006D0 3C22                    	cmp al, T_vector
   698 000006D2 0F849F020000            	je .Lvector
   699 000006D8 3C05                    	cmp al, T_closure
   700 000006DA 0F8489010000            	je .Lclosure
   701 000006E0 3C12                    	cmp al, T_real
   702 000006E2 0F8430030000            	je .Lreal
   703 000006E8 3C11                    	cmp al, T_rational
   704 000006EA 0F8456030000            	je .Lrational
   705 000006F0 3C03                    	cmp al, T_string
   706 000006F2 0F848F030000            	je .Lstring
   707                                  
   708 000006F8 E9C7040000              	jmp .Lunknown_sexpr_type
   709                                  
   710                                  .Lvoid:
   711 000006FD 48BF-                   	mov rdi, fmt_void
   711 000006FF [4501000000000000] 
   712 00000707 E9F5040000              	jmp .Lemit
   713                                  
   714                                  .Lnil:
   715 0000070C 48BF-                   	mov rdi, fmt_nil
   715 0000070E [4D01000000000000] 
   716 00000716 E9E6040000              	jmp .Lemit
   717                                  
   718                                  .Lboolean_false:
   719 0000071B 48BF-                   	mov rdi, fmt_boolean_false
   719 0000071D [5001000000000000] 
   720 00000725 E9D7040000              	jmp .Lemit
   721                                  
   722                                  .Lboolean_true:
   723 0000072A 48BF-                   	mov rdi, fmt_boolean_true
   723 0000072C [5301000000000000] 
   724 00000734 E9C8040000              	jmp .Lemit
   725                                  
   726                                  .Lchar:
   727 00000739 8A4701                  	mov al, byte [rdi + 1]
   728 0000073C 3C20                    	cmp al, ' '
   729 0000073E 7E28                    	jle .Lchar_whitespace
   730 00000740 3C5C                    	cmp al, 92 		; backslash
   731 00000742 0F847C000000            	je .Lchar_backslash
   732 00000748 3C22                    	cmp al, '"'
   733 0000074A 0F8483000000            	je .Lchar_dquote
   734 00000750 4825FF000000            	and rax, 255
   735 00000756 48BF-                   	mov rdi, fmt_char_simple
   735 00000758 [5E01000000000000] 
   736 00000760 4889C6                  	mov rsi, rax
   737 00000763 E999040000              	jmp .Lemit
   738                                  
   739                                  .Lchar_whitespace:
   740 00000768 3C00                    	cmp al, 0
   741 0000076A 7476                    	je .Lchar_null
   742 0000076C 3C07                    	cmp al, 7
   743 0000076E 0F847D000000            	je .Lchar_bell
   744 00000774 3C08                    	cmp al, 8
   745 00000776 0F8484000000            	je .Lchar_backspace
   746 0000077C 3C09                    	cmp al, 9
   747 0000077E 0F848B000000            	je .Lchar_tab
   748 00000784 3C0A                    	cmp al, 10
   749 00000786 0F8492000000            	je .Lchar_newline
   750 0000078C 3C0C                    	cmp al, 12
   751 0000078E 0F8499000000            	je .Lchar_formfeed
   752 00000794 3C0D                    	cmp al, 13
   753 00000796 0F84A0000000            	je .Lchar_return
   754 0000079C 3C1B                    	cmp al, 27
   755 0000079E 0F84A7000000            	je .Lchar_escape
   756 000007A4 4825FF000000            	and rax, 255
   757 000007AA 3C20                    	cmp al, ' '
   758 000007AC 0F84A8000000            	je .Lchar_space
   759 000007B2 48BF-                   	mov rdi, fmt_char_hex
   759 000007B4 [AA01000000000000] 
   760 000007BC 4889C6                  	mov rsi, rax
   761 000007BF E93D040000              	jmp .Lemit	
   762                                  
   763                                  .Lchar_backslash:
   764 000007C4 48BF-                   	mov rdi, fmt_char_backslash
   764 000007C6 [5601000000000000] 
   765 000007CE E92E040000              	jmp .Lemit
   766                                  
   767                                  .Lchar_dquote:
   768 000007D3 48BF-                   	mov rdi, fmt_char_dquote
   768 000007D5 [5A01000000000000] 
   769 000007DD E91F040000              	jmp .Lemit
   770                                  
   771                                  .Lchar_null:
   772 000007E2 48BF-                   	mov rdi, fmt_char_null
   772 000007E4 [6301000000000000] 
   773 000007EC E910040000              	jmp .Lemit
   774                                  
   775                                  .Lchar_bell:
   776 000007F1 48BF-                   	mov rdi, fmt_char_bell
   776 000007F3 [6901000000000000] 
   777 000007FB E901040000              	jmp .Lemit
   778                                  
   779                                  .Lchar_backspace:
   780 00000800 48BF-                   	mov rdi, fmt_char_backspace
   780 00000802 [7001000000000000] 
   781 0000080A E9F2030000              	jmp .Lemit
   782                                  
   783                                  .Lchar_tab:
   784 0000080F 48BF-                   	mov rdi, fmt_char_tab
   784 00000811 [7C01000000000000] 
   785 00000819 E9E3030000              	jmp .Lemit
   786                                  
   787                                  .Lchar_newline:
   788 0000081E 48BF-                   	mov rdi, fmt_char_newline
   788 00000820 [8201000000000000] 
   789 00000828 E9D4030000              	jmp .Lemit
   790                                  
   791                                  .Lchar_formfeed:
   792 0000082D 48BF-                   	mov rdi, fmt_char_formfeed
   792 0000082F [8C01000000000000] 
   793 00000837 E9C5030000              	jmp .Lemit
   794                                  
   795                                  .Lchar_return:
   796 0000083C 48BF-                   	mov rdi, fmt_char_return
   796 0000083E [9301000000000000] 
   797 00000846 E9B6030000              	jmp .Lemit
   798                                  
   799                                  .Lchar_escape:
   800 0000084B 48BF-                   	mov rdi, fmt_char_escape
   800 0000084D [9C01000000000000] 
   801 00000855 E9A7030000              	jmp .Lemit
   802                                  
   803                                  .Lchar_space:
   804 0000085A 48BF-                   	mov rdi, fmt_char_space
   804 0000085C [A201000000000000] 
   805 00000864 E998030000              	jmp .Lemit
   806                                  
   807                                  .Lclosure:
   808 00000869 4889FE                  	mov rsi, qword rdi
   809 0000086C 48BF-                   	mov rdi, fmt_closure
   809 0000086E [B201000000000000] 
   810 00000876 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   811 0000087A 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   812 0000087E E97E030000              	jmp .Lemit
   813                                  
   814                                  .Lsymbol:
   815 00000883 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   816 00000887 BE01000000              	mov rsi, 1		 ; size = 1 byte
   817 0000088C 488B5701                	mov rdx, qword [rdi + 1] ; length
   818 00000890 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   819 00000894 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   820 0000089C E8(00000000)            	call fwrite
   821 000008A1 E970030000              	jmp .Lend
   822                                  	
   823                                  .Lpair:
   824 000008A6 57                      	push rdi
   825 000008A7 48BF-                   	mov rdi, fmt_lparen
   825 000008A9 [DE01000000000000] 
   826 000008B1 B800000000              	mov rax, 0
   827                                          ENTER
    33 000008B6 C8000000            <1>  enter 0, 0
    34 000008BA 4883E4F0            <1>  and rsp, ~15
   828 000008BE E8(00000000)            	call printf
   829                                          LEAVE
    38 000008C3 C9                  <1>  leave
   830 000008C4 488B3C24                	mov rdi, qword [rsp] 	; pair
   831 000008C8 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   832 000008CC E8D1FDFFFF              	call print_sexpr
   833 000008D1 5F                      	pop rdi 		; pair
   834 000008D2 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   835                                  .Lcdr:
   836 000008D6 8A07                    	mov al, byte [rdi]
   837 000008D8 3C01                    	cmp al, T_nil
   838 000008DA 7447                    	je .Lcdr_nil
   839 000008DC 3C21                    	cmp al, T_pair
   840 000008DE 7462                    	je .Lcdr_pair
   841 000008E0 57                      	push rdi
   842 000008E1 48BF-                   	mov rdi, fmt_dotted_pair
   842 000008E3 [E001000000000000] 
   843 000008EB B800000000              	mov rax, 0
   844                                  	ENTER
    33 000008F0 C8000000            <1>  enter 0, 0
    34 000008F4 4883E4F0            <1>  and rsp, ~15
   845 000008F8 E8(00000000)            	call printf
   846                                  	LEAVE
    38 000008FD C9                  <1>  leave
   847 000008FE 5F                      	pop rdi
   848 000008FF E89EFDFFFF              	call print_sexpr
   849 00000904 48BF-                   	mov rdi, fmt_rparen
   849 00000906 [E401000000000000] 
   850 0000090E B800000000              	mov rax, 0
   851                                  	ENTER
    33 00000913 C8000000            <1>  enter 0, 0
    34 00000917 4883E4F0            <1>  and rsp, ~15
   852 0000091B E8(00000000)            	call printf
   853                                  	LEAVE
    38 00000920 C9                  <1>  leave
   854                                  	LEAVE
    38 00000921 C9                  <1>  leave
   855 00000922 C3                      	ret
   856                                  
   857                                  .Lcdr_nil:
   858 00000923 48BF-                   	mov rdi, fmt_rparen
   858 00000925 [E401000000000000] 
   859 0000092D B800000000              	mov rax, 0
   860                                  	ENTER
    33 00000932 C8000000            <1>  enter 0, 0
    34 00000936 4883E4F0            <1>  and rsp, ~15
   861 0000093A E8(00000000)            	call printf
   862                                  	LEAVE
    38 0000093F C9                  <1>  leave
   863                                  	LEAVE
    38 00000940 C9                  <1>  leave
   864 00000941 C3                      	ret
   865                                  
   866                                  .Lcdr_pair:
   867 00000942 57                      	push rdi
   868 00000943 48BF-                   	mov rdi, fmt_space
   868 00000945 [E601000000000000] 
   869 0000094D B800000000              	mov rax, 0
   870                                  	ENTER
    33 00000952 C8000000            <1>  enter 0, 0
    34 00000956 4883E4F0            <1>  and rsp, ~15
   871 0000095A E8(00000000)            	call printf
   872                                  	LEAVE
    38 0000095F C9                  <1>  leave
   873 00000960 488B3C24                	mov rdi, qword [rsp]
   874 00000964 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   875 00000968 E835FDFFFF              	call print_sexpr
   876 0000096D 5F                      	pop rdi
   877 0000096E 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   878 00000972 E95FFFFFFF              	jmp .Lcdr
   879                                  
   880                                  .Lvector:
   881 00000977 488B4701                	mov rax, qword [rdi + 1] ; length
   882 0000097B 4883F800                	cmp rax, 0
   883 0000097F 0F8484000000            	je .Lvector_empty
   884 00000985 57                      	push rdi
   885 00000986 48BF-                   	mov rdi, fmt_vector
   885 00000988 [EC01000000000000] 
   886 00000990 B800000000              	mov rax, 0
   887                                  	ENTER
    33 00000995 C8000000            <1>  enter 0, 0
    34 00000999 4883E4F0            <1>  and rsp, ~15
   888 0000099D E8(00000000)            	call printf
   889                                  	LEAVE
    38 000009A2 C9                  <1>  leave
   890 000009A3 488B3C24                	mov rdi, qword [rsp]
   891 000009A7 FF7701                  	push qword [rdi + 1]
   892 000009AA 6A01                    	push 1
   893 000009AC 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   894 000009B0 E8EDFCFFFF              	call print_sexpr
   895                                  .Lvector_loop:
   896                                  	; [rsp] index
   897                                  	; [rsp + 8*1] limit
   898                                  	; [rsp + 8*2] vector
   899 000009B5 488B0424                	mov rax, qword [rsp]
   900 000009B9 483B442408              	cmp rax, qword [rsp + 8*1]
   901 000009BE 7436                    	je .Lvector_end
   902 000009C0 48BF-                   	mov rdi, fmt_space
   902 000009C2 [E601000000000000] 
   903 000009CA B800000000              	mov rax, 0
   904                                  	ENTER
    33 000009CF C8000000            <1>  enter 0, 0
    34 000009D3 4883E4F0            <1>  and rsp, ~15
   905 000009D7 E8(00000000)            	call printf
   906                                  	LEAVE
    38 000009DC C9                  <1>  leave
   907 000009DD 488B0424                	mov rax, qword [rsp]
   908 000009E1 488B5C2410              	mov rbx, qword [rsp + 8*2]
   909 000009E6 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   910 000009EB E8B2FCFFFF              	call print_sexpr
   911 000009F0 48FF0424                	inc qword [rsp]
   912 000009F4 EBBF                    	jmp .Lvector_loop
   913                                  
   914                                  .Lvector_end:
   915 000009F6 4883C418                	add rsp, 8*3
   916 000009FA 48BF-                   	mov rdi, fmt_rparen
   916 000009FC [E401000000000000] 
   917 00000A04 E9F8010000              	jmp .Lemit	
   918                                  
   919                                  .Lvector_empty:
   920 00000A09 48BF-                   	mov rdi, fmt_empty_vector
   920 00000A0B [E801000000000000] 
   921 00000A13 E9E9010000              	jmp .Lemit
   922                                  
   923                                  .Lreal:
   924 00000A18 FF7701                  	push qword [rdi + 1]
   925 00000A1B F20F100424              	movsd xmm0, qword [rsp]
   926 00000A20 4883C408                	add rsp, 8*1
   927 00000A24 48BF-                   	mov rdi, fmt_real
   927 00000A26 [EF01000000000000] 
   928 00000A2E B801000000              	mov rax, 1
   929                                  	ENTER
    33 00000A33 C8000000            <1>  enter 0, 0
    34 00000A37 4883E4F0            <1>  and rsp, ~15
   930 00000A3B E8(00000000)            	call printf
   931                                  	LEAVE
    38 00000A40 C9                  <1>  leave
   932 00000A41 E9D0010000              	jmp .Lend
   933                                  
   934                                  .Lrational:
   935 00000A46 488B7701                	mov rsi, qword [rdi + 1]
   936 00000A4A 488B5709                	mov rdx, qword [rdi + 1 + 8]
   937 00000A4E 4883FE00                	cmp rsi, 0
   938 00000A52 7415                    	je .Lrat_zero
   939 00000A54 4883FA01                	cmp rdx, 1
   940 00000A58 741E                    	je .Lrat_int
   941 00000A5A 48BF-                   	mov rdi, fmt_fraction
   941 00000A5C [F201000000000000] 
   942 00000A64 E998010000              	jmp .Lemit
   943                                  
   944                                  .Lrat_zero:
   945 00000A69 48BF-                   	mov rdi, fmt_zero
   945 00000A6B [FA01000000000000] 
   946 00000A73 E989010000              	jmp .Lemit
   947                                  
   948                                  .Lrat_int:
   949 00000A78 48BF-                   	mov rdi, fmt_int
   949 00000A7A [FC01000000000000] 
   950 00000A82 E97A010000              	jmp .Lemit
   951                                  
   952                                  .Lstring:
   953 00000A87 488D4709                	lea rax, [rdi + 1 + 8]
   954 00000A8B 50                      	push rax
   955 00000A8C FF7701                  	push qword [rdi + 1]
   956 00000A8F 48BF-                   	mov rdi, fmt_dquote
   956 00000A91 [4002000000000000] 
   957 00000A99 B800000000              	mov rax, 0
   958                                  	ENTER
    33 00000A9E C8000000            <1>  enter 0, 0
    34 00000AA2 4883E4F0            <1>  and rsp, ~15
   959 00000AA6 E8(00000000)            	call printf
   960                                  	LEAVE
    38 00000AAB C9                  <1>  leave
   961                                  .Lstring_loop:
   962                                  	; qword [rsp]: limit
   963                                  	; qword [rsp + 8*1]: char *
   964 00000AAC 48833C2400              	cmp qword [rsp], 0
   965 00000AB1 0F84FD000000            	je .Lstring_end
   966 00000AB7 488B442408              	mov rax, qword [rsp + 8*1]
   967 00000ABC 8A00                    	mov al, byte [rax]
   968 00000ABE 4825FF000000            	and rax, 255
   969 00000AC4 3C07                    	cmp al, 7
   970 00000AC6 7468                            je .Lstring_char_7
   971 00000AC8 3C08                            cmp al, 8
   972 00000ACA 7470                            je .Lstring_char_8
   973 00000ACC 3C09                            cmp al, 9
   974 00000ACE 7478                            je .Lstring_char_9
   975 00000AD0 3C0A                            cmp al, 10
   976 00000AD2 0F847C000000                    je .Lstring_char_10
   977 00000AD8 3C0B                            cmp al, 11
   978 00000ADA 0F8480000000                    je .Lstring_char_11
   979 00000AE0 3C0C                            cmp al, 12
   980 00000AE2 0F8484000000                    je .Lstring_char_12
   981 00000AE8 3C0D                            cmp al, 13
   982 00000AEA 0F8488000000                    je .Lstring_char_13
   983 00000AF0 3C22                            cmp al, 34
   984 00000AF2 0F848C000000                    je .Lstring_char_34
   985 00000AF8 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   987 00000AFA 3C20                            cmp al, ' '
   988 00000AFC 0F8CA0000000                    jl .Lstring_char_hex
   989 00000B02 48BF-                           mov rdi, fmt_string_char
   989 00000B04 [4202000000000000] 
   990 00000B0C 4889C6                          mov rsi, rax
   991                                  .Lstring_char_emit:
   992 00000B0F B800000000                      mov rax, 0
   993                                          ENTER
    33 00000B14 C8000000            <1>  enter 0, 0
    34 00000B18 4883E4F0            <1>  and rsp, ~15
   994 00000B1C E8(00000000)                    call printf
   995                                          LEAVE
    38 00000B21 C9                  <1>  leave
   996 00000B22 48FF0C24                        dec qword [rsp]
   997 00000B26 48FF442408                      inc qword [rsp + 8*1]
   998 00000B2B E97CFFFFFF                      jmp .Lstring_loop
   999                                  
  1000                                  .Lstring_char_7:
  1001 00000B30 48BF-                           mov rdi, fmt_string_char_7
  1001 00000B32 [4502000000000000] 
  1002 00000B3A EBD3                            jmp .Lstring_char_emit
  1003                                  
  1004                                  .Lstring_char_8:
  1005 00000B3C 48BF-                           mov rdi, fmt_string_char_8
  1005 00000B3E [4802000000000000] 
  1006 00000B46 EBC7                            jmp .Lstring_char_emit
  1007                                          
  1008                                  .Lstring_char_9:
  1009 00000B48 48BF-                           mov rdi, fmt_string_char_9
  1009 00000B4A [4B02000000000000] 
  1010 00000B52 EBBB                            jmp .Lstring_char_emit
  1011                                  
  1012                                  .Lstring_char_10:
  1013 00000B54 48BF-                           mov rdi, fmt_string_char_10
  1013 00000B56 [4E02000000000000] 
  1014 00000B5E EBAF                            jmp .Lstring_char_emit
  1015                                  
  1016                                  .Lstring_char_11:
  1017 00000B60 48BF-                           mov rdi, fmt_string_char_11
  1017 00000B62 [5102000000000000] 
  1018 00000B6A EBA3                            jmp .Lstring_char_emit
  1019                                  
  1020                                  .Lstring_char_12:
  1021 00000B6C 48BF-                           mov rdi, fmt_string_char_12
  1021 00000B6E [5402000000000000] 
  1022 00000B76 EB97                            jmp .Lstring_char_emit
  1023                                  
  1024                                  .Lstring_char_13:
  1025 00000B78 48BF-                           mov rdi, fmt_string_char_13
  1025 00000B7A [5702000000000000] 
  1026 00000B82 EB8B                            jmp .Lstring_char_emit
  1027                                  
  1028                                  .Lstring_char_34:
  1029 00000B84 48BF-                           mov rdi, fmt_string_char_34
  1029 00000B86 [5A02000000000000] 
  1030 00000B8E E97CFFFFFF                      jmp .Lstring_char_emit
  1031                                  
  1032                                  .Lstring_char_92:
  1033 00000B93 48BF-                           mov rdi, fmt_string_char_92
  1033 00000B95 [5D02000000000000] 
  1034 00000B9D E96DFFFFFF                      jmp .Lstring_char_emit
  1035                                  
  1036                                  .Lstring_char_hex:
  1037 00000BA2 48BF-                           mov rdi, fmt_string_char_hex
  1037 00000BA4 [6002000000000000] 
  1038 00000BAC 4889C6                          mov rsi, rax
  1039 00000BAF E95BFFFFFF                      jmp .Lstring_char_emit        
  1040                                  
  1041                                  .Lstring_end:
  1042 00000BB4 4883C410                	add rsp, 8 * 2
  1043 00000BB8 48BF-                   	mov rdi, fmt_dquote
  1043 00000BBA [4002000000000000] 
  1044 00000BC2 EB3D                    	jmp .Lemit
  1045                                  
  1046                                  .Lunknown_sexpr_type:
  1047 00000BC4 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1047 00000BC6 [0002000000000000] 
  1048 00000BCE 4825FF000000            	and rax, 255
  1049 00000BD4 4889C2                  	mov rdx, rax
  1050 00000BD7 4889F9                  	mov rcx, rdi
  1051 00000BDA 488B3C25[00000000]      	mov rdi, qword [stderr]
  1052 00000BE2 B800000000              	mov rax, 0
  1053                                  	ENTER
    33 00000BE7 C8000000            <1>  enter 0, 0
    34 00000BEB 4883E4F0            <1>  and rsp, ~15
  1054 00000BEF E8(00000000)            	call fprintf
  1055                                  	LEAVE
    38 00000BF4 C9                  <1>  leave
  1056 00000BF5 48C7C0FFFFFFFF          	mov rax, -1
  1057 00000BFC E8(00000000)            	call exit
  1058                                  
  1059                                  .Lemit:
  1060 00000C01 B800000000              	mov rax, 0
  1061                                  	ENTER
    33 00000C06 C8000000            <1>  enter 0, 0
    34 00000C0A 4883E4F0            <1>  and rsp, ~15
  1062 00000C0E E8(00000000)            	call printf
  1063                                  	LEAVE
    38 00000C13 C9                  <1>  leave
  1064 00000C14 EB00                    	jmp .Lend
  1065                                  
  1066                                  .Lend:
  1067                                  	LEAVE
    38 00000C16 C9                  <1>  leave
  1068 00000C17 C3                      	ret
  1069                                  
  1070                                  ;;; rdi: address of free variable
  1071                                  ;;; rsi: address of code-pointer
  1072                                  bind_primitive:
  1073                                          ENTER
    33 00000C18 C8000000            <1>  enter 0, 0
    34 00000C1C 4883E4F0            <1>  and rsp, ~15
  1074 00000C20 57                              push rdi
  1075 00000C21 BF11000000                      mov rdi, (1 + 8 + 8)
  1076 00000C26 E85CFAFFFF                      call malloc
  1077 00000C2B 5F                              pop rdi
  1078 00000C2C C60005                          mov byte [rax], T_closure
  1079 00000C2F 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1080 00000C37 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1081 00000C3B 488907                          mov qword [rdi], rax
  1082                                          LEAVE
    38 00000C3E C9                  <1>  leave
  1083 00000C3F C3                              ret
  1084                                  
  1085                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1086                                  L_code_ptr_bin_apply:
  1087                                  	
  1088                                  L_code_ptr_is_null:
  1089                                          ENTER
    33 00000C40 C8000000            <1>  enter 0, 0
    34 00000C44 4883E4F0            <1>  and rsp, ~15
  1090 00000C48 48837D1801                      cmp COUNT, 1
  1091 00000C4D 0F85A5100000                    jne L_error_arg_count_1
  1092 00000C53 488B4520                        mov rax, PARAM(0)
  1093 00000C57 803801                          cmp byte [rax], T_nil
  1094 00000C5A 750C                            jne .L_false
  1095 00000C5C 48B8-                           mov rax, sob_boolean_true
  1095 00000C5E [0300000000000000] 
  1096 00000C66 EB0A                            jmp .L_end
  1097                                  .L_false:
  1098 00000C68 48B8-                           mov rax, sob_boolean_false
  1098 00000C6A [0200000000000000] 
  1099                                  .L_end:
  1100                                          LEAVE
    38 00000C72 C9                  <1>  leave
  1101 00000C73 C21800                          ret AND_KILL_FRAME(1)
  1102                                  
  1103                                  L_code_ptr_is_pair:
  1104                                          ENTER
    33 00000C76 C8000000            <1>  enter 0, 0
    34 00000C7A 4883E4F0            <1>  and rsp, ~15
  1105 00000C7E 48837D1801                      cmp COUNT, 1
  1106 00000C83 0F856F100000                    jne L_error_arg_count_1
  1107 00000C89 488B4520                        mov rax, PARAM(0)
  1108 00000C8D 803821                          cmp byte [rax], T_pair
  1109 00000C90 750C                            jne .L_false
  1110 00000C92 48B8-                           mov rax, sob_boolean_true
  1110 00000C94 [0300000000000000] 
  1111 00000C9C EB0A                            jmp .L_end
  1112                                  .L_false:
  1113 00000C9E 48B8-                           mov rax, sob_boolean_false
  1113 00000CA0 [0200000000000000] 
  1114                                  .L_end:
  1115                                          LEAVE
    38 00000CA8 C9                  <1>  leave
  1116 00000CA9 C21800                          ret AND_KILL_FRAME(1)
  1117                                          
  1118                                  L_code_ptr_is_void:
  1119                                          ENTER
    33 00000CAC C8000000            <1>  enter 0, 0
    34 00000CB0 4883E4F0            <1>  and rsp, ~15
  1120 00000CB4 48837D1801                      cmp COUNT, 1
  1121 00000CB9 0F8539100000                    jne L_error_arg_count_1
  1122 00000CBF 488B4520                        mov rax, PARAM(0)
  1123 00000CC3 803800                          cmp byte [rax], T_void
  1124 00000CC6 750C                            jne .L_false
  1125 00000CC8 48B8-                           mov rax, sob_boolean_true
  1125 00000CCA [0300000000000000] 
  1126 00000CD2 EB0A                            jmp .L_end
  1127                                  .L_false:
  1128 00000CD4 48B8-                           mov rax, sob_boolean_false
  1128 00000CD6 [0200000000000000] 
  1129                                  .L_end:
  1130                                          LEAVE
    38 00000CDE C9                  <1>  leave
  1131 00000CDF C21800                          ret AND_KILL_FRAME(1)
  1132                                  
  1133                                  L_code_ptr_is_char:
  1134                                          ENTER
    33 00000CE2 C8000000            <1>  enter 0, 0
    34 00000CE6 4883E4F0            <1>  and rsp, ~15
  1135 00000CEA 48837D1801                      cmp COUNT, 1
  1136 00000CEF 0F8503100000                    jne L_error_arg_count_1
  1137 00000CF5 488B4520                        mov rax, PARAM(0)
  1138 00000CF9 803802                          cmp byte [rax], T_char
  1139 00000CFC 750C                            jne .L_false
  1140 00000CFE 48B8-                           mov rax, sob_boolean_true
  1140 00000D00 [0300000000000000] 
  1141 00000D08 EB0A                            jmp .L_end
  1142                                  .L_false:
  1143 00000D0A 48B8-                           mov rax, sob_boolean_false
  1143 00000D0C [0200000000000000] 
  1144                                  .L_end:
  1145                                          LEAVE
    38 00000D14 C9                  <1>  leave
  1146 00000D15 C21800                          ret AND_KILL_FRAME(1)
  1147                                  
  1148                                  L_code_ptr_is_string:
  1149                                          ENTER
    33 00000D18 C8000000            <1>  enter 0, 0
    34 00000D1C 4883E4F0            <1>  and rsp, ~15
  1150 00000D20 48837D1801                      cmp COUNT, 1
  1151 00000D25 0F85CD0F0000                    jne L_error_arg_count_1
  1152 00000D2B 488B4520                        mov rax, PARAM(0)
  1153 00000D2F 803803                          cmp byte [rax], T_string
  1154 00000D32 750C                            jne .L_false
  1155 00000D34 48B8-                           mov rax, sob_boolean_true
  1155 00000D36 [0300000000000000] 
  1156 00000D3E EB0A                            jmp .L_end
  1157                                  .L_false:
  1158 00000D40 48B8-                           mov rax, sob_boolean_false
  1158 00000D42 [0200000000000000] 
  1159                                  .L_end:
  1160                                          LEAVE
    38 00000D4A C9                  <1>  leave
  1161 00000D4B C21800                          ret AND_KILL_FRAME(1)
  1162                                  
  1163                                  L_code_ptr_is_symbol:
  1164                                          ENTER
    33 00000D4E C8000000            <1>  enter 0, 0
    34 00000D52 4883E4F0            <1>  and rsp, ~15
  1165 00000D56 48837D1801                      cmp COUNT, 1
  1166 00000D5B 0F85970F0000                    jne L_error_arg_count_1
  1167 00000D61 488B4520                        mov rax, PARAM(0)
  1168 00000D65 803804                          cmp byte [rax], T_symbol
  1169 00000D68 750C                            jne .L_false
  1170 00000D6A 48B8-                           mov rax, sob_boolean_true
  1170 00000D6C [0300000000000000] 
  1171 00000D74 EB0A                            jmp .L_end
  1172                                  .L_false:
  1173 00000D76 48B8-                           mov rax, sob_boolean_false
  1173 00000D78 [0200000000000000] 
  1174                                  .L_end:
  1175                                          LEAVE
    38 00000D80 C9                  <1>  leave
  1176 00000D81 C21800                          ret AND_KILL_FRAME(1)
  1177                                  
  1178                                  L_code_ptr_is_vector:
  1179                                          ENTER
    33 00000D84 C8000000            <1>  enter 0, 0
    34 00000D88 4883E4F0            <1>  and rsp, ~15
  1180 00000D8C 48837D1801                      cmp COUNT, 1
  1181 00000D91 0F85610F0000                    jne L_error_arg_count_1
  1182 00000D97 488B4520                        mov rax, PARAM(0)
  1183 00000D9B 803822                          cmp byte [rax], T_vector
  1184 00000D9E 750C                            jne .L_false
  1185 00000DA0 48B8-                           mov rax, sob_boolean_true
  1185 00000DA2 [0300000000000000] 
  1186 00000DAA EB0A                            jmp .L_end
  1187                                  .L_false:
  1188 00000DAC 48B8-                           mov rax, sob_boolean_false
  1188 00000DAE [0200000000000000] 
  1189                                  .L_end:
  1190                                          LEAVE
    38 00000DB6 C9                  <1>  leave
  1191 00000DB7 C21800                          ret AND_KILL_FRAME(1)
  1192                                  
  1193                                  L_code_ptr_is_closure:
  1194                                          ENTER
    33 00000DBA C8000000            <1>  enter 0, 0
    34 00000DBE 4883E4F0            <1>  and rsp, ~15
  1195 00000DC2 48837D1801                      cmp COUNT, 1
  1196 00000DC7 0F852B0F0000                    jne L_error_arg_count_1
  1197 00000DCD 488B4520                        mov rax, PARAM(0)
  1198 00000DD1 803805                          cmp byte [rax], T_closure
  1199 00000DD4 750C                            jne .L_false
  1200 00000DD6 48B8-                           mov rax, sob_boolean_true
  1200 00000DD8 [0300000000000000] 
  1201 00000DE0 EB0A                            jmp .L_end
  1202                                  .L_false:
  1203 00000DE2 48B8-                           mov rax, sob_boolean_false
  1203 00000DE4 [0200000000000000] 
  1204                                  .L_end:
  1205                                          LEAVE
    38 00000DEC C9                  <1>  leave
  1206 00000DED C21800                          ret AND_KILL_FRAME(1)
  1207                                  
  1208                                  L_code_ptr_is_real:
  1209                                          ENTER
    33 00000DF0 C8000000            <1>  enter 0, 0
    34 00000DF4 4883E4F0            <1>  and rsp, ~15
  1210 00000DF8 48837D1801                      cmp COUNT, 1
  1211 00000DFD 0F85F50E0000                    jne L_error_arg_count_1
  1212 00000E03 488B4520                        mov rax, PARAM(0)
  1213 00000E07 803812                          cmp byte [rax], T_real
  1214 00000E0A 750C                            jne .L_false
  1215 00000E0C 48B8-                           mov rax, sob_boolean_true
  1215 00000E0E [0300000000000000] 
  1216 00000E16 EB0A                            jmp .L_end
  1217                                  .L_false:
  1218 00000E18 48B8-                           mov rax, sob_boolean_false
  1218 00000E1A [0200000000000000] 
  1219                                  .L_end:
  1220                                          LEAVE
    38 00000E22 C9                  <1>  leave
  1221 00000E23 C21800                          ret AND_KILL_FRAME(1)
  1222                                  
  1223                                  L_code_ptr_is_rational:
  1224                                          ENTER
    33 00000E26 C8000000            <1>  enter 0, 0
    34 00000E2A 4883E4F0            <1>  and rsp, ~15
  1225 00000E2E 48837D1801                      cmp COUNT, 1
  1226 00000E33 0F85BF0E0000                    jne L_error_arg_count_1
  1227 00000E39 488B4520                        mov rax, PARAM(0)
  1228 00000E3D 803811                          cmp byte [rax], T_rational
  1229 00000E40 750C                            jne .L_false
  1230 00000E42 48B8-                           mov rax, sob_boolean_true
  1230 00000E44 [0300000000000000] 
  1231 00000E4C EB0A                            jmp .L_end
  1232                                  .L_false:
  1233 00000E4E 48B8-                           mov rax, sob_boolean_false
  1233 00000E50 [0200000000000000] 
  1234                                  .L_end:
  1235                                          LEAVE
    38 00000E58 C9                  <1>  leave
  1236 00000E59 C21800                          ret AND_KILL_FRAME(1)
  1237                                  
  1238                                  L_code_ptr_is_boolean:
  1239                                          ENTER
    33 00000E5C C8000000            <1>  enter 0, 0
    34 00000E60 4883E4F0            <1>  and rsp, ~15
  1240 00000E64 48837D1801                      cmp COUNT, 1
  1241 00000E69 0F85890E0000                    jne L_error_arg_count_1
  1242 00000E6F 488B4520                        mov rax, PARAM(0)
  1243 00000E73 8A18                            mov bl, byte [rax]
  1244 00000E75 80E308                          and bl, T_boolean
  1245 00000E78 740C                            je .L_false
  1246 00000E7A 48B8-                           mov rax, sob_boolean_true
  1246 00000E7C [0300000000000000] 
  1247 00000E84 EB0A                            jmp .L_end
  1248                                  .L_false:
  1249 00000E86 48B8-                           mov rax, sob_boolean_false
  1249 00000E88 [0200000000000000] 
  1250                                  .L_end:
  1251                                          LEAVE
    38 00000E90 C9                  <1>  leave
  1252 00000E91 C21800                          ret AND_KILL_FRAME(1)
  1253                                          
  1254                                  L_code_ptr_is_number:
  1255                                          ENTER
    33 00000E94 C8000000            <1>  enter 0, 0
    34 00000E98 4883E4F0            <1>  and rsp, ~15
  1256 00000E9C 48837D1801                      cmp COUNT, 1
  1257 00000EA1 0F85510E0000                    jne L_error_arg_count_1
  1258 00000EA7 488B4520                        mov rax, PARAM(0)
  1259 00000EAB 8A18                            mov bl, byte [rax]
  1260 00000EAD 80E310                          and bl, T_number
  1261 00000EB0 740C                            je .L_false
  1262 00000EB2 48B8-                           mov rax, sob_boolean_true
  1262 00000EB4 [0300000000000000] 
  1263 00000EBC EB0A                            jmp .L_end
  1264                                  .L_false:
  1265 00000EBE 48B8-                           mov rax, sob_boolean_false
  1265 00000EC0 [0200000000000000] 
  1266                                  .L_end:
  1267                                          LEAVE
    38 00000EC8 C9                  <1>  leave
  1268 00000EC9 C21800                          ret AND_KILL_FRAME(1)
  1269                                          
  1270                                  L_code_ptr_is_collection:
  1271                                          ENTER
    33 00000ECC C8000000            <1>  enter 0, 0
    34 00000ED0 4883E4F0            <1>  and rsp, ~15
  1272 00000ED4 48837D1801                      cmp COUNT, 1
  1273 00000ED9 0F85190E0000                    jne L_error_arg_count_1
  1274 00000EDF 488B4520                        mov rax, PARAM(0)
  1275 00000EE3 8A18                            mov bl, byte [rax]
  1276 00000EE5 80E320                          and bl, T_collection
  1277 00000EE8 740C                            je .L_false
  1278 00000EEA 48B8-                           mov rax, sob_boolean_true
  1278 00000EEC [0300000000000000] 
  1279 00000EF4 EB0A                            jmp .L_end
  1280                                  .L_false:
  1281 00000EF6 48B8-                           mov rax, sob_boolean_false
  1281 00000EF8 [0200000000000000] 
  1282                                  .L_end:
  1283                                          LEAVE
    38 00000F00 C9                  <1>  leave
  1284 00000F01 C21800                          ret AND_KILL_FRAME(1)
  1285                                  
  1286                                  L_code_ptr_cons:
  1287                                          ENTER
    33 00000F04 C8000000            <1>  enter 0, 0
    34 00000F08 4883E4F0            <1>  and rsp, ~15
  1288 00000F0C 48837D1802                      cmp COUNT, 2
  1289 00000F11 0F85160E0000                    jne L_error_arg_count_2
  1290 00000F17 BF11000000                      mov rdi, (1 + 8 + 8)
  1291 00000F1C E866F7FFFF                      call malloc
  1292 00000F21 C60021                          mov byte [rax], T_pair
  1293 00000F24 488B5D20                        mov rbx, PARAM(0)
  1294 00000F28 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1295 00000F2C 488B5D28                        mov rbx, PARAM(1)
  1296 00000F30 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1297                                          LEAVE
    38 00000F34 C9                  <1>  leave
  1298 00000F35 C22000                          ret AND_KILL_FRAME(2)
  1299                                  
  1300                                  L_code_ptr_display_sexpr:
  1301                                          ENTER
    33 00000F38 C8000000            <1>  enter 0, 0
    34 00000F3C 4883E4F0            <1>  and rsp, ~15
  1302 00000F40 48837D1801                      cmp COUNT, 1
  1303 00000F45 0F85AD0D0000                    jne L_error_arg_count_1
  1304 00000F4B 488B7D20                        mov rdi, PARAM(0)
  1305 00000F4F E84EF7FFFF                      call print_sexpr
  1306 00000F54 48B8-                           mov rax, sob_void
  1306 00000F56 [0000000000000000] 
  1307                                          LEAVE
    38 00000F5E C9                  <1>  leave
  1308 00000F5F C21800                          ret AND_KILL_FRAME(1)
  1309                                  
  1310                                  L_code_ptr_write_char:
  1311                                          ENTER
    33 00000F62 C8000000            <1>  enter 0, 0
    34 00000F66 4883E4F0            <1>  and rsp, ~15
  1312 00000F6A 48837D1801                      cmp COUNT, 1
  1313 00000F6F 0F85830D0000                    jne L_error_arg_count_1
  1314 00000F75 488B4520                        mov rax, PARAM(0)
  1315                                          assert_char(rax)
    42 00000F79 803802              <1>  cmp byte [%1], %2
    43 00000F7C 0F854A0E0000        <1>  jne L_error_incorrect_type
  1316 00000F82 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1317 00000F85 4825FF000000                    and rax, 255
  1318 00000F8B 48BF-                           mov rdi, fmt_char
  1318 00000F8D [6602000000000000] 
  1319 00000F95 4889C6                          mov rsi, rax
  1320 00000F98 B800000000                      mov rax, 0
  1321                                  	ENTER
    33 00000F9D C8000000            <1>  enter 0, 0
    34 00000FA1 4883E4F0            <1>  and rsp, ~15
  1322 00000FA5 E8(00000000)                    call printf
  1323                                  	LEAVE
    38 00000FAA C9                  <1>  leave
  1324 00000FAB 48B8-                           mov rax, sob_void
  1324 00000FAD [0000000000000000] 
  1325                                          LEAVE
    38 00000FB5 C9                  <1>  leave
  1326 00000FB6 C21800                          ret AND_KILL_FRAME(1)
  1327                                  
  1328                                  L_code_ptr_car:
  1329                                          ENTER
    33 00000FB9 C8000000            <1>  enter 0, 0
    34 00000FBD 4883E4F0            <1>  and rsp, ~15
  1330 00000FC1 48837D1801                      cmp COUNT, 1
  1331 00000FC6 0F852C0D0000                    jne L_error_arg_count_1
  1332 00000FCC 488B4520                        mov rax, PARAM(0)
  1333                                          assert_pair(rax)
    42 00000FD0 803821              <1>  cmp byte [%1], %2
    43 00000FD3 0F85F30D0000        <1>  jne L_error_incorrect_type
  1334 00000FD9 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1335                                          LEAVE
    38 00000FDD C9                  <1>  leave
  1336 00000FDE C21800                          ret AND_KILL_FRAME(1)
  1337                                          
  1338                                  L_code_ptr_cdr:
  1339                                          ENTER
    33 00000FE1 C8000000            <1>  enter 0, 0
    34 00000FE5 4883E4F0            <1>  and rsp, ~15
  1340 00000FE9 48837D1801                      cmp COUNT, 1
  1341 00000FEE 0F85040D0000                    jne L_error_arg_count_1
  1342 00000FF4 488B4520                        mov rax, PARAM(0)
  1343                                          assert_pair(rax)
    42 00000FF8 803821              <1>  cmp byte [%1], %2
    43 00000FFB 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1344 00001001 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1345                                          LEAVE
    38 00001005 C9                  <1>  leave
  1346 00001006 C21800                          ret AND_KILL_FRAME(1)
  1347                                          
  1348                                  L_code_ptr_string_length:
  1349                                          ENTER
    33 00001009 C8000000            <1>  enter 0, 0
    34 0000100D 4883E4F0            <1>  and rsp, ~15
  1350 00001011 48837D1801                      cmp COUNT, 1
  1351 00001016 0F85DC0C0000                    jne L_error_arg_count_1
  1352 0000101C 488B4520                        mov rax, PARAM(0)
  1353                                          assert_string(rax)
    42 00001020 803803              <1>  cmp byte [%1], %2
    43 00001023 0F85A30D0000        <1>  jne L_error_incorrect_type
  1354 00001029 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1355 0000102D E83A0C0000                      call make_integer
  1356                                          LEAVE
    38 00001032 C9                  <1>  leave
  1357 00001033 C21800                          ret AND_KILL_FRAME(1)
  1358                                  
  1359                                  L_code_ptr_vector_length:
  1360                                          ENTER
    33 00001036 C8000000            <1>  enter 0, 0
    34 0000103A 4883E4F0            <1>  and rsp, ~15
  1361 0000103E 48837D1801                      cmp COUNT, 1
  1362 00001043 0F85AF0C0000                    jne L_error_arg_count_1
  1363 00001049 488B4520                        mov rax, PARAM(0)
  1364                                          assert_vector(rax)
    42 0000104D 803822              <1>  cmp byte [%1], %2
    43 00001050 0F85760D0000        <1>  jne L_error_incorrect_type
  1365 00001056 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1366 0000105A E80D0C0000                      call make_integer
  1367                                          LEAVE
    38 0000105F C9                  <1>  leave
  1368 00001060 C21800                          ret AND_KILL_FRAME(1)
  1369                                  
  1370                                  L_code_ptr_real_to_integer:
  1371                                          ENTER
    33 00001063 C8000000            <1>  enter 0, 0
    34 00001067 4883E4F0            <1>  and rsp, ~15
  1372 0000106B 48837D1801                      cmp COUNT, 1
  1373 00001070 0F85820C0000                    jne L_error_arg_count_1
  1374 00001076 488B5D20                        mov rbx, PARAM(0)
  1375                                          assert_real(rbx)
    42 0000107A 803B12              <1>  cmp byte [%1], %2
    43 0000107D 0F85490D0000        <1>  jne L_error_incorrect_type
  1376 00001083 F20F104301                      movsd xmm0, qword [rbx + 1]
  1377 00001088 F2480F2CF8                      cvttsd2si rdi, xmm0
  1378 0000108D E8DA0B0000                      call make_integer
  1379                                          LEAVE
    38 00001092 C9                  <1>  leave
  1380 00001093 C21800                          ret AND_KILL_FRAME(1)
  1381                                  
  1382                                  L_code_ptr_exit:
  1383                                          ENTER
    33 00001096 C8000000            <1>  enter 0, 0
    34 0000109A 4883E4F0            <1>  and rsp, ~15
  1384 0000109E 48837D1800                      cmp COUNT, 0
  1385 000010A3 0F851A0C0000                    jne L_error_arg_count_0
  1386 000010A9 B800000000                      mov rax, 0
  1387 000010AE E8(00000000)                    call exit
  1388                                  
  1389                                  L_code_ptr_integer_to_real:
  1390                                          ENTER
    33 000010B3 C8000000            <1>  enter 0, 0
    34 000010B7 4883E4F0            <1>  and rsp, ~15
  1391 000010BB 48837D1801                      cmp COUNT, 1
  1392 000010C0 0F85320C0000                    jne L_error_arg_count_1
  1393 000010C6 488B4520                        mov rax, PARAM(0)
  1394                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010CA 803811              <2>  cmp byte [%1], %2
    43 000010CD 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000010D3 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010D8 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1395 000010DE FF7001                          push qword [rax + 1]
  1396 000010E1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1397 000010E7 E8640B0000                      call make_real
  1398                                          LEAVE
    38 000010EC C9                  <1>  leave
  1399 000010ED C21800                          ret AND_KILL_FRAME(1)
  1400                                  
  1401                                  L_code_ptr_rational_to_real:
  1402                                          ENTER
    33 000010F0 C8000000            <1>  enter 0, 0
    34 000010F4 4883E4F0            <1>  and rsp, ~15
  1403 000010F8 48837D1801                      cmp COUNT, 1
  1404 000010FD 0F85F50B0000                    jne L_error_arg_count_1
  1405 00001103 488B4520                        mov rax, PARAM(0)
  1406                                          assert_rational(rax)
    42 00001107 803811              <1>  cmp byte [%1], %2
    43 0000110A 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1407 00001110 FF7001                          push qword [rax + 1]
  1408 00001113 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1409 00001119 FF7009                          push qword [rax + 1 + 8]
  1410 0000111C F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1411 00001122 F20F5EC1                        divsd xmm0, xmm1
  1412 00001126 E8250B0000                      call make_real
  1413                                          LEAVE
    38 0000112B C9                  <1>  leave
  1414 0000112C C21800                          ret AND_KILL_FRAME(1)
  1415                                  
  1416                                  L_code_ptr_char_to_integer:
  1417                                          ENTER
    33 0000112F C8000000            <1>  enter 0, 0
    34 00001133 4883E4F0            <1>  and rsp, ~15
  1418 00001137 48837D1801                      cmp COUNT, 1
  1419 0000113C 0F85B60B0000                    jne L_error_arg_count_1
  1420 00001142 488B4520                        mov rax, PARAM(0)
  1421                                          assert_char(rax)
    42 00001146 803802              <1>  cmp byte [%1], %2
    43 00001149 0F857D0C0000        <1>  jne L_error_incorrect_type
  1422 0000114F 8A4001                          mov al, byte [rax + 1]
  1423 00001152 4825FF000000                    and rax, 255
  1424 00001158 4889C7                          mov rdi, rax
  1425 0000115B E80C0B0000                      call make_integer
  1426                                          LEAVE
    38 00001160 C9                  <1>  leave
  1427 00001161 C21800                          ret AND_KILL_FRAME(1)
  1428                                  
  1429                                  L_code_ptr_integer_to_char:
  1430                                          ENTER
    33 00001164 C8000000            <1>  enter 0, 0
    34 00001168 4883E4F0            <1>  and rsp, ~15
  1431 0000116C 48837D1801                      cmp COUNT, 1
  1432 00001171 0F85810B0000                    jne L_error_arg_count_1
  1433 00001177 488B4520                        mov rax, PARAM(0)
  1434                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000117B 803811              <2>  cmp byte [%1], %2
    43 0000117E 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001184 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001189 0F853D0C0000        <1>  jne L_error_incorrect_type
  1435 0000118F 488B5801                        mov rbx, qword [rax + 1]
  1436 00001193 4883FB00                        cmp rbx, 0
  1437 00001197 0F8EF50A0000                    jle L_error_integer_range
  1438 0000119D 4881FB00010000                  cmp rbx, 256
  1439 000011A4 0F8DE80A0000                    jge L_error_integer_range
  1440 000011AA BF02000000                      mov rdi, (1 + 1)
  1441 000011AF E8D3F4FFFF                      call malloc
  1442 000011B4 C60002                          mov byte [rax], T_char
  1443 000011B7 885801                          mov byte [rax + 1], bl
  1444                                          LEAVE
    38 000011BA C9                  <1>  leave
  1445 000011BB C21800                          ret AND_KILL_FRAME(1)
  1446                                  
  1447                                  L_code_ptr_trng:
  1448                                          ENTER
    33 000011BE C8000000            <1>  enter 0, 0
    34 000011C2 4883E4F0            <1>  and rsp, ~15
  1449 000011C6 48837D1800                      cmp COUNT, 0
  1450 000011CB 0F85F20A0000                    jne L_error_arg_count_0
  1451 000011D1 480FC7F7                        rdrand rdi
  1452 000011D5 48D1EF                          shr rdi, 1
  1453 000011D8 E88F0A0000                      call make_integer
  1454                                          LEAVE
    38 000011DD C9                  <1>  leave
  1455 000011DE C21000                          ret AND_KILL_FRAME(0)
  1456                                  
  1457                                  L_code_ptr_is_zero:
  1458                                          ENTER
    33 000011E1 C8000000            <1>  enter 0, 0
    34 000011E5 4883E4F0            <1>  and rsp, ~15
  1459 000011E9 48837D1801                      cmp COUNT, 1
  1460 000011EE 0F85040B0000                    jne L_error_arg_count_1
  1461 000011F4 488B4520                        mov rax, PARAM(0)
  1462 000011F8 803811                          cmp byte [rax], T_rational
  1463 000011FB 740A                            je .L_rational
  1464 000011FD 803812                          cmp byte [rax], T_real
  1465 00001200 740E                            je .L_real
  1466 00001202 E9C50B0000                      jmp L_error_incorrect_type
  1467                                  .L_rational:
  1468 00001207 4883780100                      cmp qword [rax + 1], 0
  1469 0000120C 7420                            je .L_zero
  1470 0000120E EB12                            jmp .L_not_zero
  1471                                  .L_real:
  1472 00001210 660FEFC0                        pxor xmm0, xmm0
  1473 00001214 FF7001                          push qword [rax + 1]
  1474 00001217 F20F100C24                      movsd xmm1, qword [rsp]
  1475 0000121C 660F2EC1                        ucomisd xmm0, xmm1
  1476 00001220 740C                            je .L_zero
  1477                                  .L_not_zero:
  1478 00001222 48B8-                           mov rax, sob_boolean_false
  1478 00001224 [0200000000000000] 
  1479 0000122C EB0A                            jmp .L_end
  1480                                  .L_zero:
  1481 0000122E 48B8-                           mov rax, sob_boolean_true
  1481 00001230 [0300000000000000] 
  1482                                  .L_end:
  1483                                          LEAVE
    38 00001238 C9                  <1>  leave
  1484 00001239 C21800                          ret AND_KILL_FRAME(1)
  1485                                  
  1486                                  L_code_ptr_is_integer:
  1487                                          ENTER
    33 0000123C C8000000            <1>  enter 0, 0
    34 00001240 4883E4F0            <1>  and rsp, ~15
  1488 00001244 48837D1801                      cmp COUNT, 1
  1489 00001249 0F85A90A0000                    jne L_error_arg_count_1
  1490 0000124F 488B4520                        mov rax, PARAM(0)
  1491 00001253 803811                          cmp byte [rax], T_rational
  1492 00001256 7513                            jne .L_false
  1493 00001258 4883780901                      cmp qword [rax + 1 + 8], 1
  1494 0000125D 750C                            jne .L_false
  1495 0000125F 48B8-                           mov rax, sob_boolean_true
  1495 00001261 [0300000000000000] 
  1496 00001269 EB0A                            jmp .L_exit
  1497                                  .L_false:
  1498 0000126B 48B8-                           mov rax, sob_boolean_false
  1498 0000126D [0200000000000000] 
  1499                                  .L_exit:
  1500                                          LEAVE
    38 00001275 C9                  <1>  leave
  1501 00001276 C21800                          ret AND_KILL_FRAME(1)
  1502                                  
  1503                                  L_code_ptr_raw_bin_add_rr:
  1504                                          ENTER
    33 00001279 C8000000            <1>  enter 0, 0
    34 0000127D 4883E4F0            <1>  and rsp, ~15
  1505 00001281 48837D1802                      cmp COUNT, 2
  1506 00001286 0F85A10A0000                    jne L_error_arg_count_2
  1507 0000128C 488B5D20                        mov rbx, PARAM(0)
  1508                                          assert_real(rbx)
    42 00001290 803B12              <1>  cmp byte [%1], %2
    43 00001293 0F85330B0000        <1>  jne L_error_incorrect_type
  1509 00001299 488B4D28                        mov rcx, PARAM(1)
  1510                                          assert_real(rcx)
    42 0000129D 803912              <1>  cmp byte [%1], %2
    43 000012A0 0F85260B0000        <1>  jne L_error_incorrect_type
  1511 000012A6 F20F104301                      movsd xmm0, qword [rbx + 1]
  1512 000012AB F20F104901                      movsd xmm1, qword [rcx + 1]
  1513 000012B0 F20F58C1                        addsd xmm0, xmm1
  1514 000012B4 E897090000                      call make_real
  1515                                          LEAVE
    38 000012B9 C9                  <1>  leave
  1516 000012BA C22000                          ret AND_KILL_FRAME(2)
  1517                                  
  1518                                  L_code_ptr_raw_bin_sub_rr:
  1519                                          ENTER
    33 000012BD C8000000            <1>  enter 0, 0
    34 000012C1 4883E4F0            <1>  and rsp, ~15
  1520 000012C5 48837D1802                      cmp COUNT, 2
  1521 000012CA 0F855D0A0000                    jne L_error_arg_count_2
  1522 000012D0 488B5D20                        mov rbx, PARAM(0)
  1523                                          assert_real(rbx)
    42 000012D4 803B12              <1>  cmp byte [%1], %2
    43 000012D7 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1524 000012DD 488B4D28                        mov rcx, PARAM(1)
  1525                                          assert_real(rcx)
    42 000012E1 803912              <1>  cmp byte [%1], %2
    43 000012E4 0F85E20A0000        <1>  jne L_error_incorrect_type
  1526 000012EA F20F104301                      movsd xmm0, qword [rbx + 1]
  1527 000012EF F20F104901                      movsd xmm1, qword [rcx + 1]
  1528 000012F4 F20F5CC1                        subsd xmm0, xmm1
  1529 000012F8 E853090000                      call make_real
  1530                                          LEAVE
    38 000012FD C9                  <1>  leave
  1531 000012FE C22000                          ret AND_KILL_FRAME(2)
  1532                                  
  1533                                  L_code_ptr_raw_bin_mul_rr:
  1534                                          ENTER
    33 00001301 C8000000            <1>  enter 0, 0
    34 00001305 4883E4F0            <1>  and rsp, ~15
  1535 00001309 48837D1802                      cmp COUNT, 2
  1536 0000130E 0F85190A0000                    jne L_error_arg_count_2
  1537 00001314 488B5D20                        mov rbx, PARAM(0)
  1538                                          assert_real(rbx)
    42 00001318 803B12              <1>  cmp byte [%1], %2
    43 0000131B 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1539 00001321 488B4D28                        mov rcx, PARAM(1)
  1540                                          assert_real(rcx)
    42 00001325 803912              <1>  cmp byte [%1], %2
    43 00001328 0F859E0A0000        <1>  jne L_error_incorrect_type
  1541 0000132E F20F104301                      movsd xmm0, qword [rbx + 1]
  1542 00001333 F20F104901                      movsd xmm1, qword [rcx + 1]
  1543 00001338 F20F59C1                        mulsd xmm0, xmm1
  1544 0000133C E80F090000                      call make_real
  1545                                          LEAVE
    38 00001341 C9                  <1>  leave
  1546 00001342 C22000                          ret AND_KILL_FRAME(2)
  1547                                  
  1548                                  L_code_ptr_raw_bin_div_rr:
  1549                                          ENTER
    33 00001345 C8000000            <1>  enter 0, 0
    34 00001349 4883E4F0            <1>  and rsp, ~15
  1550 0000134D 48837D1802                      cmp COUNT, 2
  1551 00001352 0F85D5090000                    jne L_error_arg_count_2
  1552 00001358 488B5D20                        mov rbx, PARAM(0)
  1553                                          assert_real(rbx)
    42 0000135C 803B12              <1>  cmp byte [%1], %2
    43 0000135F 0F85670A0000        <1>  jne L_error_incorrect_type
  1554 00001365 488B4D28                        mov rcx, PARAM(1)
  1555                                          assert_real(rcx)
    42 00001369 803912              <1>  cmp byte [%1], %2
    43 0000136C 0F855A0A0000        <1>  jne L_error_incorrect_type
  1556 00001372 F20F104301                      movsd xmm0, qword [rbx + 1]
  1557 00001377 F20F104901                      movsd xmm1, qword [rcx + 1]
  1558 0000137C 660FEFD2                        pxor xmm2, xmm2
  1559 00001380 660F2ECA                        ucomisd xmm1, xmm2
  1560 00001384 0F84730A0000                    je L_error_division_by_zero
  1561 0000138A F20F5EC1                        divsd xmm0, xmm1
  1562 0000138E E8BD080000                      call make_real
  1563                                          LEAVE
    38 00001393 C9                  <1>  leave
  1564 00001394 C22000                          ret AND_KILL_FRAME(2)
  1565                                  
  1566                                  L_code_ptr_raw_bin_add_qq:
  1567                                          ENTER
    33 00001397 C8000000            <1>  enter 0, 0
    34 0000139B 4883E4F0            <1>  and rsp, ~15
  1568 0000139F 48837D1802                      cmp COUNT, 2
  1569 000013A4 0F8583090000                    jne L_error_arg_count_2
  1570 000013AA 4C8B4520                        mov r8, PARAM(0)
  1571                                          assert_rational(r8)
    42 000013AE 41803811            <1>  cmp byte [%1], %2
    43 000013B2 0F85140A0000        <1>  jne L_error_incorrect_type
  1572 000013B8 4C8B4D28                        mov r9, PARAM(1)
  1573                                          assert_rational(r9)
    42 000013BC 41803911            <1>  cmp byte [%1], %2
    43 000013C0 0F85060A0000        <1>  jne L_error_incorrect_type
  1574 000013C6 498B4001                        mov rax, qword [r8 + 1] ; num1
  1575 000013CA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1576 000013CE 4899                            cqo
  1577 000013D0 48F7EB                          imul rbx
  1578 000013D3 4889C6                          mov rsi, rax
  1579 000013D6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1580 000013DA 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1581 000013DE 4899                            cqo
  1582 000013E0 48F7EB                          imul rbx
  1583 000013E3 4801C6                          add rsi, rax
  1584 000013E6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1585 000013EA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1586 000013EE 4899                            cqo
  1587 000013F0 48F7EB                          imul rbx
  1588 000013F3 4889C7                          mov rdi, rax
  1589 000013F6 E827010000                      call normalize_rational
  1590                                          LEAVE
    38 000013FB C9                  <1>  leave
  1591 000013FC C22000                          ret AND_KILL_FRAME(2)
  1592                                  
  1593                                  L_code_ptr_raw_bin_sub_qq:
  1594                                          ENTER
    33 000013FF C8000000            <1>  enter 0, 0
    34 00001403 4883E4F0            <1>  and rsp, ~15
  1595 00001407 48837D1802                      cmp COUNT, 2
  1596 0000140C 0F851B090000                    jne L_error_arg_count_2
  1597 00001412 4C8B4520                        mov r8, PARAM(0)
  1598                                          assert_rational(r8)
    42 00001416 41803811            <1>  cmp byte [%1], %2
    43 0000141A 0F85AC090000        <1>  jne L_error_incorrect_type
  1599 00001420 4C8B4D28                        mov r9, PARAM(1)
  1600                                          assert_rational(r9)
    42 00001424 41803911            <1>  cmp byte [%1], %2
    43 00001428 0F859E090000        <1>  jne L_error_incorrect_type
  1601 0000142E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1602 00001432 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1603 00001436 4899                            cqo
  1604 00001438 48F7EB                          imul rbx
  1605 0000143B 4889C6                          mov rsi, rax
  1606 0000143E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1607 00001442 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1608 00001446 4899                            cqo
  1609 00001448 48F7EB                          imul rbx
  1610 0000144B 4829C6                          sub rsi, rax
  1611 0000144E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1612 00001452 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1613 00001456 4899                            cqo
  1614 00001458 48F7EB                          imul rbx
  1615 0000145B 4889C7                          mov rdi, rax
  1616 0000145E E8BF000000                      call normalize_rational
  1617                                          LEAVE
    38 00001463 C9                  <1>  leave
  1618 00001464 C22000                          ret AND_KILL_FRAME(2)
  1619                                  
  1620                                  L_code_ptr_raw_bin_mul_qq:
  1621                                          ENTER
    33 00001467 C8000000            <1>  enter 0, 0
    34 0000146B 4883E4F0            <1>  and rsp, ~15
  1622 0000146F 48837D1802                      cmp COUNT, 2
  1623 00001474 0F85B3080000                    jne L_error_arg_count_2
  1624 0000147A 4C8B4520                        mov r8, PARAM(0)
  1625                                          assert_rational(r8)
    42 0000147E 41803811            <1>  cmp byte [%1], %2
    43 00001482 0F8544090000        <1>  jne L_error_incorrect_type
  1626 00001488 4C8B4D28                        mov r9, PARAM(1)
  1627                                          assert_rational(r9)
    42 0000148C 41803911            <1>  cmp byte [%1], %2
    43 00001490 0F8536090000        <1>  jne L_error_incorrect_type
  1628 00001496 498B4001                        mov rax, qword [r8 + 1] ; num1
  1629 0000149A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1630 0000149E 4899                            cqo
  1631 000014A0 48F7EB                          imul rbx
  1632 000014A3 4889C6                          mov rsi, rax
  1633 000014A6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1634 000014AA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1635 000014AE 4899                            cqo
  1636 000014B0 48F7EB                          imul rbx
  1637 000014B3 4889C7                          mov rdi, rax
  1638 000014B6 E867000000                      call normalize_rational
  1639                                          LEAVE
    38 000014BB C9                  <1>  leave
  1640 000014BC C22000                          ret AND_KILL_FRAME(2)
  1641                                          
  1642                                  L_code_ptr_raw_bin_div_qq:
  1643                                          ENTER
    33 000014BF C8000000            <1>  enter 0, 0
    34 000014C3 4883E4F0            <1>  and rsp, ~15
  1644 000014C7 48837D1802                      cmp COUNT, 2
  1645 000014CC 0F855B080000                    jne L_error_arg_count_2
  1646 000014D2 4C8B4520                        mov r8, PARAM(0)
  1647                                          assert_rational(r8)
    42 000014D6 41803811            <1>  cmp byte [%1], %2
    43 000014DA 0F85EC080000        <1>  jne L_error_incorrect_type
  1648 000014E0 4C8B4D28                        mov r9, PARAM(1)
  1649                                          assert_rational(r9)
    42 000014E4 41803911            <1>  cmp byte [%1], %2
    43 000014E8 0F85DE080000        <1>  jne L_error_incorrect_type
  1650 000014EE 4983790100                      cmp qword [r9 + 1], 0
  1651 000014F3 0F8404090000                    je L_error_division_by_zero
  1652 000014F9 498B4001                        mov rax, qword [r8 + 1] ; num1
  1653 000014FD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1654 00001501 4899                            cqo
  1655 00001503 48F7EB                          imul rbx
  1656 00001506 4889C6                          mov rsi, rax
  1657 00001509 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1658 0000150D 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1659 00001511 4899                            cqo
  1660 00001513 48F7EB                          imul rbx
  1661 00001516 4889C7                          mov rdi, rax
  1662 00001519 E804000000                      call normalize_rational
  1663                                          LEAVE
    38 0000151E C9                  <1>  leave
  1664 0000151F C22000                          ret AND_KILL_FRAME(2)
  1665                                          
  1666                                  normalize_rational:
  1667 00001522 56                              push rsi
  1668 00001523 57                              push rdi
  1669 00001524 E839000000                      call gcd
  1670 00001529 4889C3                          mov rbx, rax
  1671 0000152C 58                              pop rax
  1672 0000152D 4899                            cqo
  1673 0000152F 48F7FB                          idiv rbx
  1674 00001532 4989C0                          mov r8, rax
  1675 00001535 58                              pop rax
  1676 00001536 4899                            cqo
  1677 00001538 48F7FB                          idiv rbx
  1678 0000153B 4989C1                          mov r9, rax
  1679 0000153E BF11000000                      mov rdi, (1 + 8 + 8)
  1680 00001543 E83FF1FFFF                      call malloc
  1681 00001548 C60011                          mov byte [rax], T_rational
  1682 0000154B 4C894801                        mov qword [rax + 1], r9
  1683 0000154F 4C894009                        mov qword [rax + 1 + 8], r8
  1684 00001553 C3                              ret
  1685                                  
  1686                                  iabs:
  1687 00001554 4889F8                          mov rax, rdi
  1688 00001557 4883F800                        cmp rax, 0
  1689 0000155B 7C01                            jl .Lneg
  1690 0000155D C3                              ret
  1691                                  .Lneg:
  1692 0000155E 48F7D8                          neg rax
  1693 00001561 C3                              ret
  1694                                  
  1695                                  gcd:
  1696 00001562 E8EDFFFFFF                      call iabs
  1697 00001567 4889C3                          mov rbx, rax
  1698 0000156A 4889F7                          mov rdi, rsi
  1699 0000156D E8E2FFFFFF                      call iabs
  1700 00001572 4883F800                        cmp rax, 0
  1701 00001576 7502                            jne .L0
  1702 00001578 4893                            xchg rax, rbx
  1703                                  .L0:
  1704 0000157A 4883FB00                        cmp rbx, 0
  1705 0000157E 740C                            je .L1
  1706 00001580 4899                            cqo
  1707 00001582 48F7F3                          div rbx
  1708 00001585 4889D0                          mov rax, rdx
  1709 00001588 4893                            xchg rax, rbx
  1710 0000158A EBEE                            jmp .L0
  1711                                  .L1:
  1712 0000158C C3                              ret
  1713                                  
  1714                                  L_code_ptr_error:
  1715                                          ENTER
    33 0000158D C8000000            <1>  enter 0, 0
    34 00001591 4883E4F0            <1>  and rsp, ~15
  1716 00001595 48837D1802                      cmp COUNT, 2
  1717 0000159A 0F858D070000                    jne L_error_arg_count_2
  1718 000015A0 488B7520                        mov rsi, PARAM(0)
  1719                                          assert_symbol(rsi)
    42 000015A4 803E04              <1>  cmp byte [%1], %2
    43 000015A7 0F851F080000        <1>  jne L_error_incorrect_type
  1720 000015AD 488B7528                        mov rsi, PARAM(1)
  1721                                          assert_string(rsi)
    42 000015B1 803E03              <1>  cmp byte [%1], %2
    43 000015B4 0F8512080000        <1>  jne L_error_incorrect_type
  1722 000015BA 48BF-                           mov rdi, fmt_scheme_error_part_1
  1722 000015BC [9E03000000000000] 
  1723 000015C4 B800000000                      mov rax, 0
  1724                                  	ENTER
    33 000015C9 C8000000            <1>  enter 0, 0
    34 000015CD 4883E4F0            <1>  and rsp, ~15
  1725 000015D1 E8(00000000)                    call printf
  1726                                  	LEAVE
    38 000015D6 C9                  <1>  leave
  1727 000015D7 488B7D20                        mov rdi, PARAM(0)
  1728 000015DB E8C2F0FFFF                      call print_sexpr
  1729 000015E0 48BF-                           mov rdi, fmt_scheme_error_part_2
  1729 000015E2 [B203000000000000] 
  1730 000015EA B800000000                      mov rax, 0
  1731                                  	ENTER
    33 000015EF C8000000            <1>  enter 0, 0
    34 000015F3 4883E4F0            <1>  and rsp, ~15
  1732 000015F7 E8(00000000)                    call printf
  1733                                  	LEAVE
    38 000015FC C9                  <1>  leave
  1734 000015FD 488B4528                        mov rax, PARAM(1)       ; sob_string
  1735 00001601 BE01000000                      mov rsi, 1              ; size = 1 byte
  1736 00001606 488B5001                        mov rdx, qword [rax + 1] ; length
  1737 0000160A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1738 0000160E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1739 00001616 E8(00000000)                    call fwrite
  1740 0000161B 48BF-                           mov rdi, fmt_scheme_error_part_3
  1740 0000161D [F403000000000000] 
  1741 00001625 B800000000                      mov rax, 0
  1742                                  	ENTER
    33 0000162A C8000000            <1>  enter 0, 0
    34 0000162E 4883E4F0            <1>  and rsp, ~15
  1743 00001632 E8(00000000)                    call printf
  1744                                  	LEAVE
    38 00001637 C9                  <1>  leave
  1745 00001638 48C7C0F7FFFFFF                  mov rax, -9
  1746 0000163F E8(00000000)                    call exit
  1747                                  
  1748                                  L_code_ptr_raw_less_than_rr:
  1749                                          ENTER
    33 00001644 C8000000            <1>  enter 0, 0
    34 00001648 4883E4F0            <1>  and rsp, ~15
  1750 0000164C 48837D1802                      cmp COUNT, 2
  1751 00001651 0F85D6060000                    jne L_error_arg_count_2
  1752 00001657 488B7520                        mov rsi, PARAM(0)
  1753                                          assert_real(rsi)
    42 0000165B 803E12              <1>  cmp byte [%1], %2
    43 0000165E 0F8568070000        <1>  jne L_error_incorrect_type
  1754 00001664 488B7D28                        mov rdi, PARAM(1)
  1755                                          assert_real(rdi)
    42 00001668 803F12              <1>  cmp byte [%1], %2
    43 0000166B 0F855B070000        <1>  jne L_error_incorrect_type
  1756 00001671 F20F104601                      movsd xmm0, qword [rsi + 1]
  1757 00001676 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1758 0000167B 660F2FC1                        comisd xmm0, xmm1
  1759 0000167F 730C                            jae .L_false
  1760 00001681 48B8-                           mov rax, sob_boolean_true
  1760 00001683 [0300000000000000] 
  1761 0000168B EB0A                            jmp .L_exit
  1762                                  .L_false:
  1763 0000168D 48B8-                           mov rax, sob_boolean_false
  1763 0000168F [0200000000000000] 
  1764                                  .L_exit:
  1765                                          LEAVE
    38 00001697 C9                  <1>  leave
  1766 00001698 C22000                          ret AND_KILL_FRAME(2)
  1767                                          
  1768                                  L_code_ptr_raw_less_than_qq:
  1769                                          ENTER
    33 0000169B C8000000            <1>  enter 0, 0
    34 0000169F 4883E4F0            <1>  and rsp, ~15
  1770 000016A3 48837D1802                      cmp COUNT, 2
  1771 000016A8 0F857F060000                    jne L_error_arg_count_2
  1772 000016AE 488B7520                        mov rsi, PARAM(0)
  1773                                          assert_rational(rsi)
    42 000016B2 803E11              <1>  cmp byte [%1], %2
    43 000016B5 0F8511070000        <1>  jne L_error_incorrect_type
  1774 000016BB 488B7D28                        mov rdi, PARAM(1)
  1775                                          assert_rational(rdi)
    42 000016BF 803F11              <1>  cmp byte [%1], %2
    43 000016C2 0F8504070000        <1>  jne L_error_incorrect_type
  1776 000016C8 488B4601                        mov rax, qword [rsi + 1] ; num1
  1777 000016CC 4899                            cqo
  1778 000016CE 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1779 000016D2 4889C1                          mov rcx, rax
  1780 000016D5 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1781 000016D9 4899                            cqo
  1782 000016DB 48F76F01                        imul qword [rdi + 1]          ; num2
  1783 000016DF 4829C1                          sub rcx, rax
  1784 000016E2 7D0C                            jge .L_false
  1785 000016E4 48B8-                           mov rax, sob_boolean_true
  1785 000016E6 [0300000000000000] 
  1786 000016EE EB0A                            jmp .L_exit
  1787                                  .L_false:
  1788 000016F0 48B8-                           mov rax, sob_boolean_false
  1788 000016F2 [0200000000000000] 
  1789                                  .L_exit:
  1790                                          LEAVE
    38 000016FA C9                  <1>  leave
  1791 000016FB C22000                          ret AND_KILL_FRAME(2)
  1792                                  
  1793                                  L_code_ptr_raw_equal_rr:
  1794                                          ENTER
    33 000016FE C8000000            <1>  enter 0, 0
    34 00001702 4883E4F0            <1>  and rsp, ~15
  1795 00001706 48837D1802                      cmp COUNT, 2
  1796 0000170B 0F851C060000                    jne L_error_arg_count_2
  1797 00001711 488B7520                        mov rsi, PARAM(0)
  1798                                          assert_real(rsi)
    42 00001715 803E12              <1>  cmp byte [%1], %2
    43 00001718 0F85AE060000        <1>  jne L_error_incorrect_type
  1799 0000171E 488B7D28                        mov rdi, PARAM(1)
  1800                                          assert_real(rdi)
    42 00001722 803F12              <1>  cmp byte [%1], %2
    43 00001725 0F85A1060000        <1>  jne L_error_incorrect_type
  1801 0000172B F20F104601                      movsd xmm0, qword [rsi + 1]
  1802 00001730 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1803 00001735 660F2FC1                        comisd xmm0, xmm1
  1804 00001739 750C                            jne .L_false
  1805 0000173B 48B8-                           mov rax, sob_boolean_true
  1805 0000173D [0300000000000000] 
  1806 00001745 EB0A                            jmp .L_exit
  1807                                  .L_false:
  1808 00001747 48B8-                           mov rax, sob_boolean_false
  1808 00001749 [0200000000000000] 
  1809                                  .L_exit:
  1810                                          LEAVE
    38 00001751 C9                  <1>  leave
  1811 00001752 C22000                          ret AND_KILL_FRAME(2)
  1812                                          
  1813                                  L_code_ptr_raw_equal_qq:
  1814                                          ENTER
    33 00001755 C8000000            <1>  enter 0, 0
    34 00001759 4883E4F0            <1>  and rsp, ~15
  1815 0000175D 48837D1802                      cmp COUNT, 2
  1816 00001762 0F85C5050000                    jne L_error_arg_count_2
  1817 00001768 488B7520                        mov rsi, PARAM(0)
  1818                                          assert_rational(rsi)
    42 0000176C 803E11              <1>  cmp byte [%1], %2
    43 0000176F 0F8557060000        <1>  jne L_error_incorrect_type
  1819 00001775 488B7D28                        mov rdi, PARAM(1)
  1820                                          assert_rational(rdi)
    42 00001779 803F11              <1>  cmp byte [%1], %2
    43 0000177C 0F854A060000        <1>  jne L_error_incorrect_type
  1821 00001782 488B4601                        mov rax, qword [rsi + 1] ; num1
  1822 00001786 4899                            cqo
  1823 00001788 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1824 0000178C 4889C1                          mov rcx, rax
  1825 0000178F 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1826 00001793 4899                            cqo
  1827 00001795 48F76F01                        imul qword [rdi + 1]          ; num2
  1828 00001799 4829C1                          sub rcx, rax
  1829 0000179C 750C                            jne .L_false
  1830 0000179E 48B8-                           mov rax, sob_boolean_true
  1830 000017A0 [0300000000000000] 
  1831 000017A8 EB0A                            jmp .L_exit
  1832                                  .L_false:
  1833 000017AA 48B8-                           mov rax, sob_boolean_false
  1833 000017AC [0200000000000000] 
  1834                                  .L_exit:
  1835                                          LEAVE
    38 000017B4 C9                  <1>  leave
  1836 000017B5 C22000                          ret AND_KILL_FRAME(2)
  1837                                  
  1838                                  L_code_ptr_quotient:
  1839                                          ENTER
    33 000017B8 C8000000            <1>  enter 0, 0
    34 000017BC 4883E4F0            <1>  and rsp, ~15
  1840 000017C0 48837D1802                      cmp COUNT, 2
  1841 000017C5 0F8562050000                    jne L_error_arg_count_2
  1842 000017CB 488B7520                        mov rsi, PARAM(0)
  1843                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000017CF 803E11              <2>  cmp byte [%1], %2
    43 000017D2 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000017D8 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017DD 0F85E9050000        <1>  jne L_error_incorrect_type
  1844 000017E3 488B7D28                        mov rdi, PARAM(1)
  1845                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000017E7 803F11              <2>  cmp byte [%1], %2
    43 000017EA 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000017F0 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017F5 0F85D1050000        <1>  jne L_error_incorrect_type
  1846 000017FB 488B4601                        mov rax, qword [rsi + 1]
  1847 000017FF 488B5F01                        mov rbx, qword [rdi + 1]
  1848 00001803 4883FB00                        cmp rbx, 0
  1849 00001807 0F84F0050000                    je L_error_division_by_zero
  1850 0000180D 4899                            cqo
  1851 0000180F 48F7FB                          idiv rbx
  1852 00001812 4889C7                          mov rdi, rax
  1853 00001815 E852040000                      call make_integer
  1854                                          LEAVE
    38 0000181A C9                  <1>  leave
  1855 0000181B C22000                          ret AND_KILL_FRAME(2)
  1856                                          
  1857                                  L_code_ptr_remainder:
  1858                                          ENTER
    33 0000181E C8000000            <1>  enter 0, 0
    34 00001822 4883E4F0            <1>  and rsp, ~15
  1859 00001826 48837D1802                      cmp COUNT, 2
  1860 0000182B 0F85FC040000                    jne L_error_arg_count_2
  1861 00001831 488B7520                        mov rsi, PARAM(0)
  1862                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001835 803E11              <2>  cmp byte [%1], %2
    43 00001838 0F858E050000        <2>  jne L_error_incorrect_type
    48 0000183E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001843 0F8583050000        <1>  jne L_error_incorrect_type
  1863 00001849 488B7D28                        mov rdi, PARAM(1)
  1864                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000184D 803F11              <2>  cmp byte [%1], %2
    43 00001850 0F8576050000        <2>  jne L_error_incorrect_type
    48 00001856 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000185B 0F856B050000        <1>  jne L_error_incorrect_type
  1865 00001861 488B4601                        mov rax, qword [rsi + 1]
  1866 00001865 488B5F01                        mov rbx, qword [rdi + 1]
  1867 00001869 4883FB00                        cmp rbx, 0
  1868 0000186D 0F848A050000                    je L_error_division_by_zero
  1869 00001873 4899                            cqo
  1870 00001875 48F7FB                          idiv rbx
  1871 00001878 4889D7                          mov rdi, rdx
  1872 0000187B E8EC030000                      call make_integer
  1873                                          LEAVE
    38 00001880 C9                  <1>  leave
  1874 00001881 C22000                          ret AND_KILL_FRAME(2)
  1875                                  
  1876                                  L_code_ptr_set_car:
  1877                                          ENTER
    33 00001884 C8000000            <1>  enter 0, 0
    34 00001888 4883E4F0            <1>  and rsp, ~15
  1878 0000188C 48837D1802                      cmp COUNT, 2
  1879 00001891 0F8596040000                    jne L_error_arg_count_2
  1880 00001897 488B4520                        mov rax, PARAM(0)
  1881                                          assert_pair(rax)
    42 0000189B 803821              <1>  cmp byte [%1], %2
    43 0000189E 0F8528050000        <1>  jne L_error_incorrect_type
  1882 000018A4 488B5D28                        mov rbx, PARAM(1)
  1883 000018A8 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1884 000018AC 48B8-                           mov rax, sob_void
  1884 000018AE [0000000000000000] 
  1885                                          LEAVE
    38 000018B6 C9                  <1>  leave
  1886 000018B7 C22000                          ret AND_KILL_FRAME(2)
  1887                                  
  1888                                  L_code_ptr_set_cdr:
  1889                                          ENTER
    33 000018BA C8000000            <1>  enter 0, 0
    34 000018BE 4883E4F0            <1>  and rsp, ~15
  1890 000018C2 48837D1802                      cmp COUNT, 2
  1891 000018C7 0F8560040000                    jne L_error_arg_count_2
  1892 000018CD 488B4520                        mov rax, PARAM(0)
  1893                                          assert_pair(rax)
    42 000018D1 803821              <1>  cmp byte [%1], %2
    43 000018D4 0F85F2040000        <1>  jne L_error_incorrect_type
  1894 000018DA 488B5D28                        mov rbx, PARAM(1)
  1895 000018DE 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1896 000018E2 48B8-                           mov rax, sob_void
  1896 000018E4 [0000000000000000] 
  1897                                          LEAVE
    38 000018EC C9                  <1>  leave
  1898 000018ED C22000                          ret AND_KILL_FRAME(2)
  1899                                  
  1900                                  L_code_ptr_string_ref:
  1901                                          ENTER
    33 000018F0 C8000000            <1>  enter 0, 0
    34 000018F4 4883E4F0            <1>  and rsp, ~15
  1902 000018F8 48837D1802                      cmp COUNT, 2
  1903 000018FD 0F852A040000                    jne L_error_arg_count_2
  1904 00001903 488B7D20                        mov rdi, PARAM(0)
  1905                                          assert_string(rdi)
    42 00001907 803F03              <1>  cmp byte [%1], %2
    43 0000190A 0F85BC040000        <1>  jne L_error_incorrect_type
  1906 00001910 488B7528                        mov rsi, PARAM(1)
  1907                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001914 803E11              <2>  cmp byte [%1], %2
    43 00001917 0F85AF040000        <2>  jne L_error_incorrect_type
    48 0000191D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001922 0F85A4040000        <1>  jne L_error_incorrect_type
  1908 00001928 488B5701                        mov rdx, qword [rdi + 1]
  1909 0000192C 488B4E01                        mov rcx, qword [rsi + 1]
  1910 00001930 4839D1                          cmp rcx, rdx
  1911 00001933 0F8D59030000                    jge L_error_integer_range
  1912 00001939 4883F900                        cmp rcx, 0
  1913 0000193D 0F8C4F030000                    jl L_error_integer_range
  1914 00001943 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1915 00001947 BF02000000                      mov rdi, 2
  1916 0000194C E836EDFFFF                      call malloc
  1917 00001951 C60002                          mov byte [rax], T_char
  1918 00001954 885801                          mov byte [rax + 1], bl
  1919                                          LEAVE
    38 00001957 C9                  <1>  leave
  1920 00001958 C22000                          ret AND_KILL_FRAME(2)
  1921                                  
  1922                                  L_code_ptr_vector_ref:
  1923                                          ENTER
    33 0000195B C8000000            <1>  enter 0, 0
    34 0000195F 4883E4F0            <1>  and rsp, ~15
  1924 00001963 48837D1802                      cmp COUNT, 2
  1925 00001968 0F85BF030000                    jne L_error_arg_count_2
  1926 0000196E 488B7D20                        mov rdi, PARAM(0)
  1927                                          assert_vector(rdi)
    42 00001972 803F22              <1>  cmp byte [%1], %2
    43 00001975 0F8551040000        <1>  jne L_error_incorrect_type
  1928 0000197B 488B7528                        mov rsi, PARAM(1)
  1929                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000197F 803E11              <2>  cmp byte [%1], %2
    43 00001982 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001988 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000198D 0F8539040000        <1>  jne L_error_incorrect_type
  1930 00001993 488B5701                        mov rdx, qword [rdi + 1]
  1931 00001997 488B4E01                        mov rcx, qword [rsi + 1]
  1932 0000199B 4839D1                          cmp rcx, rdx
  1933 0000199E 0F8DEE020000                    jge L_error_integer_range
  1934 000019A4 4883F900                        cmp rcx, 0
  1935 000019A8 0F8CE4020000                    jl L_error_integer_range
  1936 000019AE 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1937                                          LEAVE
    38 000019B3 C9                  <1>  leave
  1938 000019B4 C22000                          ret AND_KILL_FRAME(2)
  1939                                  
  1940                                  L_code_ptr_vector_set:
  1941                                          ENTER
    33 000019B7 C8000000            <1>  enter 0, 0
    34 000019BB 4883E4F0            <1>  and rsp, ~15
  1942 000019BF 48837D1803                      cmp COUNT, 3
  1943 000019C4 0F85CD030000                    jne L_error_arg_count_3
  1944 000019CA 488B7D20                        mov rdi, PARAM(0)
  1945                                          assert_vector(rdi)
    42 000019CE 803F22              <1>  cmp byte [%1], %2
    43 000019D1 0F85F5030000        <1>  jne L_error_incorrect_type
  1946 000019D7 488B7528                        mov rsi, PARAM(1)
  1947                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019DB 803E11              <2>  cmp byte [%1], %2
    43 000019DE 0F85E8030000        <2>  jne L_error_incorrect_type
    48 000019E4 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019E9 0F85DD030000        <1>  jne L_error_incorrect_type
  1948 000019EF 488B5701                        mov rdx, qword [rdi + 1]
  1949 000019F3 488B4E01                        mov rcx, qword [rsi + 1]
  1950 000019F7 4839D1                          cmp rcx, rdx
  1951 000019FA 0F8D92020000                    jge L_error_integer_range
  1952 00001A00 4883F900                        cmp rcx, 0
  1953 00001A04 0F8C88020000                    jl L_error_integer_range
  1954 00001A0A 488B4530                        mov rax, PARAM(2)
  1955 00001A0E 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1956 00001A13 48B8-                           mov rax, sob_void
  1956 00001A15 [0000000000000000] 
  1957                                          LEAVE
    38 00001A1D C9                  <1>  leave
  1958 00001A1E C22800                          ret AND_KILL_FRAME(3)
  1959                                  
  1960                                  L_code_ptr_string_set:
  1961                                          ENTER
    33 00001A21 C8000000            <1>  enter 0, 0
    34 00001A25 4883E4F0            <1>  and rsp, ~15
  1962 00001A29 48837D1803                      cmp COUNT, 3
  1963 00001A2E 0F8563030000                    jne L_error_arg_count_3
  1964 00001A34 488B7D20                        mov rdi, PARAM(0)
  1965                                          assert_string(rdi)
    42 00001A38 803F03              <1>  cmp byte [%1], %2
    43 00001A3B 0F858B030000        <1>  jne L_error_incorrect_type
  1966 00001A41 488B7528                        mov rsi, PARAM(1)
  1967                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A45 803E11              <2>  cmp byte [%1], %2
    43 00001A48 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001A4E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A53 0F8573030000        <1>  jne L_error_incorrect_type
  1968 00001A59 488B5701                        mov rdx, qword [rdi + 1]
  1969 00001A5D 488B4E01                        mov rcx, qword [rsi + 1]
  1970 00001A61 4839D1                          cmp rcx, rdx
  1971 00001A64 0F8D28020000                    jge L_error_integer_range
  1972 00001A6A 4883F900                        cmp rcx, 0
  1973 00001A6E 0F8C1E020000                    jl L_error_integer_range
  1974 00001A74 488B4530                        mov rax, PARAM(2)
  1975                                          assert_char(rax)
    42 00001A78 803802              <1>  cmp byte [%1], %2
    43 00001A7B 0F854B030000        <1>  jne L_error_incorrect_type
  1976 00001A81 8A4001                          mov al, byte [rax + 1]
  1977 00001A84 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1978 00001A88 48B8-                           mov rax, sob_void
  1978 00001A8A [0000000000000000] 
  1979                                          LEAVE
    38 00001A92 C9                  <1>  leave
  1980 00001A93 C22800                          ret AND_KILL_FRAME(3)
  1981                                  
  1982                                  L_code_ptr_make_vector:
  1983                                          ENTER
    33 00001A96 C8000000            <1>  enter 0, 0
    34 00001A9A 4883E4F0            <1>  and rsp, ~15
  1984 00001A9E 48837D1802                      cmp COUNT, 2
  1985 00001AA3 0F8584020000                    jne L_error_arg_count_2
  1986 00001AA9 488B4D20                        mov rcx, PARAM(0)
  1987                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001AAD 803911              <2>  cmp byte [%1], %2
    43 00001AB0 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001AB6 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001ABB 0F850B030000        <1>  jne L_error_incorrect_type
  1988 00001AC1 488B4901                        mov rcx, qword [rcx + 1]
  1989 00001AC5 4883F900                        cmp rcx, 0
  1990 00001AC9 0F8CC3010000                    jl L_error_integer_range
  1991 00001ACF 488B5528                        mov rdx, PARAM(1)
  1992 00001AD3 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1993 00001ADB E8A7EBFFFF                      call malloc
  1994 00001AE0 C60022                          mov byte [rax], T_vector
  1995 00001AE3 48894801                        mov qword [rax + 1], rcx
  1996 00001AE7 41B800000000                    mov r8, 0
  1997                                  .L0:
  1998 00001AED 4939C8                          cmp r8, rcx
  1999 00001AF0 740A                            je .L1
  2000 00001AF2 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2001 00001AF7 49FFC0                          inc r8
  2002 00001AFA EBF1                            jmp .L0
  2003                                  .L1:
  2004                                          LEAVE
    38 00001AFC C9                  <1>  leave
  2005 00001AFD C22000                          ret AND_KILL_FRAME(2)
  2006                                          
  2007                                  L_code_ptr_make_string:
  2008                                          ENTER
    33 00001B00 C8000000            <1>  enter 0, 0
    34 00001B04 4883E4F0            <1>  and rsp, ~15
  2009 00001B08 48837D1802                      cmp COUNT, 2
  2010 00001B0D 0F851A020000                    jne L_error_arg_count_2
  2011 00001B13 488B4D20                        mov rcx, PARAM(0)
  2012                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B17 803911              <2>  cmp byte [%1], %2
    43 00001B1A 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001B20 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B25 0F85A1020000        <1>  jne L_error_incorrect_type
  2013 00001B2B 488B4901                        mov rcx, qword [rcx + 1]
  2014 00001B2F 4883F900                        cmp rcx, 0
  2015 00001B33 0F8C59010000                    jl L_error_integer_range
  2016 00001B39 488B5528                        mov rdx, PARAM(1)
  2017                                          assert_char(rdx)
    42 00001B3D 803A02              <1>  cmp byte [%1], %2
    43 00001B40 0F8586020000        <1>  jne L_error_incorrect_type
  2018 00001B46 8A5201                          mov dl, byte [rdx + 1]
  2019 00001B49 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2020 00001B4D E835EBFFFF                      call malloc
  2021 00001B52 C60003                          mov byte [rax], T_string
  2022 00001B55 48894801                        mov qword [rax + 1], rcx
  2023 00001B59 41B800000000                    mov r8, 0
  2024                                  .L0:
  2025 00001B5F 4939C8                          cmp r8, rcx
  2026 00001B62 740A                            je .L1
  2027 00001B64 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2028 00001B69 49FFC0                          inc r8
  2029 00001B6C EBF1                            jmp .L0
  2030                                  .L1:
  2031                                          LEAVE
    38 00001B6E C9                  <1>  leave
  2032 00001B6F C22000                          ret AND_KILL_FRAME(2)
  2033                                  
  2034                                  L_code_ptr_numerator:
  2035                                          ENTER
    33 00001B72 C8000000            <1>  enter 0, 0
    34 00001B76 4883E4F0            <1>  and rsp, ~15
  2036 00001B7A 48837D1801                      cmp COUNT, 1
  2037 00001B7F 0F8573010000                    jne L_error_arg_count_1
  2038 00001B85 488B4520                        mov rax, PARAM(0)
  2039                                          assert_rational(rax)
    42 00001B89 803811              <1>  cmp byte [%1], %2
    43 00001B8C 0F853A020000        <1>  jne L_error_incorrect_type
  2040 00001B92 488B7801                        mov rdi, qword [rax + 1]
  2041 00001B96 E8D1000000                      call make_integer
  2042                                          LEAVE
    38 00001B9B C9                  <1>  leave
  2043 00001B9C C21800                          ret AND_KILL_FRAME(1)
  2044                                          
  2045                                  L_code_ptr_denominator:
  2046                                          ENTER
    33 00001B9F C8000000            <1>  enter 0, 0
    34 00001BA3 4883E4F0            <1>  and rsp, ~15
  2047 00001BA7 48837D1801                      cmp COUNT, 1
  2048 00001BAC 0F8546010000                    jne L_error_arg_count_1
  2049 00001BB2 488B4520                        mov rax, PARAM(0)
  2050                                          assert_rational(rax)
    42 00001BB6 803811              <1>  cmp byte [%1], %2
    43 00001BB9 0F850D020000        <1>  jne L_error_incorrect_type
  2051 00001BBF 488B7809                        mov rdi, qword [rax + 1 + 8]
  2052 00001BC3 E8A4000000                      call make_integer
  2053                                          LEAVE
    38 00001BC8 C9                  <1>  leave
  2054 00001BC9 C21800                          ret AND_KILL_FRAME(1)
  2055                                  
  2056                                  L_code_ptr_eq:
  2057                                  	ENTER
    33 00001BCC C8000000            <1>  enter 0, 0
    34 00001BD0 4883E4F0            <1>  and rsp, ~15
  2058 00001BD4 48837D1802              	cmp COUNT, 2
  2059 00001BD9 0F854E010000            	jne L_error_arg_count_2
  2060 00001BDF 488B7D20                	mov rdi, PARAM(0)
  2061 00001BE3 488B7528                	mov rsi, PARAM(1)
  2062 00001BE7 4839F7                  	cmp rdi, rsi
  2063 00001BEA 744A                    	je .L_eq_true
  2064 00001BEC 8A17                    	mov dl, byte [rdi]
  2065 00001BEE 3A16                    	cmp dl, byte [rsi]
  2066 00001BF0 7550                    	jne .L_eq_false
  2067 00001BF2 80FA02                  	cmp dl, T_char
  2068 00001BF5 7437                    	je .L_char
  2069 00001BF7 80FA04                  	cmp dl, T_symbol
  2070 00001BFA 742A                    	je .L_symbol
  2071 00001BFC 80FA12                  	cmp dl, T_real
  2072 00001BFF 741D                    	je .L_real
  2073 00001C01 80FA11                  	cmp dl, T_rational
  2074 00001C04 7402                    	je .L_rational
  2075 00001C06 EB3A                    	jmp .L_eq_false
  2076                                  .L_rational:
  2077 00001C08 488B4601                	mov rax, qword [rsi + 1]
  2078 00001C0C 483B4701                	cmp rax, qword [rdi + 1]
  2079 00001C10 7530                    	jne .L_eq_false
  2080 00001C12 488B4609                	mov rax, qword [rsi + 1 + 8]
  2081 00001C16 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2082 00001C1A 7526                    	jne .L_eq_false
  2083 00001C1C EB18                    	jmp .L_eq_true
  2084                                  .L_real:
  2085 00001C1E 488B4601                	mov rax, qword [rsi + 1]
  2086 00001C22 483B4701                	cmp rax, qword [rdi + 1]
  2087                                  .L_symbol:
  2088                                  	; never reached, because symbols are static!
  2089                                  	; but I'm keeping it in case, I'll ever change
  2090                                  	; the implementation
  2091 00001C26 488B4601                	mov rax, qword [rsi + 1]
  2092 00001C2A 483B4701                	cmp rax, qword [rdi + 1]
  2093                                  .L_char:
  2094 00001C2E 8A5E01                  	mov bl, byte [rsi + 1]
  2095 00001C31 3A5F01                  	cmp bl, byte [rdi + 1]
  2096 00001C34 750C                    	jne .L_eq_false
  2097                                  .L_eq_true:
  2098 00001C36 48B8-                   	mov rax, sob_boolean_true
  2098 00001C38 [0300000000000000] 
  2099 00001C40 EB0A                    	jmp .L_eq_exit
  2100                                  .L_eq_false:
  2101 00001C42 48B8-                   	mov rax, sob_boolean_false
  2101 00001C44 [0200000000000000] 
  2102                                  .L_eq_exit:
  2103                                  	LEAVE
    38 00001C4C C9                  <1>  leave
  2104 00001C4D C22000                  	ret AND_KILL_FRAME(2)
  2105                                  
  2106                                  make_real:
  2107                                          ENTER
    33 00001C50 C8000000            <1>  enter 0, 0
    34 00001C54 4883E4F0            <1>  and rsp, ~15
  2108 00001C58 BF09000000                      mov rdi, (1 + 8)
  2109 00001C5D E825EAFFFF                      call malloc
  2110 00001C62 C60012                          mov byte [rax], T_real
  2111 00001C65 F20F114001                      movsd qword [rax + 1], xmm0
  2112                                          LEAVE
    38 00001C6A C9                  <1>  leave
  2113 00001C6B C3                              ret
  2114                                          
  2115                                  make_integer:
  2116                                          ENTER
    33 00001C6C C8000000            <1>  enter 0, 0
    34 00001C70 4883E4F0            <1>  and rsp, ~15
  2117 00001C74 4889FE                          mov rsi, rdi
  2118 00001C77 BF11000000                      mov rdi, (1 + 8 + 8)
  2119 00001C7C E806EAFFFF                      call malloc
  2120 00001C81 C60011                          mov byte [rax], T_rational
  2121 00001C84 48897001                        mov qword [rax + 1], rsi
  2122 00001C88 48C7400901000000                mov qword [rax + 1 + 8], 1
  2123                                          LEAVE
    38 00001C90 C9                  <1>  leave
  2124 00001C91 C3                              ret
  2125                                          
  2126                                  L_error_integer_range:
  2127 00001C92 488B3C25[00000000]              mov rdi, qword [stderr]
  2128 00001C9A 48BE-                           mov rsi, fmt_integer_range
  2128 00001C9C [6B03000000000000] 
  2129 00001CA4 B800000000                      mov rax, 0
  2130                                  	ENTER
    33 00001CA9 C8000000            <1>  enter 0, 0
    34 00001CAD 4883E4F0            <1>  and rsp, ~15
  2131 00001CB1 E8(00000000)                    call fprintf
  2132                                  	LEAVE
    38 00001CB6 C9                  <1>  leave
  2133 00001CB7 48C7C0FBFFFFFF                  mov rax, -5
  2134 00001CBE E8(00000000)                    call exit
  2135                                  
  2136                                  L_error_arg_count_0:
  2137 00001CC3 488B3C25[00000000]              mov rdi, qword [stderr]
  2138 00001CCB 48BE-                           mov rsi, fmt_arg_count_0
  2138 00001CCD [6902000000000000] 
  2139 00001CD5 488B5518                        mov rdx, COUNT
  2140 00001CD9 B800000000                      mov rax, 0
  2141                                  	ENTER
    33 00001CDE C8000000            <1>  enter 0, 0
    34 00001CE2 4883E4F0            <1>  and rsp, ~15
  2142 00001CE6 E8(00000000)                    call fprintf
  2143                                  	LEAVE
    38 00001CEB C9                  <1>  leave
  2144 00001CEC 48C7C0FDFFFFFF                  mov rax, -3
  2145 00001CF3 E8(00000000)                    call exit
  2146                                  
  2147                                  L_error_arg_count_1:
  2148 00001CF8 488B3C25[00000000]              mov rdi, qword [stderr]
  2149 00001D00 48BE-                           mov rsi, fmt_arg_count_1
  2149 00001D02 [9102000000000000] 
  2150 00001D0A 488B5518                        mov rdx, COUNT
  2151 00001D0E B800000000                      mov rax, 0
  2152                                  	ENTER
    33 00001D13 C8000000            <1>  enter 0, 0
    34 00001D17 4883E4F0            <1>  and rsp, ~15
  2153 00001D1B E8(00000000)                    call fprintf
  2154                                  	LEAVE
    38 00001D20 C9                  <1>  leave
  2155 00001D21 48C7C0FDFFFFFF                  mov rax, -3
  2156 00001D28 E8(00000000)                    call exit
  2157                                  
  2158                                  L_error_arg_count_2:
  2159 00001D2D 488B3C25[00000000]              mov rdi, qword [stderr]
  2160 00001D35 48BE-                           mov rsi, fmt_arg_count_2
  2160 00001D37 [F702000000000000] 
  2161 00001D3F 488B5518                        mov rdx, COUNT
  2162 00001D43 B800000000                      mov rax, 0
  2163                                  	ENTER
    33 00001D48 C8000000            <1>  enter 0, 0
    34 00001D4C 4883E4F0            <1>  and rsp, ~15
  2164 00001D50 E8(00000000)                    call fprintf
  2165                                  	LEAVE
    38 00001D55 C9                  <1>  leave
  2166 00001D56 48C7C0FDFFFFFF                  mov rax, -3
  2167 00001D5D E8(00000000)                    call exit
  2168                                  
  2169                                  L_error_arg_count_12:
  2170 00001D62 488B3C25[00000000]              mov rdi, qword [stderr]
  2171 00001D6A 48BE-                           mov rsi, fmt_arg_count_12
  2171 00001D6C [B702000000000000] 
  2172 00001D74 488B5518                        mov rdx, COUNT
  2173 00001D78 B800000000                      mov rax, 0
  2174                                  	ENTER
    33 00001D7D C8000000            <1>  enter 0, 0
    34 00001D81 4883E4F0            <1>  and rsp, ~15
  2175 00001D85 E8(00000000)                    call fprintf
  2176                                  	LEAVE
    38 00001D8A C9                  <1>  leave
  2177 00001D8B 48C7C0FDFFFFFF                  mov rax, -3
  2178 00001D92 E8(00000000)                    call exit
  2179                                  
  2180                                  L_error_arg_count_3:
  2181 00001D97 488B3C25[00000000]              mov rdi, qword [stderr]
  2182 00001D9F 48BE-                           mov rsi, fmt_arg_count_3
  2182 00001DA1 [1E03000000000000] 
  2183 00001DA9 488B5518                        mov rdx, COUNT
  2184 00001DAD B800000000                      mov rax, 0
  2185                                  	ENTER
    33 00001DB2 C8000000            <1>  enter 0, 0
    34 00001DB6 4883E4F0            <1>  and rsp, ~15
  2186 00001DBA E8(00000000)                    call fprintf
  2187                                  	LEAVE
    38 00001DBF C9                  <1>  leave
  2188 00001DC0 48C7C0FDFFFFFF                  mov rax, -3
  2189 00001DC7 E8(00000000)                    call exit
  2190                                          
  2191                                  L_error_incorrect_type:
  2192 00001DCC 488B3C25[00000000]              mov rdi, qword [stderr]
  2193 00001DD4 48BE-                           mov rsi, fmt_type
  2193 00001DD6 [4703000000000000] 
  2194 00001DDE B800000000                      mov rax, 0
  2195                                  	ENTER
    33 00001DE3 C8000000            <1>  enter 0, 0
    34 00001DE7 4883E4F0            <1>  and rsp, ~15
  2196 00001DEB E8(00000000)                    call fprintf
  2197                                  	LEAVE
    38 00001DF0 C9                  <1>  leave
  2198 00001DF1 48C7C0FCFFFFFF                  mov rax, -4
  2199 00001DF8 E8(00000000)                    call exit
  2200                                  
  2201                                  L_error_division_by_zero:
  2202 00001DFD 488B3C25[00000000]              mov rdi, qword [stderr]
  2203 00001E05 48BE-                           mov rsi, fmt_division_by_zero
  2203 00001E07 [8803000000000000] 
  2204 00001E0F B800000000                      mov rax, 0
  2205                                  	ENTER
    33 00001E14 C8000000            <1>  enter 0, 0
    34 00001E18 4883E4F0            <1>  and rsp, ~15
  2206 00001E1C E8(00000000)                    call fprintf
  2207                                  	LEAVE
    38 00001E21 C9                  <1>  leave
  2208 00001E22 48C7C0F8FFFFFF                  mov rax, -8
  2209 00001E29 E8(00000000)                    call exit
  2210                                  
  2211                                  section .data
  2212                                  fmt_char:
  2213 00000266 256300                          db `%c\0`
  2214                                  fmt_arg_count_0:
  2215 00000269 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2215 00000272 74696E67207A65726F-
  2215 0000027B 20617267756D656E74-
  2215 00000284 732E20466F756E6420-
  2215 0000028D 25640A00           
  2216                                  fmt_arg_count_1:
  2217 00000291 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2217 0000029A 74696E67206F6E6520-
  2217 000002A3 617267756D656E742E-
  2217 000002AC 20466F756E64202564-
  2217 000002B5 0A00               
  2218                                  fmt_arg_count_12:
  2219 000002B7 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2219 000002C0 74696E67206F6E6520-
  2219 000002C9 726571756972656420-
  2219 000002D2 616E64206F6E65206F-
  2219 000002DB 7074696F6E616C2061-
  2219 000002E4 7267756D656E742E20-
  2219 000002ED 466F756E642025640A-
  2219 000002F6 00                 
  2220                                  fmt_arg_count_2:
  2221 000002F7 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2221 00000300 74696E672074776F20-
  2221 00000309 617267756D656E7473-
  2221 00000312 2E20466F756E642025-
  2221 0000031B 640A00             
  2222                                  fmt_arg_count_3:
  2223 0000031E 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2223 00000327 74696E672074687265-
  2223 00000330 6520617267756D656E-
  2223 00000339 74732E20466F756E64-
  2223 00000342 2025640A00         
  2224                                  fmt_type:
  2225 00000347 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2225 00000350 696F6E207061737365-
  2225 00000359 6420696E636F727265-
  2225 00000362 637420747970650A00 
  2226                                  fmt_integer_range:
  2227 0000036B 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2227 00000374 7265637420696E7465-
  2227 0000037D 6765722072616E6765-
  2227 00000386 0A00               
  2228                                  fmt_division_by_zero:
  2229 00000388 212121204469766973-             db `!!! Division by zero\n\0`
  2229 00000391 696F6E206279207A65-
  2229 0000039A 726F0A00           
  2230                                  fmt_scheme_error_part_1:
  2231 0000039E 0A2121212054686520-             db `\n!!! The procedure \0`
  2231 000003A7 70726F636564757265-
  2231 000003B0 2000               
  2232                                  fmt_scheme_error_part_2:
  2233 000003B2 2061736B656420746F-             db ` asked to terminate the program\n`
  2233 000003BB 207465726D696E6174-
  2233 000003C4 65207468652070726F-
  2233 000003CD 6772616D0A         
  2234 000003D2 202020207769746820-             db `    with the following message:\n\n\0`
  2234 000003DB 74686520666F6C6C6F-
  2234 000003E4 77696E67206D657373-
  2234 000003ED 6167653A0A0A00     
  2235                                  fmt_scheme_error_part_3:
  2236 000003F4 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2236 000003FD 210A0A00           

     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "a"
    84 00000007 0100000000000000        	dq 1
    85 0000000F 61                      	db 0x61
    86 00000010 04                      	db T_symbol	; a
    87 00000011 [0600000000000000]      	dq L_constants + 6
    88 00000019 03                      	db T_string	; "b"
    89 0000001A 0100000000000000        	dq 1
    90 00000022 62                      	db 0x62
    91 00000023 04                      	db T_symbol	; b
    92 00000024 [1900000000000000]      	dq L_constants + 25
    93 0000002C 03                      	db T_string	; "c"
    94 0000002D 0100000000000000        	dq 1
    95 00000035 63                      	db 0x63
    96 00000036 04                      	db T_symbol	; c
    97 00000037 [2C00000000000000]      	dq L_constants + 44
    98                                  
    99                                  section .bss
   100                                  free_var_0:	; location of null?
   101 00000000 ????????????????        	resq 1
   102                                  free_var_1:	; location of pair?
   103 00000008 ????????????????        	resq 1
   104                                  free_var_2:	; location of void?
   105 00000010 ????????????????        	resq 1
   106                                  free_var_3:	; location of char?
   107 00000018 ????????????????        	resq 1
   108                                  free_var_4:	; location of string?
   109 00000020 ????????????????        	resq 1
   110                                  free_var_5:	; location of symbol?
   111 00000028 ????????????????        	resq 1
   112                                  free_var_6:	; location of vector?
   113 00000030 ????????????????        	resq 1
   114                                  free_var_7:	; location of procedure?
   115 00000038 ????????????????        	resq 1
   116                                  free_var_8:	; location of real?
   117 00000040 ????????????????        	resq 1
   118                                  free_var_9:	; location of rational?
   119 00000048 ????????????????        	resq 1
   120                                  free_var_10:	; location of boolean?
   121 00000050 ????????????????        	resq 1
   122                                  free_var_11:	; location of number?
   123 00000058 ????????????????        	resq 1
   124                                  free_var_12:	; location of collection?
   125 00000060 ????????????????        	resq 1
   126                                  free_var_13:	; location of cons
   127 00000068 ????????????????        	resq 1
   128                                  free_var_14:	; location of display-sexpr
   129 00000070 ????????????????        	resq 1
   130                                  free_var_15:	; location of write-char
   131 00000078 ????????????????        	resq 1
   132                                  free_var_16:	; location of car
   133 00000080 ????????????????        	resq 1
   134                                  free_var_17:	; location of cdr
   135 00000088 ????????????????        	resq 1
   136                                  free_var_18:	; location of string-length
   137 00000090 ????????????????        	resq 1
   138                                  free_var_19:	; location of vector-length
   139 00000098 ????????????????        	resq 1
   140                                  free_var_20:	; location of real->integer
   141 000000A0 ????????????????        	resq 1
   142                                  free_var_21:	; location of exit
   143 000000A8 ????????????????        	resq 1
   144                                  free_var_22:	; location of integer->real
   145 000000B0 ????????????????        	resq 1
   146                                  free_var_23:	; location of rational->real
   147 000000B8 ????????????????        	resq 1
   148                                  free_var_24:	; location of char->integer
   149 000000C0 ????????????????        	resq 1
   150                                  free_var_25:	; location of integer->char
   151 000000C8 ????????????????        	resq 1
   152                                  free_var_26:	; location of trng
   153 000000D0 ????????????????        	resq 1
   154                                  free_var_27:	; location of zero?
   155 000000D8 ????????????????        	resq 1
   156                                  free_var_28:	; location of integer?
   157 000000E0 ????????????????        	resq 1
   158                                  free_var_29:	; location of __bin-apply
   159 000000E8 ????????????????        	resq 1
   160                                  free_var_30:	; location of __bin-add-rr
   161 000000F0 ????????????????        	resq 1
   162                                  free_var_31:	; location of __bin-sub-rr
   163 000000F8 ????????????????        	resq 1
   164                                  free_var_32:	; location of __bin-mul-rr
   165 00000100 ????????????????        	resq 1
   166                                  free_var_33:	; location of __bin-div-rr
   167 00000108 ????????????????        	resq 1
   168                                  free_var_34:	; location of __bin-add-qq
   169 00000110 ????????????????        	resq 1
   170                                  free_var_35:	; location of __bin-sub-qq
   171 00000118 ????????????????        	resq 1
   172                                  free_var_36:	; location of __bin-mul-qq
   173 00000120 ????????????????        	resq 1
   174                                  free_var_37:	; location of __bin-div-qq
   175 00000128 ????????????????        	resq 1
   176                                  free_var_38:	; location of error
   177 00000130 ????????????????        	resq 1
   178                                  free_var_39:	; location of __bin-less-than-rr
   179 00000138 ????????????????        	resq 1
   180                                  free_var_40:	; location of __bin-less-than-qq
   181 00000140 ????????????????        	resq 1
   182                                  free_var_41:	; location of __bin-equal-rr
   183 00000148 ????????????????        	resq 1
   184                                  free_var_42:	; location of __bin-equal-qq
   185 00000150 ????????????????        	resq 1
   186                                  free_var_43:	; location of quotient
   187 00000158 ????????????????        	resq 1
   188                                  free_var_44:	; location of remainder
   189 00000160 ????????????????        	resq 1
   190                                  free_var_45:	; location of set-car!
   191 00000168 ????????????????        	resq 1
   192                                  free_var_46:	; location of set-cdr!
   193 00000170 ????????????????        	resq 1
   194                                  free_var_47:	; location of string-ref
   195 00000178 ????????????????        	resq 1
   196                                  free_var_48:	; location of vector-ref
   197 00000180 ????????????????        	resq 1
   198                                  free_var_49:	; location of vector-set!
   199 00000188 ????????????????        	resq 1
   200                                  free_var_50:	; location of string-set!
   201 00000190 ????????????????        	resq 1
   202                                  free_var_51:	; location of make-vector
   203 00000198 ????????????????        	resq 1
   204                                  free_var_52:	; location of make-string
   205 000001A0 ????????????????        	resq 1
   206                                  free_var_53:	; location of numerator
   207 000001A8 ????????????????        	resq 1
   208                                  free_var_54:	; location of denominator
   209 000001B0 ????????????????        	resq 1
   210                                  free_var_55:	; location of eq?
   211 000001B8 ????????????????        	resq 1
   212                                  free_var_56:	; location of x
   213 000001C0 ????????????????        	resq 1
   214                                  
   215                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   216                                  global main
   217                                  section .text
   218                                  main:
   219 00000000 C8000000                        enter 0, 0
   220                                          
   221                                  	; building closure for null?
   222 00000004 48BF-                   	mov rdi, free_var_0
   222 00000006 [0000000000000000] 
   223 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   223 00000010 [B80C000000000000] 
   224 00000018 E8730C0000              	call bind_primitive
   225                                  
   226                                  	; building closure for pair?
   227 0000001D 48BF-                   	mov rdi, free_var_1
   227 0000001F [0800000000000000] 
   228 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   228 00000029 [EE0C000000000000] 
   229 00000031 E85A0C0000              	call bind_primitive
   230                                  
   231                                  	; building closure for void?
   232 00000036 48BF-                   	mov rdi, free_var_2
   232 00000038 [1000000000000000] 
   233 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   233 00000042 [240D000000000000] 
   234 0000004A E8410C0000              	call bind_primitive
   235                                  
   236                                  	; building closure for char?
   237 0000004F 48BF-                   	mov rdi, free_var_3
   237 00000051 [1800000000000000] 
   238 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   238 0000005B [5A0D000000000000] 
   239 00000063 E8280C0000              	call bind_primitive
   240                                  
   241                                  	; building closure for string?
   242 00000068 48BF-                   	mov rdi, free_var_4
   242 0000006A [2000000000000000] 
   243 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   243 00000074 [900D000000000000] 
   244 0000007C E80F0C0000              	call bind_primitive
   245                                  
   246                                  	; building closure for symbol?
   247 00000081 48BF-                   	mov rdi, free_var_5
   247 00000083 [2800000000000000] 
   248 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   248 0000008D [C60D000000000000] 
   249 00000095 E8F60B0000              	call bind_primitive
   250                                  
   251                                  	; building closure for vector?
   252 0000009A 48BF-                   	mov rdi, free_var_6
   252 0000009C [3000000000000000] 
   253 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   253 000000A6 [FC0D000000000000] 
   254 000000AE E8DD0B0000              	call bind_primitive
   255                                  
   256                                  	; building closure for procedure?
   257 000000B3 48BF-                   	mov rdi, free_var_7
   257 000000B5 [3800000000000000] 
   258 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   258 000000BF [320E000000000000] 
   259 000000C7 E8C40B0000              	call bind_primitive
   260                                  
   261                                  	; building closure for real?
   262 000000CC 48BF-                   	mov rdi, free_var_8
   262 000000CE [4000000000000000] 
   263 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   263 000000D8 [680E000000000000] 
   264 000000E0 E8AB0B0000              	call bind_primitive
   265                                  
   266                                  	; building closure for rational?
   267 000000E5 48BF-                   	mov rdi, free_var_9
   267 000000E7 [4800000000000000] 
   268 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   268 000000F1 [9E0E000000000000] 
   269 000000F9 E8920B0000              	call bind_primitive
   270                                  
   271                                  	; building closure for boolean?
   272 000000FE 48BF-                   	mov rdi, free_var_10
   272 00000100 [5000000000000000] 
   273 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   273 0000010A [D40E000000000000] 
   274 00000112 E8790B0000              	call bind_primitive
   275                                  
   276                                  	; building closure for number?
   277 00000117 48BF-                   	mov rdi, free_var_11
   277 00000119 [5800000000000000] 
   278 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   278 00000123 [0C0F000000000000] 
   279 0000012B E8600B0000              	call bind_primitive
   280                                  
   281                                  	; building closure for collection?
   282 00000130 48BF-                   	mov rdi, free_var_12
   282 00000132 [6000000000000000] 
   283 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   283 0000013C [440F000000000000] 
   284 00000144 E8470B0000              	call bind_primitive
   285                                  
   286                                  	; building closure for cons
   287 00000149 48BF-                   	mov rdi, free_var_13
   287 0000014B [6800000000000000] 
   288 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   288 00000155 [7C0F000000000000] 
   289 0000015D E82E0B0000              	call bind_primitive
   290                                  
   291                                  	; building closure for display-sexpr
   292 00000162 48BF-                   	mov rdi, free_var_14
   292 00000164 [7000000000000000] 
   293 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   293 0000016E [B00F000000000000] 
   294 00000176 E8150B0000              	call bind_primitive
   295                                  
   296                                  	; building closure for write-char
   297 0000017B 48BF-                   	mov rdi, free_var_15
   297 0000017D [7800000000000000] 
   298 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   298 00000187 [DA0F000000000000] 
   299 0000018F E8FC0A0000              	call bind_primitive
   300                                  
   301                                  	; building closure for car
   302 00000194 48BF-                   	mov rdi, free_var_16
   302 00000196 [8000000000000000] 
   303 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   303 000001A0 [3110000000000000] 
   304 000001A8 E8E30A0000              	call bind_primitive
   305                                  
   306                                  	; building closure for cdr
   307 000001AD 48BF-                   	mov rdi, free_var_17
   307 000001AF [8800000000000000] 
   308 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   308 000001B9 [5910000000000000] 
   309 000001C1 E8CA0A0000              	call bind_primitive
   310                                  
   311                                  	; building closure for string-length
   312 000001C6 48BF-                   	mov rdi, free_var_18
   312 000001C8 [9000000000000000] 
   313 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   313 000001D2 [8110000000000000] 
   314 000001DA E8B10A0000              	call bind_primitive
   315                                  
   316                                  	; building closure for vector-length
   317 000001DF 48BF-                   	mov rdi, free_var_19
   317 000001E1 [9800000000000000] 
   318 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   318 000001EB [AE10000000000000] 
   319 000001F3 E8980A0000              	call bind_primitive
   320                                  
   321                                  	; building closure for real->integer
   322 000001F8 48BF-                   	mov rdi, free_var_20
   322 000001FA [A000000000000000] 
   323 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   323 00000204 [DB10000000000000] 
   324 0000020C E87F0A0000              	call bind_primitive
   325                                  
   326                                  	; building closure for exit
   327 00000211 48BF-                   	mov rdi, free_var_21
   327 00000213 [A800000000000000] 
   328 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   328 0000021D [0E11000000000000] 
   329 00000225 E8660A0000              	call bind_primitive
   330                                  
   331                                  	; building closure for integer->real
   332 0000022A 48BF-                   	mov rdi, free_var_22
   332 0000022C [B000000000000000] 
   333 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   333 00000236 [2B11000000000000] 
   334 0000023E E84D0A0000              	call bind_primitive
   335                                  
   336                                  	; building closure for rational->real
   337 00000243 48BF-                   	mov rdi, free_var_23
   337 00000245 [B800000000000000] 
   338 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   338 0000024F [6811000000000000] 
   339 00000257 E8340A0000              	call bind_primitive
   340                                  
   341                                  	; building closure for char->integer
   342 0000025C 48BF-                   	mov rdi, free_var_24
   342 0000025E [C000000000000000] 
   343 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   343 00000268 [A711000000000000] 
   344 00000270 E81B0A0000              	call bind_primitive
   345                                  
   346                                  	; building closure for integer->char
   347 00000275 48BF-                   	mov rdi, free_var_25
   347 00000277 [C800000000000000] 
   348 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   348 00000281 [DC11000000000000] 
   349 00000289 E8020A0000              	call bind_primitive
   350                                  
   351                                  	; building closure for trng
   352 0000028E 48BF-                   	mov rdi, free_var_26
   352 00000290 [D000000000000000] 
   353 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   353 0000029A [3612000000000000] 
   354 000002A2 E8E9090000              	call bind_primitive
   355                                  
   356                                  	; building closure for zero?
   357 000002A7 48BF-                   	mov rdi, free_var_27
   357 000002A9 [D800000000000000] 
   358 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   358 000002B3 [5912000000000000] 
   359 000002BB E8D0090000              	call bind_primitive
   360                                  
   361                                  	; building closure for integer?
   362 000002C0 48BF-                   	mov rdi, free_var_28
   362 000002C2 [E000000000000000] 
   363 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   363 000002CC [B412000000000000] 
   364 000002D4 E8B7090000              	call bind_primitive
   365                                  
   366                                  	; building closure for __bin-apply
   367 000002D9 48BF-                   	mov rdi, free_var_29
   367 000002DB [E800000000000000] 
   368 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   368 000002E5 [B80C000000000000] 
   369 000002ED E89E090000              	call bind_primitive
   370                                  
   371                                  	; building closure for __bin-add-rr
   372 000002F2 48BF-                   	mov rdi, free_var_30
   372 000002F4 [F000000000000000] 
   373 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   373 000002FE [F112000000000000] 
   374 00000306 E885090000              	call bind_primitive
   375                                  
   376                                  	; building closure for __bin-sub-rr
   377 0000030B 48BF-                   	mov rdi, free_var_31
   377 0000030D [F800000000000000] 
   378 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   378 00000317 [3513000000000000] 
   379 0000031F E86C090000              	call bind_primitive
   380                                  
   381                                  	; building closure for __bin-mul-rr
   382 00000324 48BF-                   	mov rdi, free_var_32
   382 00000326 [0001000000000000] 
   383 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   383 00000330 [7913000000000000] 
   384 00000338 E853090000              	call bind_primitive
   385                                  
   386                                  	; building closure for __bin-div-rr
   387 0000033D 48BF-                   	mov rdi, free_var_33
   387 0000033F [0801000000000000] 
   388 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   388 00000349 [BD13000000000000] 
   389 00000351 E83A090000              	call bind_primitive
   390                                  
   391                                  	; building closure for __bin-add-qq
   392 00000356 48BF-                   	mov rdi, free_var_34
   392 00000358 [1001000000000000] 
   393 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   393 00000362 [0F14000000000000] 
   394 0000036A E821090000              	call bind_primitive
   395                                  
   396                                  	; building closure for __bin-sub-qq
   397 0000036F 48BF-                   	mov rdi, free_var_35
   397 00000371 [1801000000000000] 
   398 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   398 0000037B [7714000000000000] 
   399 00000383 E808090000              	call bind_primitive
   400                                  
   401                                  	; building closure for __bin-mul-qq
   402 00000388 48BF-                   	mov rdi, free_var_36
   402 0000038A [2001000000000000] 
   403 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   403 00000394 [DF14000000000000] 
   404 0000039C E8EF080000              	call bind_primitive
   405                                  
   406                                  	; building closure for __bin-div-qq
   407 000003A1 48BF-                   	mov rdi, free_var_37
   407 000003A3 [2801000000000000] 
   408 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   408 000003AD [3715000000000000] 
   409 000003B5 E8D6080000              	call bind_primitive
   410                                  
   411                                  	; building closure for error
   412 000003BA 48BF-                   	mov rdi, free_var_38
   412 000003BC [3001000000000000] 
   413 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   413 000003C6 [0516000000000000] 
   414 000003CE E8BD080000              	call bind_primitive
   415                                  
   416                                  	; building closure for __bin-less-than-rr
   417 000003D3 48BF-                   	mov rdi, free_var_39
   417 000003D5 [3801000000000000] 
   418 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   418 000003DF [BC16000000000000] 
   419 000003E7 E8A4080000              	call bind_primitive
   420                                  
   421                                  	; building closure for __bin-less-than-qq
   422 000003EC 48BF-                   	mov rdi, free_var_40
   422 000003EE [4001000000000000] 
   423 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   423 000003F8 [1317000000000000] 
   424 00000400 E88B080000              	call bind_primitive
   425                                  
   426                                  	; building closure for __bin-equal-rr
   427 00000405 48BF-                   	mov rdi, free_var_41
   427 00000407 [4801000000000000] 
   428 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   428 00000411 [7617000000000000] 
   429 00000419 E872080000              	call bind_primitive
   430                                  
   431                                  	; building closure for __bin-equal-qq
   432 0000041E 48BF-                   	mov rdi, free_var_42
   432 00000420 [5001000000000000] 
   433 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   433 0000042A [CD17000000000000] 
   434 00000432 E859080000              	call bind_primitive
   435                                  
   436                                  	; building closure for quotient
   437 00000437 48BF-                   	mov rdi, free_var_43
   437 00000439 [5801000000000000] 
   438 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   438 00000443 [3018000000000000] 
   439 0000044B E840080000              	call bind_primitive
   440                                  
   441                                  	; building closure for remainder
   442 00000450 48BF-                   	mov rdi, free_var_44
   442 00000452 [6001000000000000] 
   443 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   443 0000045C [9618000000000000] 
   444 00000464 E827080000              	call bind_primitive
   445                                  
   446                                  	; building closure for set-car!
   447 00000469 48BF-                   	mov rdi, free_var_45
   447 0000046B [6801000000000000] 
   448 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   448 00000475 [FC18000000000000] 
   449 0000047D E80E080000              	call bind_primitive
   450                                  
   451                                  	; building closure for set-cdr!
   452 00000482 48BF-                   	mov rdi, free_var_46
   452 00000484 [7001000000000000] 
   453 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   453 0000048E [3219000000000000] 
   454 00000496 E8F5070000              	call bind_primitive
   455                                  
   456                                  	; building closure for string-ref
   457 0000049B 48BF-                   	mov rdi, free_var_47
   457 0000049D [7801000000000000] 
   458 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   458 000004A7 [6819000000000000] 
   459 000004AF E8DC070000              	call bind_primitive
   460                                  
   461                                  	; building closure for vector-ref
   462 000004B4 48BF-                   	mov rdi, free_var_48
   462 000004B6 [8001000000000000] 
   463 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   463 000004C0 [D319000000000000] 
   464 000004C8 E8C3070000              	call bind_primitive
   465                                  
   466                                  	; building closure for vector-set!
   467 000004CD 48BF-                   	mov rdi, free_var_49
   467 000004CF [8801000000000000] 
   468 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   468 000004D9 [2F1A000000000000] 
   469 000004E1 E8AA070000              	call bind_primitive
   470                                  
   471                                  	; building closure for string-set!
   472 000004E6 48BF-                   	mov rdi, free_var_50
   472 000004E8 [9001000000000000] 
   473 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   473 000004F2 [991A000000000000] 
   474 000004FA E891070000              	call bind_primitive
   475                                  
   476                                  	; building closure for make-vector
   477 000004FF 48BF-                   	mov rdi, free_var_51
   477 00000501 [9801000000000000] 
   478 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   478 0000050B [0E1B000000000000] 
   479 00000513 E878070000              	call bind_primitive
   480                                  
   481                                  	; building closure for make-string
   482 00000518 48BF-                   	mov rdi, free_var_52
   482 0000051A [A001000000000000] 
   483 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   483 00000524 [781B000000000000] 
   484 0000052C E85F070000              	call bind_primitive
   485                                  
   486                                  	; building closure for numerator
   487 00000531 48BF-                   	mov rdi, free_var_53
   487 00000533 [A801000000000000] 
   488 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   488 0000053D [EA1B000000000000] 
   489 00000545 E846070000              	call bind_primitive
   490                                  
   491                                  	; building closure for denominator
   492 0000054A 48BF-                   	mov rdi, free_var_54
   492 0000054C [B001000000000000] 
   493 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   493 00000556 [171C000000000000] 
   494 0000055E E82D070000              	call bind_primitive
   495                                  
   496                                  	; building closure for eq?
   497 00000563 48BF-                   	mov rdi, free_var_55
   497 00000565 [B801000000000000] 
   498 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   498 0000056F [441C000000000000] 
   499 00000577 E814070000              	call bind_primitive
   500                                  
   501                                  	; code generated for ScmApplicNoneTailCall'
   502                                  	; code generated for ScmApplicNoneTailCall'
   503                                  	; code generated for ScmApplicNoneTailCall'
   504                                  	; code generated for ScmConst
   505 0000057C 48B8-                   	mov rax, L_constants + 1
   505 0000057E [0100000000000000] 
   506 00000586 50                      	push rax
   507                                  	; code generated for ScmConst
   508 00000587 48B8-                   	mov rax, L_constants + 54
   508 00000589 [3600000000000000] 
   509 00000591 50                      	push rax
   510 00000592 6A02                    	push 2
   511                                  	; code generated for ScmVarGet' (Free))
   512 00000594 488B0425[68000000]      	mov rax, qword [free_var_13]
   513 0000059C FF7001                  	push qword[rax+1]
   514 0000059F FF5009                  	call qword[rax+1+8]
   515 000005A2 4883C408                	add rsp, 8
   516 000005A6 5B                      	pop rbx
   517 000005A7 48C1E303                	shl rbx, 3
   518 000005AB 4801DC                  	add rsp, rbx
   519 000005AE 50                      	push rax
   520                                  	; code generated for ScmConst
   521 000005AF 48B8-                   	mov rax, L_constants + 35
   521 000005B1 [2300000000000000] 
   522 000005B9 50                      	push rax
   523 000005BA 6A02                    	push 2
   524                                  	; code generated for ScmVarGet' (Free))
   525 000005BC 488B0425[68000000]      	mov rax, qword [free_var_13]
   526 000005C4 FF7001                  	push qword[rax+1]
   527 000005C7 FF5009                  	call qword[rax+1+8]
   528 000005CA 4883C408                	add rsp, 8
   529 000005CE 5B                      	pop rbx
   530 000005CF 48C1E303                	shl rbx, 3
   531 000005D3 4801DC                  	add rsp, rbx
   532 000005D6 50                      	push rax
   533                                  	; code generated for ScmConst
   534 000005D7 48B8-                   	mov rax, L_constants + 16
   534 000005D9 [1000000000000000] 
   535 000005E1 50                      	push rax
   536 000005E2 6A02                    	push 2
   537                                  	; code generated for ScmVarGet' (Free))
   538 000005E4 488B0425[68000000]      	mov rax, qword [free_var_13]
   539 000005EC FF7001                  	push qword[rax+1]
   540 000005EF FF5009                  	call qword[rax+1+8]
   541 000005F2 4883C408                	add rsp, 8
   542 000005F6 5B                      	pop rbx
   543 000005F7 48C1E303                	shl rbx, 3
   544 000005FB 4801DC                  	add rsp, rbx
   545 000005FE 48890425[C0010000]      	mov qword [free_var_56], rax
   546 00000606 48B8-                   	mov rax, sob_void
   546 00000608 [0000000000000000] 
   547                                  
   548 00000610 4889C7                  	mov rdi, rax
   549 00000613 E8F8000000              	call print_sexpr_if_not_void
   550                                  
   551                                  	; code generated for ScmVarGet' (Free))
   552 00000618 488B0425[C0010000]      	mov rax, qword [free_var_56]
   553                                  
   554 00000620 4889C7                  	mov rdi, rax
   555 00000623 E8E8000000              	call print_sexpr_if_not_void
   556                                  
   557 00000628 48BF-                           mov rdi, fmt_memory_usage
   557 0000062A [9E00000000000000] 
   558 00000632 488B3425[25010000]              mov rsi, qword [top_of_memory]
   559 0000063A 4881EE[C8010000]                sub rsi, memory
   560 00000641 B800000000                      mov rax, 0
   561                                  	ENTER
    33 00000646 C8000000            <1>  enter 0, 0
    34 0000064A 4883E4F0            <1>  and rsp, ~15
   562 0000064E E8(00000000)                    call printf
   563                                  	LEAVE
    38 00000653 C9                  <1>  leave
   564 00000654 C9                      	leave
   565 00000655 C3                      	ret
   566                                  
   567                                  L_error_non_closure:
   568 00000656 488B3C25[00000000]              mov rdi, qword [stderr]
   569 0000065E 48BE-                           mov rsi, fmt_non_closure
   569 00000660 [D500000000000000] 
   570 00000668 B800000000                      mov rax, 0
   571                                  	ENTER
    33 0000066D C8000000            <1>  enter 0, 0
    34 00000671 4883E4F0            <1>  and rsp, ~15
   572 00000675 E8(00000000)                    call fprintf
   573                                  	LEAVE
    38 0000067A C9                  <1>  leave
   574 0000067B 48C7C0FEFFFFFF                  mov rax, -2
   575 00000682 E8(00000000)                    call exit
   576                                  
   577                                  L_error_improper_list:
   578 00000687 488B3C25[00000000]      	mov rdi, qword [stderr]
   579 0000068F 48BE-                   	mov rsi, fmt_error_improper_list
   579 00000691 [FD00000000000000] 
   580 00000699 B800000000              	mov rax, 0
   581                                  	ENTER
    33 0000069E C8000000            <1>  enter 0, 0
    34 000006A2 4883E4F0            <1>  and rsp, ~15
   582 000006A6 E8(00000000)            	call fprintf
   583                                  	LEAVE
    38 000006AB C9                  <1>  leave
   584 000006AC 48C7C0F9FFFFFF          	mov rax, -7
   585 000006B3 E8(00000000)            	call exit
   586                                  
   587                                  L_error_incorrect_arity_simple:
   588 000006B8 488B3C25[00000000]              mov rdi, qword [stderr]
   589 000006C0 48BE-                           mov rsi, fmt_incorrect_arity_simple
   589 000006C2 [3F00000000000000] 
   590 000006CA EB12                            jmp L_error_incorrect_arity_common
   591                                  L_error_incorrect_arity_opt:
   592 000006CC 488B3C25[00000000]              mov rdi, qword [stderr]
   593 000006D4 48BE-                           mov rsi, fmt_incorrect_arity_opt
   593 000006D6 [6A00000000000000] 
   594                                  L_error_incorrect_arity_common:
   595 000006DE 5A                              pop rdx
   596 000006DF 59                              pop rcx
   597 000006E0 B800000000                      mov rax, 0
   598                                  	ENTER
    33 000006E5 C8000000            <1>  enter 0, 0
    34 000006E9 4883E4F0            <1>  and rsp, ~15
   599 000006ED E8(00000000)                    call fprintf
   600                                  	LEAVE
    38 000006F2 C9                  <1>  leave
   601 000006F3 48C7C0FAFFFFFF                  mov rax, -6
   602 000006FA E8(00000000)                    call exit
   603                                  
   604                                  section .data
   605                                  fmt_incorrect_arity_simple:
   606 0000003F 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   606 00000048 74656420256C642061-
   606 00000051 7267756D656E74732C-
   606 0000005A 206275742067697665-
   606 00000063 6E20256C640A00     
   607                                  fmt_incorrect_arity_opt:
   608 0000006A 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   608 00000073 746564206174206C65-
   608 0000007C 61737420256C642061-
   608 00000085 7267756D656E74732C-
   608 0000008E 206275742067697665-
   608 00000097 6E20256C640A00     
   609                                  fmt_memory_usage:
   610 0000009E 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   610 000000A7 6420256C6420627974-
   610 000000B0 6573206F662064796E-
   610 000000B9 616D6963616C6C792D-
   610 000000C2 616C6C6F6361746564-
   610 000000CB 206D656D6F72790A0A-
   610 000000D4 00                 
   611                                  fmt_non_closure:
   612 000000D5 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   612 000000DE 7074696E6720746F20-
   612 000000E7 6170706C792061206E-
   612 000000F0 6F6E2D636C6F737572-
   612 000000F9 65210A00           
   613                                  fmt_error_improper_list:
   614 000000FD 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   614 00000106 7267756D656E742069-
   614 0000010F 73206E6F7420612070-
   614 00000118 726F706572206C6973-
   614 00000121 74210A00           
   615                                  
   616                                  section .bss
   617                                  memory:
   618 000001C8 <res 40000000h>         	resb gbytes(1)
   619                                  
   620                                  section .data
   621                                  top_of_memory:
   622 00000125 [C801000000000000]              dq memory
   623                                  
   624                                  section .text
   625                                  malloc:
   626 000006FF 488B0425[25010000]              mov rax, qword [top_of_memory]
   627 00000707 48013C25[25010000]              add qword [top_of_memory], rdi
   628 0000070F C3                              ret
   629                                          
   630                                  print_sexpr_if_not_void:
   631 00000710 4881FF[00000000]        	cmp rdi, sob_void
   632 00000717 7501                    	jne print_sexpr
   633 00000719 C3                      	ret
   634                                  
   635                                  section .data
   636                                  fmt_void:
   637 0000012D 233C766F69643E00        	db `#<void>\0`
   638                                  fmt_nil:
   639 00000135 282900                  	db `()\0`
   640                                  fmt_boolean_false:
   641 00000138 236600                  	db `#f\0`
   642                                  fmt_boolean_true:
   643 0000013B 237400                  	db `#t\0`
   644                                  fmt_char_backslash:
   645 0000013E 235C5C00                	db `#\\\\\0`
   646                                  fmt_char_dquote:
   647 00000142 235C2200                	db `#\\"\0`
   648                                  fmt_char_simple:
   649 00000146 235C256300              	db `#\\%c\0`
   650                                  fmt_char_null:
   651 0000014B 235C6E756C00            	db `#\\nul\0`
   652                                  fmt_char_bell:
   653 00000151 235C62656C6C00          	db `#\\bell\0`
   654                                  fmt_char_backspace:
   655 00000158 235C6261636B737061-     	db `#\\backspace\0`
   655 00000161 636500             
   656                                  fmt_char_tab:
   657 00000164 235C74616200            	db `#\\tab\0`
   658                                  fmt_char_newline:
   659 0000016A 235C6E65776C696E65-     	db `#\\newline\0`
   659 00000173 00                 
   660                                  fmt_char_formfeed:
   661 00000174 235C7061676500          	db `#\\page\0`
   662                                  fmt_char_return:
   663 0000017B 235C72657475726E00      	db `#\\return\0`
   664                                  fmt_char_escape:
   665 00000184 235C65736300            	db `#\\esc\0`
   666                                  fmt_char_space:
   667 0000018A 235C737061636500        	db `#\\space\0`
   668                                  fmt_char_hex:
   669 00000192 235C782530325800        	db `#\\x%02X\0`
   670                                  fmt_closure:
   671 0000019A 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   671 000001A3 206174203078253038-
   671 000001AC 5820656E763D307825-
   671 000001B5 30385820636F64653D-
   671 000001BE 3078253038583E00   
   672                                  fmt_lparen:
   673 000001C6 2800                    	db `(\0`
   674                                  fmt_dotted_pair:
   675 000001C8 202E2000                	db ` . \0`
   676                                  fmt_rparen:
   677 000001CC 2900                    	db `)\0`
   678                                  fmt_space:
   679 000001CE 2000                    	db ` \0`
   680                                  fmt_empty_vector:
   681 000001D0 23282900                	db `#()\0`
   682                                  fmt_vector:
   683 000001D4 232800                  	db `#(\0`
   684                                  fmt_real:
   685 000001D7 256600                  	db `%f\0`
   686                                  fmt_fraction:
   687 000001DA 256C642F256C6400        	db `%ld/%ld\0`
   688                                  fmt_zero:
   689 000001E2 3000                    	db `0\0`
   690                                  fmt_int:
   691 000001E4 256C6400                	db `%ld\0`
   692                                  fmt_unknown_sexpr_error:
   693 000001E8 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   693 000001F1 6F723A20556E6B6E6F-
   693 000001FA 776E2074797065206F-
   693 00000203 662073657870722028-
   693 0000020C 3078253032582920   
   694 00000214 617420616464726573-     	db `at address 0x%08X\n\n\0`
   694 0000021D 73203078253038580A-
   694 00000226 0A00               
   695                                  fmt_dquote:
   696 00000228 2200                    	db `\"\0`
   697                                  fmt_string_char:
   698 0000022A 256300                          db `%c\0`
   699                                  fmt_string_char_7:
   700 0000022D 5C6100                          db `\\a\0`
   701                                  fmt_string_char_8:
   702 00000230 5C6200                          db `\\b\0`
   703                                  fmt_string_char_9:
   704 00000233 5C7400                          db `\\t\0`
   705                                  fmt_string_char_10:
   706 00000236 5C6E00                          db `\\n\0`
   707                                  fmt_string_char_11:
   708 00000239 5C7600                          db `\\v\0`
   709                                  fmt_string_char_12:
   710 0000023C 5C6600                          db `\\f\0`
   711                                  fmt_string_char_13:
   712 0000023F 5C7200                          db `\\r\0`
   713                                  fmt_string_char_34:
   714 00000242 5C2200                          db `\\"\0`
   715                                  fmt_string_char_92:
   716 00000245 5C5C00                          db `\\\\\0`
   717                                  fmt_string_char_hex:
   718 00000248 5C7825583B00                    db `\\x%X;\0`
   719                                  
   720                                  section .text
   721                                  
   722                                  print_sexpr:
   723                                  	ENTER
    33 0000071A C8000000            <1>  enter 0, 0
    34 0000071E 4883E4F0            <1>  and rsp, ~15
   724 00000722 8A07                    	mov al, byte [rdi]
   725 00000724 3C00                    	cmp al, T_void
   726 00000726 744D                    	je .Lvoid
   727 00000728 3C01                    	cmp al, T_nil
   728 0000072A 7458                    	je .Lnil
   729 0000072C 3C09                    	cmp al, T_boolean_false
   730 0000072E 7463                    	je .Lboolean_false
   731 00000730 3C0A                    	cmp al, T_boolean_true
   732 00000732 746E                    	je .Lboolean_true
   733 00000734 3C02                    	cmp al, T_char
   734 00000736 7479                    	je .Lchar
   735 00000738 3C04                    	cmp al, T_symbol
   736 0000073A 0F84BB010000            	je .Lsymbol
   737 00000740 3C21                    	cmp al, T_pair
   738 00000742 0F84D6010000            	je .Lpair
   739 00000748 3C22                    	cmp al, T_vector
   740 0000074A 0F849F020000            	je .Lvector
   741 00000750 3C05                    	cmp al, T_closure
   742 00000752 0F8489010000            	je .Lclosure
   743 00000758 3C12                    	cmp al, T_real
   744 0000075A 0F8430030000            	je .Lreal
   745 00000760 3C11                    	cmp al, T_rational
   746 00000762 0F8456030000            	je .Lrational
   747 00000768 3C03                    	cmp al, T_string
   748 0000076A 0F848F030000            	je .Lstring
   749                                  
   750 00000770 E9C7040000              	jmp .Lunknown_sexpr_type
   751                                  
   752                                  .Lvoid:
   753 00000775 48BF-                   	mov rdi, fmt_void
   753 00000777 [2D01000000000000] 
   754 0000077F E9F5040000              	jmp .Lemit
   755                                  
   756                                  .Lnil:
   757 00000784 48BF-                   	mov rdi, fmt_nil
   757 00000786 [3501000000000000] 
   758 0000078E E9E6040000              	jmp .Lemit
   759                                  
   760                                  .Lboolean_false:
   761 00000793 48BF-                   	mov rdi, fmt_boolean_false
   761 00000795 [3801000000000000] 
   762 0000079D E9D7040000              	jmp .Lemit
   763                                  
   764                                  .Lboolean_true:
   765 000007A2 48BF-                   	mov rdi, fmt_boolean_true
   765 000007A4 [3B01000000000000] 
   766 000007AC E9C8040000              	jmp .Lemit
   767                                  
   768                                  .Lchar:
   769 000007B1 8A4701                  	mov al, byte [rdi + 1]
   770 000007B4 3C20                    	cmp al, ' '
   771 000007B6 7E28                    	jle .Lchar_whitespace
   772 000007B8 3C5C                    	cmp al, 92 		; backslash
   773 000007BA 0F847C000000            	je .Lchar_backslash
   774 000007C0 3C22                    	cmp al, '"'
   775 000007C2 0F8483000000            	je .Lchar_dquote
   776 000007C8 4825FF000000            	and rax, 255
   777 000007CE 48BF-                   	mov rdi, fmt_char_simple
   777 000007D0 [4601000000000000] 
   778 000007D8 4889C6                  	mov rsi, rax
   779 000007DB E999040000              	jmp .Lemit
   780                                  
   781                                  .Lchar_whitespace:
   782 000007E0 3C00                    	cmp al, 0
   783 000007E2 7476                    	je .Lchar_null
   784 000007E4 3C07                    	cmp al, 7
   785 000007E6 0F847D000000            	je .Lchar_bell
   786 000007EC 3C08                    	cmp al, 8
   787 000007EE 0F8484000000            	je .Lchar_backspace
   788 000007F4 3C09                    	cmp al, 9
   789 000007F6 0F848B000000            	je .Lchar_tab
   790 000007FC 3C0A                    	cmp al, 10
   791 000007FE 0F8492000000            	je .Lchar_newline
   792 00000804 3C0C                    	cmp al, 12
   793 00000806 0F8499000000            	je .Lchar_formfeed
   794 0000080C 3C0D                    	cmp al, 13
   795 0000080E 0F84A0000000            	je .Lchar_return
   796 00000814 3C1B                    	cmp al, 27
   797 00000816 0F84A7000000            	je .Lchar_escape
   798 0000081C 4825FF000000            	and rax, 255
   799 00000822 3C20                    	cmp al, ' '
   800 00000824 0F84A8000000            	je .Lchar_space
   801 0000082A 48BF-                   	mov rdi, fmt_char_hex
   801 0000082C [9201000000000000] 
   802 00000834 4889C6                  	mov rsi, rax
   803 00000837 E93D040000              	jmp .Lemit	
   804                                  
   805                                  .Lchar_backslash:
   806 0000083C 48BF-                   	mov rdi, fmt_char_backslash
   806 0000083E [3E01000000000000] 
   807 00000846 E92E040000              	jmp .Lemit
   808                                  
   809                                  .Lchar_dquote:
   810 0000084B 48BF-                   	mov rdi, fmt_char_dquote
   810 0000084D [4201000000000000] 
   811 00000855 E91F040000              	jmp .Lemit
   812                                  
   813                                  .Lchar_null:
   814 0000085A 48BF-                   	mov rdi, fmt_char_null
   814 0000085C [4B01000000000000] 
   815 00000864 E910040000              	jmp .Lemit
   816                                  
   817                                  .Lchar_bell:
   818 00000869 48BF-                   	mov rdi, fmt_char_bell
   818 0000086B [5101000000000000] 
   819 00000873 E901040000              	jmp .Lemit
   820                                  
   821                                  .Lchar_backspace:
   822 00000878 48BF-                   	mov rdi, fmt_char_backspace
   822 0000087A [5801000000000000] 
   823 00000882 E9F2030000              	jmp .Lemit
   824                                  
   825                                  .Lchar_tab:
   826 00000887 48BF-                   	mov rdi, fmt_char_tab
   826 00000889 [6401000000000000] 
   827 00000891 E9E3030000              	jmp .Lemit
   828                                  
   829                                  .Lchar_newline:
   830 00000896 48BF-                   	mov rdi, fmt_char_newline
   830 00000898 [6A01000000000000] 
   831 000008A0 E9D4030000              	jmp .Lemit
   832                                  
   833                                  .Lchar_formfeed:
   834 000008A5 48BF-                   	mov rdi, fmt_char_formfeed
   834 000008A7 [7401000000000000] 
   835 000008AF E9C5030000              	jmp .Lemit
   836                                  
   837                                  .Lchar_return:
   838 000008B4 48BF-                   	mov rdi, fmt_char_return
   838 000008B6 [7B01000000000000] 
   839 000008BE E9B6030000              	jmp .Lemit
   840                                  
   841                                  .Lchar_escape:
   842 000008C3 48BF-                   	mov rdi, fmt_char_escape
   842 000008C5 [8401000000000000] 
   843 000008CD E9A7030000              	jmp .Lemit
   844                                  
   845                                  .Lchar_space:
   846 000008D2 48BF-                   	mov rdi, fmt_char_space
   846 000008D4 [8A01000000000000] 
   847 000008DC E998030000              	jmp .Lemit
   848                                  
   849                                  .Lclosure:
   850 000008E1 4889FE                  	mov rsi, qword rdi
   851 000008E4 48BF-                   	mov rdi, fmt_closure
   851 000008E6 [9A01000000000000] 
   852 000008EE 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   853 000008F2 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   854 000008F6 E97E030000              	jmp .Lemit
   855                                  
   856                                  .Lsymbol:
   857 000008FB 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   858 000008FF BE01000000              	mov rsi, 1		 ; size = 1 byte
   859 00000904 488B5701                	mov rdx, qword [rdi + 1] ; length
   860 00000908 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   861 0000090C 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   862 00000914 E8(00000000)            	call fwrite
   863 00000919 E970030000              	jmp .Lend
   864                                  	
   865                                  .Lpair:
   866 0000091E 57                      	push rdi
   867 0000091F 48BF-                   	mov rdi, fmt_lparen
   867 00000921 [C601000000000000] 
   868 00000929 B800000000              	mov rax, 0
   869                                          ENTER
    33 0000092E C8000000            <1>  enter 0, 0
    34 00000932 4883E4F0            <1>  and rsp, ~15
   870 00000936 E8(00000000)            	call printf
   871                                          LEAVE
    38 0000093B C9                  <1>  leave
   872 0000093C 488B3C24                	mov rdi, qword [rsp] 	; pair
   873 00000940 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   874 00000944 E8D1FDFFFF              	call print_sexpr
   875 00000949 5F                      	pop rdi 		; pair
   876 0000094A 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   877                                  .Lcdr:
   878 0000094E 8A07                    	mov al, byte [rdi]
   879 00000950 3C01                    	cmp al, T_nil
   880 00000952 7447                    	je .Lcdr_nil
   881 00000954 3C21                    	cmp al, T_pair
   882 00000956 7462                    	je .Lcdr_pair
   883 00000958 57                      	push rdi
   884 00000959 48BF-                   	mov rdi, fmt_dotted_pair
   884 0000095B [C801000000000000] 
   885 00000963 B800000000              	mov rax, 0
   886                                  	ENTER
    33 00000968 C8000000            <1>  enter 0, 0
    34 0000096C 4883E4F0            <1>  and rsp, ~15
   887 00000970 E8(00000000)            	call printf
   888                                  	LEAVE
    38 00000975 C9                  <1>  leave
   889 00000976 5F                      	pop rdi
   890 00000977 E89EFDFFFF              	call print_sexpr
   891 0000097C 48BF-                   	mov rdi, fmt_rparen
   891 0000097E [CC01000000000000] 
   892 00000986 B800000000              	mov rax, 0
   893                                  	ENTER
    33 0000098B C8000000            <1>  enter 0, 0
    34 0000098F 4883E4F0            <1>  and rsp, ~15
   894 00000993 E8(00000000)            	call printf
   895                                  	LEAVE
    38 00000998 C9                  <1>  leave
   896                                  	LEAVE
    38 00000999 C9                  <1>  leave
   897 0000099A C3                      	ret
   898                                  
   899                                  .Lcdr_nil:
   900 0000099B 48BF-                   	mov rdi, fmt_rparen
   900 0000099D [CC01000000000000] 
   901 000009A5 B800000000              	mov rax, 0
   902                                  	ENTER
    33 000009AA C8000000            <1>  enter 0, 0
    34 000009AE 4883E4F0            <1>  and rsp, ~15
   903 000009B2 E8(00000000)            	call printf
   904                                  	LEAVE
    38 000009B7 C9                  <1>  leave
   905                                  	LEAVE
    38 000009B8 C9                  <1>  leave
   906 000009B9 C3                      	ret
   907                                  
   908                                  .Lcdr_pair:
   909 000009BA 57                      	push rdi
   910 000009BB 48BF-                   	mov rdi, fmt_space
   910 000009BD [CE01000000000000] 
   911 000009C5 B800000000              	mov rax, 0
   912                                  	ENTER
    33 000009CA C8000000            <1>  enter 0, 0
    34 000009CE 4883E4F0            <1>  and rsp, ~15
   913 000009D2 E8(00000000)            	call printf
   914                                  	LEAVE
    38 000009D7 C9                  <1>  leave
   915 000009D8 488B3C24                	mov rdi, qword [rsp]
   916 000009DC 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   917 000009E0 E835FDFFFF              	call print_sexpr
   918 000009E5 5F                      	pop rdi
   919 000009E6 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   920 000009EA E95FFFFFFF              	jmp .Lcdr
   921                                  
   922                                  .Lvector:
   923 000009EF 488B4701                	mov rax, qword [rdi + 1] ; length
   924 000009F3 4883F800                	cmp rax, 0
   925 000009F7 0F8484000000            	je .Lvector_empty
   926 000009FD 57                      	push rdi
   927 000009FE 48BF-                   	mov rdi, fmt_vector
   927 00000A00 [D401000000000000] 
   928 00000A08 B800000000              	mov rax, 0
   929                                  	ENTER
    33 00000A0D C8000000            <1>  enter 0, 0
    34 00000A11 4883E4F0            <1>  and rsp, ~15
   930 00000A15 E8(00000000)            	call printf
   931                                  	LEAVE
    38 00000A1A C9                  <1>  leave
   932 00000A1B 488B3C24                	mov rdi, qword [rsp]
   933 00000A1F FF7701                  	push qword [rdi + 1]
   934 00000A22 6A01                    	push 1
   935 00000A24 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   936 00000A28 E8EDFCFFFF              	call print_sexpr
   937                                  .Lvector_loop:
   938                                  	; [rsp] index
   939                                  	; [rsp + 8*1] limit
   940                                  	; [rsp + 8*2] vector
   941 00000A2D 488B0424                	mov rax, qword [rsp]
   942 00000A31 483B442408              	cmp rax, qword [rsp + 8*1]
   943 00000A36 7436                    	je .Lvector_end
   944 00000A38 48BF-                   	mov rdi, fmt_space
   944 00000A3A [CE01000000000000] 
   945 00000A42 B800000000              	mov rax, 0
   946                                  	ENTER
    33 00000A47 C8000000            <1>  enter 0, 0
    34 00000A4B 4883E4F0            <1>  and rsp, ~15
   947 00000A4F E8(00000000)            	call printf
   948                                  	LEAVE
    38 00000A54 C9                  <1>  leave
   949 00000A55 488B0424                	mov rax, qword [rsp]
   950 00000A59 488B5C2410              	mov rbx, qword [rsp + 8*2]
   951 00000A5E 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   952 00000A63 E8B2FCFFFF              	call print_sexpr
   953 00000A68 48FF0424                	inc qword [rsp]
   954 00000A6C EBBF                    	jmp .Lvector_loop
   955                                  
   956                                  .Lvector_end:
   957 00000A6E 4883C418                	add rsp, 8*3
   958 00000A72 48BF-                   	mov rdi, fmt_rparen
   958 00000A74 [CC01000000000000] 
   959 00000A7C E9F8010000              	jmp .Lemit	
   960                                  
   961                                  .Lvector_empty:
   962 00000A81 48BF-                   	mov rdi, fmt_empty_vector
   962 00000A83 [D001000000000000] 
   963 00000A8B E9E9010000              	jmp .Lemit
   964                                  
   965                                  .Lreal:
   966 00000A90 FF7701                  	push qword [rdi + 1]
   967 00000A93 F20F100424              	movsd xmm0, qword [rsp]
   968 00000A98 4883C408                	add rsp, 8*1
   969 00000A9C 48BF-                   	mov rdi, fmt_real
   969 00000A9E [D701000000000000] 
   970 00000AA6 B801000000              	mov rax, 1
   971                                  	ENTER
    33 00000AAB C8000000            <1>  enter 0, 0
    34 00000AAF 4883E4F0            <1>  and rsp, ~15
   972 00000AB3 E8(00000000)            	call printf
   973                                  	LEAVE
    38 00000AB8 C9                  <1>  leave
   974 00000AB9 E9D0010000              	jmp .Lend
   975                                  
   976                                  .Lrational:
   977 00000ABE 488B7701                	mov rsi, qword [rdi + 1]
   978 00000AC2 488B5709                	mov rdx, qword [rdi + 1 + 8]
   979 00000AC6 4883FE00                	cmp rsi, 0
   980 00000ACA 7415                    	je .Lrat_zero
   981 00000ACC 4883FA01                	cmp rdx, 1
   982 00000AD0 741E                    	je .Lrat_int
   983 00000AD2 48BF-                   	mov rdi, fmt_fraction
   983 00000AD4 [DA01000000000000] 
   984 00000ADC E998010000              	jmp .Lemit
   985                                  
   986                                  .Lrat_zero:
   987 00000AE1 48BF-                   	mov rdi, fmt_zero
   987 00000AE3 [E201000000000000] 
   988 00000AEB E989010000              	jmp .Lemit
   989                                  
   990                                  .Lrat_int:
   991 00000AF0 48BF-                   	mov rdi, fmt_int
   991 00000AF2 [E401000000000000] 
   992 00000AFA E97A010000              	jmp .Lemit
   993                                  
   994                                  .Lstring:
   995 00000AFF 488D4709                	lea rax, [rdi + 1 + 8]
   996 00000B03 50                      	push rax
   997 00000B04 FF7701                  	push qword [rdi + 1]
   998 00000B07 48BF-                   	mov rdi, fmt_dquote
   998 00000B09 [2802000000000000] 
   999 00000B11 B800000000              	mov rax, 0
  1000                                  	ENTER
    33 00000B16 C8000000            <1>  enter 0, 0
    34 00000B1A 4883E4F0            <1>  and rsp, ~15
  1001 00000B1E E8(00000000)            	call printf
  1002                                  	LEAVE
    38 00000B23 C9                  <1>  leave
  1003                                  .Lstring_loop:
  1004                                  	; qword [rsp]: limit
  1005                                  	; qword [rsp + 8*1]: char *
  1006 00000B24 48833C2400              	cmp qword [rsp], 0
  1007 00000B29 0F84FD000000            	je .Lstring_end
  1008 00000B2F 488B442408              	mov rax, qword [rsp + 8*1]
  1009 00000B34 8A00                    	mov al, byte [rax]
  1010 00000B36 4825FF000000            	and rax, 255
  1011 00000B3C 3C07                    	cmp al, 7
  1012 00000B3E 7468                            je .Lstring_char_7
  1013 00000B40 3C08                            cmp al, 8
  1014 00000B42 7470                            je .Lstring_char_8
  1015 00000B44 3C09                            cmp al, 9
  1016 00000B46 7478                            je .Lstring_char_9
  1017 00000B48 3C0A                            cmp al, 10
  1018 00000B4A 0F847C000000                    je .Lstring_char_10
  1019 00000B50 3C0B                            cmp al, 11
  1020 00000B52 0F8480000000                    je .Lstring_char_11
  1021 00000B58 3C0C                            cmp al, 12
  1022 00000B5A 0F8484000000                    je .Lstring_char_12
  1023 00000B60 3C0D                            cmp al, 13
  1024 00000B62 0F8488000000                    je .Lstring_char_13
  1025 00000B68 3C22                            cmp al, 34
  1026 00000B6A 0F848C000000                    je .Lstring_char_34
  1027 00000B70 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1029 00000B72 3C20                            cmp al, ' '
  1030 00000B74 0F8CA0000000                    jl .Lstring_char_hex
  1031 00000B7A 48BF-                           mov rdi, fmt_string_char
  1031 00000B7C [2A02000000000000] 
  1032 00000B84 4889C6                          mov rsi, rax
  1033                                  .Lstring_char_emit:
  1034 00000B87 B800000000                      mov rax, 0
  1035                                          ENTER
    33 00000B8C C8000000            <1>  enter 0, 0
    34 00000B90 4883E4F0            <1>  and rsp, ~15
  1036 00000B94 E8(00000000)                    call printf
  1037                                          LEAVE
    38 00000B99 C9                  <1>  leave
  1038 00000B9A 48FF0C24                        dec qword [rsp]
  1039 00000B9E 48FF442408                      inc qword [rsp + 8*1]
  1040 00000BA3 E97CFFFFFF                      jmp .Lstring_loop
  1041                                  
  1042                                  .Lstring_char_7:
  1043 00000BA8 48BF-                           mov rdi, fmt_string_char_7
  1043 00000BAA [2D02000000000000] 
  1044 00000BB2 EBD3                            jmp .Lstring_char_emit
  1045                                  
  1046                                  .Lstring_char_8:
  1047 00000BB4 48BF-                           mov rdi, fmt_string_char_8
  1047 00000BB6 [3002000000000000] 
  1048 00000BBE EBC7                            jmp .Lstring_char_emit
  1049                                          
  1050                                  .Lstring_char_9:
  1051 00000BC0 48BF-                           mov rdi, fmt_string_char_9
  1051 00000BC2 [3302000000000000] 
  1052 00000BCA EBBB                            jmp .Lstring_char_emit
  1053                                  
  1054                                  .Lstring_char_10:
  1055 00000BCC 48BF-                           mov rdi, fmt_string_char_10
  1055 00000BCE [3602000000000000] 
  1056 00000BD6 EBAF                            jmp .Lstring_char_emit
  1057                                  
  1058                                  .Lstring_char_11:
  1059 00000BD8 48BF-                           mov rdi, fmt_string_char_11
  1059 00000BDA [3902000000000000] 
  1060 00000BE2 EBA3                            jmp .Lstring_char_emit
  1061                                  
  1062                                  .Lstring_char_12:
  1063 00000BE4 48BF-                           mov rdi, fmt_string_char_12
  1063 00000BE6 [3C02000000000000] 
  1064 00000BEE EB97                            jmp .Lstring_char_emit
  1065                                  
  1066                                  .Lstring_char_13:
  1067 00000BF0 48BF-                           mov rdi, fmt_string_char_13
  1067 00000BF2 [3F02000000000000] 
  1068 00000BFA EB8B                            jmp .Lstring_char_emit
  1069                                  
  1070                                  .Lstring_char_34:
  1071 00000BFC 48BF-                           mov rdi, fmt_string_char_34
  1071 00000BFE [4202000000000000] 
  1072 00000C06 E97CFFFFFF                      jmp .Lstring_char_emit
  1073                                  
  1074                                  .Lstring_char_92:
  1075 00000C0B 48BF-                           mov rdi, fmt_string_char_92
  1075 00000C0D [4502000000000000] 
  1076 00000C15 E96DFFFFFF                      jmp .Lstring_char_emit
  1077                                  
  1078                                  .Lstring_char_hex:
  1079 00000C1A 48BF-                           mov rdi, fmt_string_char_hex
  1079 00000C1C [4802000000000000] 
  1080 00000C24 4889C6                          mov rsi, rax
  1081 00000C27 E95BFFFFFF                      jmp .Lstring_char_emit        
  1082                                  
  1083                                  .Lstring_end:
  1084 00000C2C 4883C410                	add rsp, 8 * 2
  1085 00000C30 48BF-                   	mov rdi, fmt_dquote
  1085 00000C32 [2802000000000000] 
  1086 00000C3A EB3D                    	jmp .Lemit
  1087                                  
  1088                                  .Lunknown_sexpr_type:
  1089 00000C3C 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1089 00000C3E [E801000000000000] 
  1090 00000C46 4825FF000000            	and rax, 255
  1091 00000C4C 4889C2                  	mov rdx, rax
  1092 00000C4F 4889F9                  	mov rcx, rdi
  1093 00000C52 488B3C25[00000000]      	mov rdi, qword [stderr]
  1094 00000C5A B800000000              	mov rax, 0
  1095                                  	ENTER
    33 00000C5F C8000000            <1>  enter 0, 0
    34 00000C63 4883E4F0            <1>  and rsp, ~15
  1096 00000C67 E8(00000000)            	call fprintf
  1097                                  	LEAVE
    38 00000C6C C9                  <1>  leave
  1098 00000C6D 48C7C0FFFFFFFF          	mov rax, -1
  1099 00000C74 E8(00000000)            	call exit
  1100                                  
  1101                                  .Lemit:
  1102 00000C79 B800000000              	mov rax, 0
  1103                                  	ENTER
    33 00000C7E C8000000            <1>  enter 0, 0
    34 00000C82 4883E4F0            <1>  and rsp, ~15
  1104 00000C86 E8(00000000)            	call printf
  1105                                  	LEAVE
    38 00000C8B C9                  <1>  leave
  1106 00000C8C EB00                    	jmp .Lend
  1107                                  
  1108                                  .Lend:
  1109                                  	LEAVE
    38 00000C8E C9                  <1>  leave
  1110 00000C8F C3                      	ret
  1111                                  
  1112                                  ;;; rdi: address of free variable
  1113                                  ;;; rsi: address of code-pointer
  1114                                  bind_primitive:
  1115                                          ENTER
    33 00000C90 C8000000            <1>  enter 0, 0
    34 00000C94 4883E4F0            <1>  and rsp, ~15
  1116 00000C98 57                              push rdi
  1117 00000C99 BF11000000                      mov rdi, (1 + 8 + 8)
  1118 00000C9E E85CFAFFFF                      call malloc
  1119 00000CA3 5F                              pop rdi
  1120 00000CA4 C60005                          mov byte [rax], T_closure
  1121 00000CA7 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1122 00000CAF 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1123 00000CB3 488907                          mov qword [rdi], rax
  1124                                          LEAVE
    38 00000CB6 C9                  <1>  leave
  1125 00000CB7 C3                              ret
  1126                                  
  1127                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1128                                  L_code_ptr_bin_apply:
  1129                                  	
  1130                                  L_code_ptr_is_null:
  1131                                          ENTER
    33 00000CB8 C8000000            <1>  enter 0, 0
    34 00000CBC 4883E4F0            <1>  and rsp, ~15
  1132 00000CC0 48837D1801                      cmp COUNT, 1
  1133 00000CC5 0F85A5100000                    jne L_error_arg_count_1
  1134 00000CCB 488B4520                        mov rax, PARAM(0)
  1135 00000CCF 803801                          cmp byte [rax], T_nil
  1136 00000CD2 750C                            jne .L_false
  1137 00000CD4 48B8-                           mov rax, sob_boolean_true
  1137 00000CD6 [0300000000000000] 
  1138 00000CDE EB0A                            jmp .L_end
  1139                                  .L_false:
  1140 00000CE0 48B8-                           mov rax, sob_boolean_false
  1140 00000CE2 [0200000000000000] 
  1141                                  .L_end:
  1142                                          LEAVE
    38 00000CEA C9                  <1>  leave
  1143 00000CEB C21800                          ret AND_KILL_FRAME(1)
  1144                                  
  1145                                  L_code_ptr_is_pair:
  1146                                          ENTER
    33 00000CEE C8000000            <1>  enter 0, 0
    34 00000CF2 4883E4F0            <1>  and rsp, ~15
  1147 00000CF6 48837D1801                      cmp COUNT, 1
  1148 00000CFB 0F856F100000                    jne L_error_arg_count_1
  1149 00000D01 488B4520                        mov rax, PARAM(0)
  1150 00000D05 803821                          cmp byte [rax], T_pair
  1151 00000D08 750C                            jne .L_false
  1152 00000D0A 48B8-                           mov rax, sob_boolean_true
  1152 00000D0C [0300000000000000] 
  1153 00000D14 EB0A                            jmp .L_end
  1154                                  .L_false:
  1155 00000D16 48B8-                           mov rax, sob_boolean_false
  1155 00000D18 [0200000000000000] 
  1156                                  .L_end:
  1157                                          LEAVE
    38 00000D20 C9                  <1>  leave
  1158 00000D21 C21800                          ret AND_KILL_FRAME(1)
  1159                                          
  1160                                  L_code_ptr_is_void:
  1161                                          ENTER
    33 00000D24 C8000000            <1>  enter 0, 0
    34 00000D28 4883E4F0            <1>  and rsp, ~15
  1162 00000D2C 48837D1801                      cmp COUNT, 1
  1163 00000D31 0F8539100000                    jne L_error_arg_count_1
  1164 00000D37 488B4520                        mov rax, PARAM(0)
  1165 00000D3B 803800                          cmp byte [rax], T_void
  1166 00000D3E 750C                            jne .L_false
  1167 00000D40 48B8-                           mov rax, sob_boolean_true
  1167 00000D42 [0300000000000000] 
  1168 00000D4A EB0A                            jmp .L_end
  1169                                  .L_false:
  1170 00000D4C 48B8-                           mov rax, sob_boolean_false
  1170 00000D4E [0200000000000000] 
  1171                                  .L_end:
  1172                                          LEAVE
    38 00000D56 C9                  <1>  leave
  1173 00000D57 C21800                          ret AND_KILL_FRAME(1)
  1174                                  
  1175                                  L_code_ptr_is_char:
  1176                                          ENTER
    33 00000D5A C8000000            <1>  enter 0, 0
    34 00000D5E 4883E4F0            <1>  and rsp, ~15
  1177 00000D62 48837D1801                      cmp COUNT, 1
  1178 00000D67 0F8503100000                    jne L_error_arg_count_1
  1179 00000D6D 488B4520                        mov rax, PARAM(0)
  1180 00000D71 803802                          cmp byte [rax], T_char
  1181 00000D74 750C                            jne .L_false
  1182 00000D76 48B8-                           mov rax, sob_boolean_true
  1182 00000D78 [0300000000000000] 
  1183 00000D80 EB0A                            jmp .L_end
  1184                                  .L_false:
  1185 00000D82 48B8-                           mov rax, sob_boolean_false
  1185 00000D84 [0200000000000000] 
  1186                                  .L_end:
  1187                                          LEAVE
    38 00000D8C C9                  <1>  leave
  1188 00000D8D C21800                          ret AND_KILL_FRAME(1)
  1189                                  
  1190                                  L_code_ptr_is_string:
  1191                                          ENTER
    33 00000D90 C8000000            <1>  enter 0, 0
    34 00000D94 4883E4F0            <1>  and rsp, ~15
  1192 00000D98 48837D1801                      cmp COUNT, 1
  1193 00000D9D 0F85CD0F0000                    jne L_error_arg_count_1
  1194 00000DA3 488B4520                        mov rax, PARAM(0)
  1195 00000DA7 803803                          cmp byte [rax], T_string
  1196 00000DAA 750C                            jne .L_false
  1197 00000DAC 48B8-                           mov rax, sob_boolean_true
  1197 00000DAE [0300000000000000] 
  1198 00000DB6 EB0A                            jmp .L_end
  1199                                  .L_false:
  1200 00000DB8 48B8-                           mov rax, sob_boolean_false
  1200 00000DBA [0200000000000000] 
  1201                                  .L_end:
  1202                                          LEAVE
    38 00000DC2 C9                  <1>  leave
  1203 00000DC3 C21800                          ret AND_KILL_FRAME(1)
  1204                                  
  1205                                  L_code_ptr_is_symbol:
  1206                                          ENTER
    33 00000DC6 C8000000            <1>  enter 0, 0
    34 00000DCA 4883E4F0            <1>  and rsp, ~15
  1207 00000DCE 48837D1801                      cmp COUNT, 1
  1208 00000DD3 0F85970F0000                    jne L_error_arg_count_1
  1209 00000DD9 488B4520                        mov rax, PARAM(0)
  1210 00000DDD 803804                          cmp byte [rax], T_symbol
  1211 00000DE0 750C                            jne .L_false
  1212 00000DE2 48B8-                           mov rax, sob_boolean_true
  1212 00000DE4 [0300000000000000] 
  1213 00000DEC EB0A                            jmp .L_end
  1214                                  .L_false:
  1215 00000DEE 48B8-                           mov rax, sob_boolean_false
  1215 00000DF0 [0200000000000000] 
  1216                                  .L_end:
  1217                                          LEAVE
    38 00000DF8 C9                  <1>  leave
  1218 00000DF9 C21800                          ret AND_KILL_FRAME(1)
  1219                                  
  1220                                  L_code_ptr_is_vector:
  1221                                          ENTER
    33 00000DFC C8000000            <1>  enter 0, 0
    34 00000E00 4883E4F0            <1>  and rsp, ~15
  1222 00000E04 48837D1801                      cmp COUNT, 1
  1223 00000E09 0F85610F0000                    jne L_error_arg_count_1
  1224 00000E0F 488B4520                        mov rax, PARAM(0)
  1225 00000E13 803822                          cmp byte [rax], T_vector
  1226 00000E16 750C                            jne .L_false
  1227 00000E18 48B8-                           mov rax, sob_boolean_true
  1227 00000E1A [0300000000000000] 
  1228 00000E22 EB0A                            jmp .L_end
  1229                                  .L_false:
  1230 00000E24 48B8-                           mov rax, sob_boolean_false
  1230 00000E26 [0200000000000000] 
  1231                                  .L_end:
  1232                                          LEAVE
    38 00000E2E C9                  <1>  leave
  1233 00000E2F C21800                          ret AND_KILL_FRAME(1)
  1234                                  
  1235                                  L_code_ptr_is_closure:
  1236                                          ENTER
    33 00000E32 C8000000            <1>  enter 0, 0
    34 00000E36 4883E4F0            <1>  and rsp, ~15
  1237 00000E3A 48837D1801                      cmp COUNT, 1
  1238 00000E3F 0F852B0F0000                    jne L_error_arg_count_1
  1239 00000E45 488B4520                        mov rax, PARAM(0)
  1240 00000E49 803805                          cmp byte [rax], T_closure
  1241 00000E4C 750C                            jne .L_false
  1242 00000E4E 48B8-                           mov rax, sob_boolean_true
  1242 00000E50 [0300000000000000] 
  1243 00000E58 EB0A                            jmp .L_end
  1244                                  .L_false:
  1245 00000E5A 48B8-                           mov rax, sob_boolean_false
  1245 00000E5C [0200000000000000] 
  1246                                  .L_end:
  1247                                          LEAVE
    38 00000E64 C9                  <1>  leave
  1248 00000E65 C21800                          ret AND_KILL_FRAME(1)
  1249                                  
  1250                                  L_code_ptr_is_real:
  1251                                          ENTER
    33 00000E68 C8000000            <1>  enter 0, 0
    34 00000E6C 4883E4F0            <1>  and rsp, ~15
  1252 00000E70 48837D1801                      cmp COUNT, 1
  1253 00000E75 0F85F50E0000                    jne L_error_arg_count_1
  1254 00000E7B 488B4520                        mov rax, PARAM(0)
  1255 00000E7F 803812                          cmp byte [rax], T_real
  1256 00000E82 750C                            jne .L_false
  1257 00000E84 48B8-                           mov rax, sob_boolean_true
  1257 00000E86 [0300000000000000] 
  1258 00000E8E EB0A                            jmp .L_end
  1259                                  .L_false:
  1260 00000E90 48B8-                           mov rax, sob_boolean_false
  1260 00000E92 [0200000000000000] 
  1261                                  .L_end:
  1262                                          LEAVE
    38 00000E9A C9                  <1>  leave
  1263 00000E9B C21800                          ret AND_KILL_FRAME(1)
  1264                                  
  1265                                  L_code_ptr_is_rational:
  1266                                          ENTER
    33 00000E9E C8000000            <1>  enter 0, 0
    34 00000EA2 4883E4F0            <1>  and rsp, ~15
  1267 00000EA6 48837D1801                      cmp COUNT, 1
  1268 00000EAB 0F85BF0E0000                    jne L_error_arg_count_1
  1269 00000EB1 488B4520                        mov rax, PARAM(0)
  1270 00000EB5 803811                          cmp byte [rax], T_rational
  1271 00000EB8 750C                            jne .L_false
  1272 00000EBA 48B8-                           mov rax, sob_boolean_true
  1272 00000EBC [0300000000000000] 
  1273 00000EC4 EB0A                            jmp .L_end
  1274                                  .L_false:
  1275 00000EC6 48B8-                           mov rax, sob_boolean_false
  1275 00000EC8 [0200000000000000] 
  1276                                  .L_end:
  1277                                          LEAVE
    38 00000ED0 C9                  <1>  leave
  1278 00000ED1 C21800                          ret AND_KILL_FRAME(1)
  1279                                  
  1280                                  L_code_ptr_is_boolean:
  1281                                          ENTER
    33 00000ED4 C8000000            <1>  enter 0, 0
    34 00000ED8 4883E4F0            <1>  and rsp, ~15
  1282 00000EDC 48837D1801                      cmp COUNT, 1
  1283 00000EE1 0F85890E0000                    jne L_error_arg_count_1
  1284 00000EE7 488B4520                        mov rax, PARAM(0)
  1285 00000EEB 8A18                            mov bl, byte [rax]
  1286 00000EED 80E308                          and bl, T_boolean
  1287 00000EF0 740C                            je .L_false
  1288 00000EF2 48B8-                           mov rax, sob_boolean_true
  1288 00000EF4 [0300000000000000] 
  1289 00000EFC EB0A                            jmp .L_end
  1290                                  .L_false:
  1291 00000EFE 48B8-                           mov rax, sob_boolean_false
  1291 00000F00 [0200000000000000] 
  1292                                  .L_end:
  1293                                          LEAVE
    38 00000F08 C9                  <1>  leave
  1294 00000F09 C21800                          ret AND_KILL_FRAME(1)
  1295                                          
  1296                                  L_code_ptr_is_number:
  1297                                          ENTER
    33 00000F0C C8000000            <1>  enter 0, 0
    34 00000F10 4883E4F0            <1>  and rsp, ~15
  1298 00000F14 48837D1801                      cmp COUNT, 1
  1299 00000F19 0F85510E0000                    jne L_error_arg_count_1
  1300 00000F1F 488B4520                        mov rax, PARAM(0)
  1301 00000F23 8A18                            mov bl, byte [rax]
  1302 00000F25 80E310                          and bl, T_number
  1303 00000F28 740C                            je .L_false
  1304 00000F2A 48B8-                           mov rax, sob_boolean_true
  1304 00000F2C [0300000000000000] 
  1305 00000F34 EB0A                            jmp .L_end
  1306                                  .L_false:
  1307 00000F36 48B8-                           mov rax, sob_boolean_false
  1307 00000F38 [0200000000000000] 
  1308                                  .L_end:
  1309                                          LEAVE
    38 00000F40 C9                  <1>  leave
  1310 00000F41 C21800                          ret AND_KILL_FRAME(1)
  1311                                          
  1312                                  L_code_ptr_is_collection:
  1313                                          ENTER
    33 00000F44 C8000000            <1>  enter 0, 0
    34 00000F48 4883E4F0            <1>  and rsp, ~15
  1314 00000F4C 48837D1801                      cmp COUNT, 1
  1315 00000F51 0F85190E0000                    jne L_error_arg_count_1
  1316 00000F57 488B4520                        mov rax, PARAM(0)
  1317 00000F5B 8A18                            mov bl, byte [rax]
  1318 00000F5D 80E320                          and bl, T_collection
  1319 00000F60 740C                            je .L_false
  1320 00000F62 48B8-                           mov rax, sob_boolean_true
  1320 00000F64 [0300000000000000] 
  1321 00000F6C EB0A                            jmp .L_end
  1322                                  .L_false:
  1323 00000F6E 48B8-                           mov rax, sob_boolean_false
  1323 00000F70 [0200000000000000] 
  1324                                  .L_end:
  1325                                          LEAVE
    38 00000F78 C9                  <1>  leave
  1326 00000F79 C21800                          ret AND_KILL_FRAME(1)
  1327                                  
  1328                                  L_code_ptr_cons:
  1329                                          ENTER
    33 00000F7C C8000000            <1>  enter 0, 0
    34 00000F80 4883E4F0            <1>  and rsp, ~15
  1330 00000F84 48837D1802                      cmp COUNT, 2
  1331 00000F89 0F85160E0000                    jne L_error_arg_count_2
  1332 00000F8F BF11000000                      mov rdi, (1 + 8 + 8)
  1333 00000F94 E866F7FFFF                      call malloc
  1334 00000F99 C60021                          mov byte [rax], T_pair
  1335 00000F9C 488B5D20                        mov rbx, PARAM(0)
  1336 00000FA0 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1337 00000FA4 488B5D28                        mov rbx, PARAM(1)
  1338 00000FA8 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1339                                          LEAVE
    38 00000FAC C9                  <1>  leave
  1340 00000FAD C22000                          ret AND_KILL_FRAME(2)
  1341                                  
  1342                                  L_code_ptr_display_sexpr:
  1343                                          ENTER
    33 00000FB0 C8000000            <1>  enter 0, 0
    34 00000FB4 4883E4F0            <1>  and rsp, ~15
  1344 00000FB8 48837D1801                      cmp COUNT, 1
  1345 00000FBD 0F85AD0D0000                    jne L_error_arg_count_1
  1346 00000FC3 488B7D20                        mov rdi, PARAM(0)
  1347 00000FC7 E84EF7FFFF                      call print_sexpr
  1348 00000FCC 48B8-                           mov rax, sob_void
  1348 00000FCE [0000000000000000] 
  1349                                          LEAVE
    38 00000FD6 C9                  <1>  leave
  1350 00000FD7 C21800                          ret AND_KILL_FRAME(1)
  1351                                  
  1352                                  L_code_ptr_write_char:
  1353                                          ENTER
    33 00000FDA C8000000            <1>  enter 0, 0
    34 00000FDE 4883E4F0            <1>  and rsp, ~15
  1354 00000FE2 48837D1801                      cmp COUNT, 1
  1355 00000FE7 0F85830D0000                    jne L_error_arg_count_1
  1356 00000FED 488B4520                        mov rax, PARAM(0)
  1357                                          assert_char(rax)
    42 00000FF1 803802              <1>  cmp byte [%1], %2
    43 00000FF4 0F854A0E0000        <1>  jne L_error_incorrect_type
  1358 00000FFA 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1359 00000FFD 4825FF000000                    and rax, 255
  1360 00001003 48BF-                           mov rdi, fmt_char
  1360 00001005 [4E02000000000000] 
  1361 0000100D 4889C6                          mov rsi, rax
  1362 00001010 B800000000                      mov rax, 0
  1363                                  	ENTER
    33 00001015 C8000000            <1>  enter 0, 0
    34 00001019 4883E4F0            <1>  and rsp, ~15
  1364 0000101D E8(00000000)                    call printf
  1365                                  	LEAVE
    38 00001022 C9                  <1>  leave
  1366 00001023 48B8-                           mov rax, sob_void
  1366 00001025 [0000000000000000] 
  1367                                          LEAVE
    38 0000102D C9                  <1>  leave
  1368 0000102E C21800                          ret AND_KILL_FRAME(1)
  1369                                  
  1370                                  L_code_ptr_car:
  1371                                          ENTER
    33 00001031 C8000000            <1>  enter 0, 0
    34 00001035 4883E4F0            <1>  and rsp, ~15
  1372 00001039 48837D1801                      cmp COUNT, 1
  1373 0000103E 0F852C0D0000                    jne L_error_arg_count_1
  1374 00001044 488B4520                        mov rax, PARAM(0)
  1375                                          assert_pair(rax)
    42 00001048 803821              <1>  cmp byte [%1], %2
    43 0000104B 0F85F30D0000        <1>  jne L_error_incorrect_type
  1376 00001051 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1377                                          LEAVE
    38 00001055 C9                  <1>  leave
  1378 00001056 C21800                          ret AND_KILL_FRAME(1)
  1379                                          
  1380                                  L_code_ptr_cdr:
  1381                                          ENTER
    33 00001059 C8000000            <1>  enter 0, 0
    34 0000105D 4883E4F0            <1>  and rsp, ~15
  1382 00001061 48837D1801                      cmp COUNT, 1
  1383 00001066 0F85040D0000                    jne L_error_arg_count_1
  1384 0000106C 488B4520                        mov rax, PARAM(0)
  1385                                          assert_pair(rax)
    42 00001070 803821              <1>  cmp byte [%1], %2
    43 00001073 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1386 00001079 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1387                                          LEAVE
    38 0000107D C9                  <1>  leave
  1388 0000107E C21800                          ret AND_KILL_FRAME(1)
  1389                                          
  1390                                  L_code_ptr_string_length:
  1391                                          ENTER
    33 00001081 C8000000            <1>  enter 0, 0
    34 00001085 4883E4F0            <1>  and rsp, ~15
  1392 00001089 48837D1801                      cmp COUNT, 1
  1393 0000108E 0F85DC0C0000                    jne L_error_arg_count_1
  1394 00001094 488B4520                        mov rax, PARAM(0)
  1395                                          assert_string(rax)
    42 00001098 803803              <1>  cmp byte [%1], %2
    43 0000109B 0F85A30D0000        <1>  jne L_error_incorrect_type
  1396 000010A1 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1397 000010A5 E83A0C0000                      call make_integer
  1398                                          LEAVE
    38 000010AA C9                  <1>  leave
  1399 000010AB C21800                          ret AND_KILL_FRAME(1)
  1400                                  
  1401                                  L_code_ptr_vector_length:
  1402                                          ENTER
    33 000010AE C8000000            <1>  enter 0, 0
    34 000010B2 4883E4F0            <1>  and rsp, ~15
  1403 000010B6 48837D1801                      cmp COUNT, 1
  1404 000010BB 0F85AF0C0000                    jne L_error_arg_count_1
  1405 000010C1 488B4520                        mov rax, PARAM(0)
  1406                                          assert_vector(rax)
    42 000010C5 803822              <1>  cmp byte [%1], %2
    43 000010C8 0F85760D0000        <1>  jne L_error_incorrect_type
  1407 000010CE 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1408 000010D2 E80D0C0000                      call make_integer
  1409                                          LEAVE
    38 000010D7 C9                  <1>  leave
  1410 000010D8 C21800                          ret AND_KILL_FRAME(1)
  1411                                  
  1412                                  L_code_ptr_real_to_integer:
  1413                                          ENTER
    33 000010DB C8000000            <1>  enter 0, 0
    34 000010DF 4883E4F0            <1>  and rsp, ~15
  1414 000010E3 48837D1801                      cmp COUNT, 1
  1415 000010E8 0F85820C0000                    jne L_error_arg_count_1
  1416 000010EE 488B5D20                        mov rbx, PARAM(0)
  1417                                          assert_real(rbx)
    42 000010F2 803B12              <1>  cmp byte [%1], %2
    43 000010F5 0F85490D0000        <1>  jne L_error_incorrect_type
  1418 000010FB F20F104301                      movsd xmm0, qword [rbx + 1]
  1419 00001100 F2480F2CF8                      cvttsd2si rdi, xmm0
  1420 00001105 E8DA0B0000                      call make_integer
  1421                                          LEAVE
    38 0000110A C9                  <1>  leave
  1422 0000110B C21800                          ret AND_KILL_FRAME(1)
  1423                                  
  1424                                  L_code_ptr_exit:
  1425                                          ENTER
    33 0000110E C8000000            <1>  enter 0, 0
    34 00001112 4883E4F0            <1>  and rsp, ~15
  1426 00001116 48837D1800                      cmp COUNT, 0
  1427 0000111B 0F851A0C0000                    jne L_error_arg_count_0
  1428 00001121 B800000000                      mov rax, 0
  1429 00001126 E8(00000000)                    call exit
  1430                                  
  1431                                  L_code_ptr_integer_to_real:
  1432                                          ENTER
    33 0000112B C8000000            <1>  enter 0, 0
    34 0000112F 4883E4F0            <1>  and rsp, ~15
  1433 00001133 48837D1801                      cmp COUNT, 1
  1434 00001138 0F85320C0000                    jne L_error_arg_count_1
  1435 0000113E 488B4520                        mov rax, PARAM(0)
  1436                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001142 803811              <2>  cmp byte [%1], %2
    43 00001145 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 0000114B 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001150 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1437 00001156 FF7001                          push qword [rax + 1]
  1438 00001159 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1439 0000115F E8640B0000                      call make_real
  1440                                          LEAVE
    38 00001164 C9                  <1>  leave
  1441 00001165 C21800                          ret AND_KILL_FRAME(1)
  1442                                  
  1443                                  L_code_ptr_rational_to_real:
  1444                                          ENTER
    33 00001168 C8000000            <1>  enter 0, 0
    34 0000116C 4883E4F0            <1>  and rsp, ~15
  1445 00001170 48837D1801                      cmp COUNT, 1
  1446 00001175 0F85F50B0000                    jne L_error_arg_count_1
  1447 0000117B 488B4520                        mov rax, PARAM(0)
  1448                                          assert_rational(rax)
    42 0000117F 803811              <1>  cmp byte [%1], %2
    43 00001182 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1449 00001188 FF7001                          push qword [rax + 1]
  1450 0000118B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1451 00001191 FF7009                          push qword [rax + 1 + 8]
  1452 00001194 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1453 0000119A F20F5EC1                        divsd xmm0, xmm1
  1454 0000119E E8250B0000                      call make_real
  1455                                          LEAVE
    38 000011A3 C9                  <1>  leave
  1456 000011A4 C21800                          ret AND_KILL_FRAME(1)
  1457                                  
  1458                                  L_code_ptr_char_to_integer:
  1459                                          ENTER
    33 000011A7 C8000000            <1>  enter 0, 0
    34 000011AB 4883E4F0            <1>  and rsp, ~15
  1460 000011AF 48837D1801                      cmp COUNT, 1
  1461 000011B4 0F85B60B0000                    jne L_error_arg_count_1
  1462 000011BA 488B4520                        mov rax, PARAM(0)
  1463                                          assert_char(rax)
    42 000011BE 803802              <1>  cmp byte [%1], %2
    43 000011C1 0F857D0C0000        <1>  jne L_error_incorrect_type
  1464 000011C7 8A4001                          mov al, byte [rax + 1]
  1465 000011CA 4825FF000000                    and rax, 255
  1466 000011D0 4889C7                          mov rdi, rax
  1467 000011D3 E80C0B0000                      call make_integer
  1468                                          LEAVE
    38 000011D8 C9                  <1>  leave
  1469 000011D9 C21800                          ret AND_KILL_FRAME(1)
  1470                                  
  1471                                  L_code_ptr_integer_to_char:
  1472                                          ENTER
    33 000011DC C8000000            <1>  enter 0, 0
    34 000011E0 4883E4F0            <1>  and rsp, ~15
  1473 000011E4 48837D1801                      cmp COUNT, 1
  1474 000011E9 0F85810B0000                    jne L_error_arg_count_1
  1475 000011EF 488B4520                        mov rax, PARAM(0)
  1476                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000011F3 803811              <2>  cmp byte [%1], %2
    43 000011F6 0F85480C0000        <2>  jne L_error_incorrect_type
    48 000011FC 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001201 0F853D0C0000        <1>  jne L_error_incorrect_type
  1477 00001207 488B5801                        mov rbx, qword [rax + 1]
  1478 0000120B 4883FB00                        cmp rbx, 0
  1479 0000120F 0F8EF50A0000                    jle L_error_integer_range
  1480 00001215 4881FB00010000                  cmp rbx, 256
  1481 0000121C 0F8DE80A0000                    jge L_error_integer_range
  1482 00001222 BF02000000                      mov rdi, (1 + 1)
  1483 00001227 E8D3F4FFFF                      call malloc
  1484 0000122C C60002                          mov byte [rax], T_char
  1485 0000122F 885801                          mov byte [rax + 1], bl
  1486                                          LEAVE
    38 00001232 C9                  <1>  leave
  1487 00001233 C21800                          ret AND_KILL_FRAME(1)
  1488                                  
  1489                                  L_code_ptr_trng:
  1490                                          ENTER
    33 00001236 C8000000            <1>  enter 0, 0
    34 0000123A 4883E4F0            <1>  and rsp, ~15
  1491 0000123E 48837D1800                      cmp COUNT, 0
  1492 00001243 0F85F20A0000                    jne L_error_arg_count_0
  1493 00001249 480FC7F7                        rdrand rdi
  1494 0000124D 48D1EF                          shr rdi, 1
  1495 00001250 E88F0A0000                      call make_integer
  1496                                          LEAVE
    38 00001255 C9                  <1>  leave
  1497 00001256 C21000                          ret AND_KILL_FRAME(0)
  1498                                  
  1499                                  L_code_ptr_is_zero:
  1500                                          ENTER
    33 00001259 C8000000            <1>  enter 0, 0
    34 0000125D 4883E4F0            <1>  and rsp, ~15
  1501 00001261 48837D1801                      cmp COUNT, 1
  1502 00001266 0F85040B0000                    jne L_error_arg_count_1
  1503 0000126C 488B4520                        mov rax, PARAM(0)
  1504 00001270 803811                          cmp byte [rax], T_rational
  1505 00001273 740A                            je .L_rational
  1506 00001275 803812                          cmp byte [rax], T_real
  1507 00001278 740E                            je .L_real
  1508 0000127A E9C50B0000                      jmp L_error_incorrect_type
  1509                                  .L_rational:
  1510 0000127F 4883780100                      cmp qword [rax + 1], 0
  1511 00001284 7420                            je .L_zero
  1512 00001286 EB12                            jmp .L_not_zero
  1513                                  .L_real:
  1514 00001288 660FEFC0                        pxor xmm0, xmm0
  1515 0000128C FF7001                          push qword [rax + 1]
  1516 0000128F F20F100C24                      movsd xmm1, qword [rsp]
  1517 00001294 660F2EC1                        ucomisd xmm0, xmm1
  1518 00001298 740C                            je .L_zero
  1519                                  .L_not_zero:
  1520 0000129A 48B8-                           mov rax, sob_boolean_false
  1520 0000129C [0200000000000000] 
  1521 000012A4 EB0A                            jmp .L_end
  1522                                  .L_zero:
  1523 000012A6 48B8-                           mov rax, sob_boolean_true
  1523 000012A8 [0300000000000000] 
  1524                                  .L_end:
  1525                                          LEAVE
    38 000012B0 C9                  <1>  leave
  1526 000012B1 C21800                          ret AND_KILL_FRAME(1)
  1527                                  
  1528                                  L_code_ptr_is_integer:
  1529                                          ENTER
    33 000012B4 C8000000            <1>  enter 0, 0
    34 000012B8 4883E4F0            <1>  and rsp, ~15
  1530 000012BC 48837D1801                      cmp COUNT, 1
  1531 000012C1 0F85A90A0000                    jne L_error_arg_count_1
  1532 000012C7 488B4520                        mov rax, PARAM(0)
  1533 000012CB 803811                          cmp byte [rax], T_rational
  1534 000012CE 7513                            jne .L_false
  1535 000012D0 4883780901                      cmp qword [rax + 1 + 8], 1
  1536 000012D5 750C                            jne .L_false
  1537 000012D7 48B8-                           mov rax, sob_boolean_true
  1537 000012D9 [0300000000000000] 
  1538 000012E1 EB0A                            jmp .L_exit
  1539                                  .L_false:
  1540 000012E3 48B8-                           mov rax, sob_boolean_false
  1540 000012E5 [0200000000000000] 
  1541                                  .L_exit:
  1542                                          LEAVE
    38 000012ED C9                  <1>  leave
  1543 000012EE C21800                          ret AND_KILL_FRAME(1)
  1544                                  
  1545                                  L_code_ptr_raw_bin_add_rr:
  1546                                          ENTER
    33 000012F1 C8000000            <1>  enter 0, 0
    34 000012F5 4883E4F0            <1>  and rsp, ~15
  1547 000012F9 48837D1802                      cmp COUNT, 2
  1548 000012FE 0F85A10A0000                    jne L_error_arg_count_2
  1549 00001304 488B5D20                        mov rbx, PARAM(0)
  1550                                          assert_real(rbx)
    42 00001308 803B12              <1>  cmp byte [%1], %2
    43 0000130B 0F85330B0000        <1>  jne L_error_incorrect_type
  1551 00001311 488B4D28                        mov rcx, PARAM(1)
  1552                                          assert_real(rcx)
    42 00001315 803912              <1>  cmp byte [%1], %2
    43 00001318 0F85260B0000        <1>  jne L_error_incorrect_type
  1553 0000131E F20F104301                      movsd xmm0, qword [rbx + 1]
  1554 00001323 F20F104901                      movsd xmm1, qword [rcx + 1]
  1555 00001328 F20F58C1                        addsd xmm0, xmm1
  1556 0000132C E897090000                      call make_real
  1557                                          LEAVE
    38 00001331 C9                  <1>  leave
  1558 00001332 C22000                          ret AND_KILL_FRAME(2)
  1559                                  
  1560                                  L_code_ptr_raw_bin_sub_rr:
  1561                                          ENTER
    33 00001335 C8000000            <1>  enter 0, 0
    34 00001339 4883E4F0            <1>  and rsp, ~15
  1562 0000133D 48837D1802                      cmp COUNT, 2
  1563 00001342 0F855D0A0000                    jne L_error_arg_count_2
  1564 00001348 488B5D20                        mov rbx, PARAM(0)
  1565                                          assert_real(rbx)
    42 0000134C 803B12              <1>  cmp byte [%1], %2
    43 0000134F 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1566 00001355 488B4D28                        mov rcx, PARAM(1)
  1567                                          assert_real(rcx)
    42 00001359 803912              <1>  cmp byte [%1], %2
    43 0000135C 0F85E20A0000        <1>  jne L_error_incorrect_type
  1568 00001362 F20F104301                      movsd xmm0, qword [rbx + 1]
  1569 00001367 F20F104901                      movsd xmm1, qword [rcx + 1]
  1570 0000136C F20F5CC1                        subsd xmm0, xmm1
  1571 00001370 E853090000                      call make_real
  1572                                          LEAVE
    38 00001375 C9                  <1>  leave
  1573 00001376 C22000                          ret AND_KILL_FRAME(2)
  1574                                  
  1575                                  L_code_ptr_raw_bin_mul_rr:
  1576                                          ENTER
    33 00001379 C8000000            <1>  enter 0, 0
    34 0000137D 4883E4F0            <1>  and rsp, ~15
  1577 00001381 48837D1802                      cmp COUNT, 2
  1578 00001386 0F85190A0000                    jne L_error_arg_count_2
  1579 0000138C 488B5D20                        mov rbx, PARAM(0)
  1580                                          assert_real(rbx)
    42 00001390 803B12              <1>  cmp byte [%1], %2
    43 00001393 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1581 00001399 488B4D28                        mov rcx, PARAM(1)
  1582                                          assert_real(rcx)
    42 0000139D 803912              <1>  cmp byte [%1], %2
    43 000013A0 0F859E0A0000        <1>  jne L_error_incorrect_type
  1583 000013A6 F20F104301                      movsd xmm0, qword [rbx + 1]
  1584 000013AB F20F104901                      movsd xmm1, qword [rcx + 1]
  1585 000013B0 F20F59C1                        mulsd xmm0, xmm1
  1586 000013B4 E80F090000                      call make_real
  1587                                          LEAVE
    38 000013B9 C9                  <1>  leave
  1588 000013BA C22000                          ret AND_KILL_FRAME(2)
  1589                                  
  1590                                  L_code_ptr_raw_bin_div_rr:
  1591                                          ENTER
    33 000013BD C8000000            <1>  enter 0, 0
    34 000013C1 4883E4F0            <1>  and rsp, ~15
  1592 000013C5 48837D1802                      cmp COUNT, 2
  1593 000013CA 0F85D5090000                    jne L_error_arg_count_2
  1594 000013D0 488B5D20                        mov rbx, PARAM(0)
  1595                                          assert_real(rbx)
    42 000013D4 803B12              <1>  cmp byte [%1], %2
    43 000013D7 0F85670A0000        <1>  jne L_error_incorrect_type
  1596 000013DD 488B4D28                        mov rcx, PARAM(1)
  1597                                          assert_real(rcx)
    42 000013E1 803912              <1>  cmp byte [%1], %2
    43 000013E4 0F855A0A0000        <1>  jne L_error_incorrect_type
  1598 000013EA F20F104301                      movsd xmm0, qword [rbx + 1]
  1599 000013EF F20F104901                      movsd xmm1, qword [rcx + 1]
  1600 000013F4 660FEFD2                        pxor xmm2, xmm2
  1601 000013F8 660F2ECA                        ucomisd xmm1, xmm2
  1602 000013FC 0F84730A0000                    je L_error_division_by_zero
  1603 00001402 F20F5EC1                        divsd xmm0, xmm1
  1604 00001406 E8BD080000                      call make_real
  1605                                          LEAVE
    38 0000140B C9                  <1>  leave
  1606 0000140C C22000                          ret AND_KILL_FRAME(2)
  1607                                  
  1608                                  L_code_ptr_raw_bin_add_qq:
  1609                                          ENTER
    33 0000140F C8000000            <1>  enter 0, 0
    34 00001413 4883E4F0            <1>  and rsp, ~15
  1610 00001417 48837D1802                      cmp COUNT, 2
  1611 0000141C 0F8583090000                    jne L_error_arg_count_2
  1612 00001422 4C8B4520                        mov r8, PARAM(0)
  1613                                          assert_rational(r8)
    42 00001426 41803811            <1>  cmp byte [%1], %2
    43 0000142A 0F85140A0000        <1>  jne L_error_incorrect_type
  1614 00001430 4C8B4D28                        mov r9, PARAM(1)
  1615                                          assert_rational(r9)
    42 00001434 41803911            <1>  cmp byte [%1], %2
    43 00001438 0F85060A0000        <1>  jne L_error_incorrect_type
  1616 0000143E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1617 00001442 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1618 00001446 4899                            cqo
  1619 00001448 48F7EB                          imul rbx
  1620 0000144B 4889C6                          mov rsi, rax
  1621 0000144E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1622 00001452 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1623 00001456 4899                            cqo
  1624 00001458 48F7EB                          imul rbx
  1625 0000145B 4801C6                          add rsi, rax
  1626 0000145E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1627 00001462 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1628 00001466 4899                            cqo
  1629 00001468 48F7EB                          imul rbx
  1630 0000146B 4889C7                          mov rdi, rax
  1631 0000146E E827010000                      call normalize_rational
  1632                                          LEAVE
    38 00001473 C9                  <1>  leave
  1633 00001474 C22000                          ret AND_KILL_FRAME(2)
  1634                                  
  1635                                  L_code_ptr_raw_bin_sub_qq:
  1636                                          ENTER
    33 00001477 C8000000            <1>  enter 0, 0
    34 0000147B 4883E4F0            <1>  and rsp, ~15
  1637 0000147F 48837D1802                      cmp COUNT, 2
  1638 00001484 0F851B090000                    jne L_error_arg_count_2
  1639 0000148A 4C8B4520                        mov r8, PARAM(0)
  1640                                          assert_rational(r8)
    42 0000148E 41803811            <1>  cmp byte [%1], %2
    43 00001492 0F85AC090000        <1>  jne L_error_incorrect_type
  1641 00001498 4C8B4D28                        mov r9, PARAM(1)
  1642                                          assert_rational(r9)
    42 0000149C 41803911            <1>  cmp byte [%1], %2
    43 000014A0 0F859E090000        <1>  jne L_error_incorrect_type
  1643 000014A6 498B4001                        mov rax, qword [r8 + 1] ; num1
  1644 000014AA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1645 000014AE 4899                            cqo
  1646 000014B0 48F7EB                          imul rbx
  1647 000014B3 4889C6                          mov rsi, rax
  1648 000014B6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1649 000014BA 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1650 000014BE 4899                            cqo
  1651 000014C0 48F7EB                          imul rbx
  1652 000014C3 4829C6                          sub rsi, rax
  1653 000014C6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1654 000014CA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1655 000014CE 4899                            cqo
  1656 000014D0 48F7EB                          imul rbx
  1657 000014D3 4889C7                          mov rdi, rax
  1658 000014D6 E8BF000000                      call normalize_rational
  1659                                          LEAVE
    38 000014DB C9                  <1>  leave
  1660 000014DC C22000                          ret AND_KILL_FRAME(2)
  1661                                  
  1662                                  L_code_ptr_raw_bin_mul_qq:
  1663                                          ENTER
    33 000014DF C8000000            <1>  enter 0, 0
    34 000014E3 4883E4F0            <1>  and rsp, ~15
  1664 000014E7 48837D1802                      cmp COUNT, 2
  1665 000014EC 0F85B3080000                    jne L_error_arg_count_2
  1666 000014F2 4C8B4520                        mov r8, PARAM(0)
  1667                                          assert_rational(r8)
    42 000014F6 41803811            <1>  cmp byte [%1], %2
    43 000014FA 0F8544090000        <1>  jne L_error_incorrect_type
  1668 00001500 4C8B4D28                        mov r9, PARAM(1)
  1669                                          assert_rational(r9)
    42 00001504 41803911            <1>  cmp byte [%1], %2
    43 00001508 0F8536090000        <1>  jne L_error_incorrect_type
  1670 0000150E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1671 00001512 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1672 00001516 4899                            cqo
  1673 00001518 48F7EB                          imul rbx
  1674 0000151B 4889C6                          mov rsi, rax
  1675 0000151E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1676 00001522 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1677 00001526 4899                            cqo
  1678 00001528 48F7EB                          imul rbx
  1679 0000152B 4889C7                          mov rdi, rax
  1680 0000152E E867000000                      call normalize_rational
  1681                                          LEAVE
    38 00001533 C9                  <1>  leave
  1682 00001534 C22000                          ret AND_KILL_FRAME(2)
  1683                                          
  1684                                  L_code_ptr_raw_bin_div_qq:
  1685                                          ENTER
    33 00001537 C8000000            <1>  enter 0, 0
    34 0000153B 4883E4F0            <1>  and rsp, ~15
  1686 0000153F 48837D1802                      cmp COUNT, 2
  1687 00001544 0F855B080000                    jne L_error_arg_count_2
  1688 0000154A 4C8B4520                        mov r8, PARAM(0)
  1689                                          assert_rational(r8)
    42 0000154E 41803811            <1>  cmp byte [%1], %2
    43 00001552 0F85EC080000        <1>  jne L_error_incorrect_type
  1690 00001558 4C8B4D28                        mov r9, PARAM(1)
  1691                                          assert_rational(r9)
    42 0000155C 41803911            <1>  cmp byte [%1], %2
    43 00001560 0F85DE080000        <1>  jne L_error_incorrect_type
  1692 00001566 4983790100                      cmp qword [r9 + 1], 0
  1693 0000156B 0F8404090000                    je L_error_division_by_zero
  1694 00001571 498B4001                        mov rax, qword [r8 + 1] ; num1
  1695 00001575 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1696 00001579 4899                            cqo
  1697 0000157B 48F7EB                          imul rbx
  1698 0000157E 4889C6                          mov rsi, rax
  1699 00001581 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1700 00001585 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1701 00001589 4899                            cqo
  1702 0000158B 48F7EB                          imul rbx
  1703 0000158E 4889C7                          mov rdi, rax
  1704 00001591 E804000000                      call normalize_rational
  1705                                          LEAVE
    38 00001596 C9                  <1>  leave
  1706 00001597 C22000                          ret AND_KILL_FRAME(2)
  1707                                          
  1708                                  normalize_rational:
  1709 0000159A 56                              push rsi
  1710 0000159B 57                              push rdi
  1711 0000159C E839000000                      call gcd
  1712 000015A1 4889C3                          mov rbx, rax
  1713 000015A4 58                              pop rax
  1714 000015A5 4899                            cqo
  1715 000015A7 48F7FB                          idiv rbx
  1716 000015AA 4989C0                          mov r8, rax
  1717 000015AD 58                              pop rax
  1718 000015AE 4899                            cqo
  1719 000015B0 48F7FB                          idiv rbx
  1720 000015B3 4989C1                          mov r9, rax
  1721 000015B6 BF11000000                      mov rdi, (1 + 8 + 8)
  1722 000015BB E83FF1FFFF                      call malloc
  1723 000015C0 C60011                          mov byte [rax], T_rational
  1724 000015C3 4C894801                        mov qword [rax + 1], r9
  1725 000015C7 4C894009                        mov qword [rax + 1 + 8], r8
  1726 000015CB C3                              ret
  1727                                  
  1728                                  iabs:
  1729 000015CC 4889F8                          mov rax, rdi
  1730 000015CF 4883F800                        cmp rax, 0
  1731 000015D3 7C01                            jl .Lneg
  1732 000015D5 C3                              ret
  1733                                  .Lneg:
  1734 000015D6 48F7D8                          neg rax
  1735 000015D9 C3                              ret
  1736                                  
  1737                                  gcd:
  1738 000015DA E8EDFFFFFF                      call iabs
  1739 000015DF 4889C3                          mov rbx, rax
  1740 000015E2 4889F7                          mov rdi, rsi
  1741 000015E5 E8E2FFFFFF                      call iabs
  1742 000015EA 4883F800                        cmp rax, 0
  1743 000015EE 7502                            jne .L0
  1744 000015F0 4893                            xchg rax, rbx
  1745                                  .L0:
  1746 000015F2 4883FB00                        cmp rbx, 0
  1747 000015F6 740C                            je .L1
  1748 000015F8 4899                            cqo
  1749 000015FA 48F7F3                          div rbx
  1750 000015FD 4889D0                          mov rax, rdx
  1751 00001600 4893                            xchg rax, rbx
  1752 00001602 EBEE                            jmp .L0
  1753                                  .L1:
  1754 00001604 C3                              ret
  1755                                  
  1756                                  L_code_ptr_error:
  1757                                          ENTER
    33 00001605 C8000000            <1>  enter 0, 0
    34 00001609 4883E4F0            <1>  and rsp, ~15
  1758 0000160D 48837D1802                      cmp COUNT, 2
  1759 00001612 0F858D070000                    jne L_error_arg_count_2
  1760 00001618 488B7520                        mov rsi, PARAM(0)
  1761                                          assert_symbol(rsi)
    42 0000161C 803E04              <1>  cmp byte [%1], %2
    43 0000161F 0F851F080000        <1>  jne L_error_incorrect_type
  1762 00001625 488B7528                        mov rsi, PARAM(1)
  1763                                          assert_string(rsi)
    42 00001629 803E03              <1>  cmp byte [%1], %2
    43 0000162C 0F8512080000        <1>  jne L_error_incorrect_type
  1764 00001632 48BF-                           mov rdi, fmt_scheme_error_part_1
  1764 00001634 [8603000000000000] 
  1765 0000163C B800000000                      mov rax, 0
  1766                                  	ENTER
    33 00001641 C8000000            <1>  enter 0, 0
    34 00001645 4883E4F0            <1>  and rsp, ~15
  1767 00001649 E8(00000000)                    call printf
  1768                                  	LEAVE
    38 0000164E C9                  <1>  leave
  1769 0000164F 488B7D20                        mov rdi, PARAM(0)
  1770 00001653 E8C2F0FFFF                      call print_sexpr
  1771 00001658 48BF-                           mov rdi, fmt_scheme_error_part_2
  1771 0000165A [9A03000000000000] 
  1772 00001662 B800000000                      mov rax, 0
  1773                                  	ENTER
    33 00001667 C8000000            <1>  enter 0, 0
    34 0000166B 4883E4F0            <1>  and rsp, ~15
  1774 0000166F E8(00000000)                    call printf
  1775                                  	LEAVE
    38 00001674 C9                  <1>  leave
  1776 00001675 488B4528                        mov rax, PARAM(1)       ; sob_string
  1777 00001679 BE01000000                      mov rsi, 1              ; size = 1 byte
  1778 0000167E 488B5001                        mov rdx, qword [rax + 1] ; length
  1779 00001682 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1780 00001686 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1781 0000168E E8(00000000)                    call fwrite
  1782 00001693 48BF-                           mov rdi, fmt_scheme_error_part_3
  1782 00001695 [DC03000000000000] 
  1783 0000169D B800000000                      mov rax, 0
  1784                                  	ENTER
    33 000016A2 C8000000            <1>  enter 0, 0
    34 000016A6 4883E4F0            <1>  and rsp, ~15
  1785 000016AA E8(00000000)                    call printf
  1786                                  	LEAVE
    38 000016AF C9                  <1>  leave
  1787 000016B0 48C7C0F7FFFFFF                  mov rax, -9
  1788 000016B7 E8(00000000)                    call exit
  1789                                  
  1790                                  L_code_ptr_raw_less_than_rr:
  1791                                          ENTER
    33 000016BC C8000000            <1>  enter 0, 0
    34 000016C0 4883E4F0            <1>  and rsp, ~15
  1792 000016C4 48837D1802                      cmp COUNT, 2
  1793 000016C9 0F85D6060000                    jne L_error_arg_count_2
  1794 000016CF 488B7520                        mov rsi, PARAM(0)
  1795                                          assert_real(rsi)
    42 000016D3 803E12              <1>  cmp byte [%1], %2
    43 000016D6 0F8568070000        <1>  jne L_error_incorrect_type
  1796 000016DC 488B7D28                        mov rdi, PARAM(1)
  1797                                          assert_real(rdi)
    42 000016E0 803F12              <1>  cmp byte [%1], %2
    43 000016E3 0F855B070000        <1>  jne L_error_incorrect_type
  1798 000016E9 F20F104601                      movsd xmm0, qword [rsi + 1]
  1799 000016EE F20F104F01                      movsd xmm1, qword [rdi + 1]
  1800 000016F3 660F2FC1                        comisd xmm0, xmm1
  1801 000016F7 730C                            jae .L_false
  1802 000016F9 48B8-                           mov rax, sob_boolean_true
  1802 000016FB [0300000000000000] 
  1803 00001703 EB0A                            jmp .L_exit
  1804                                  .L_false:
  1805 00001705 48B8-                           mov rax, sob_boolean_false
  1805 00001707 [0200000000000000] 
  1806                                  .L_exit:
  1807                                          LEAVE
    38 0000170F C9                  <1>  leave
  1808 00001710 C22000                          ret AND_KILL_FRAME(2)
  1809                                          
  1810                                  L_code_ptr_raw_less_than_qq:
  1811                                          ENTER
    33 00001713 C8000000            <1>  enter 0, 0
    34 00001717 4883E4F0            <1>  and rsp, ~15
  1812 0000171B 48837D1802                      cmp COUNT, 2
  1813 00001720 0F857F060000                    jne L_error_arg_count_2
  1814 00001726 488B7520                        mov rsi, PARAM(0)
  1815                                          assert_rational(rsi)
    42 0000172A 803E11              <1>  cmp byte [%1], %2
    43 0000172D 0F8511070000        <1>  jne L_error_incorrect_type
  1816 00001733 488B7D28                        mov rdi, PARAM(1)
  1817                                          assert_rational(rdi)
    42 00001737 803F11              <1>  cmp byte [%1], %2
    43 0000173A 0F8504070000        <1>  jne L_error_incorrect_type
  1818 00001740 488B4601                        mov rax, qword [rsi + 1] ; num1
  1819 00001744 4899                            cqo
  1820 00001746 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1821 0000174A 4889C1                          mov rcx, rax
  1822 0000174D 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1823 00001751 4899                            cqo
  1824 00001753 48F76F01                        imul qword [rdi + 1]          ; num2
  1825 00001757 4829C1                          sub rcx, rax
  1826 0000175A 7D0C                            jge .L_false
  1827 0000175C 48B8-                           mov rax, sob_boolean_true
  1827 0000175E [0300000000000000] 
  1828 00001766 EB0A                            jmp .L_exit
  1829                                  .L_false:
  1830 00001768 48B8-                           mov rax, sob_boolean_false
  1830 0000176A [0200000000000000] 
  1831                                  .L_exit:
  1832                                          LEAVE
    38 00001772 C9                  <1>  leave
  1833 00001773 C22000                          ret AND_KILL_FRAME(2)
  1834                                  
  1835                                  L_code_ptr_raw_equal_rr:
  1836                                          ENTER
    33 00001776 C8000000            <1>  enter 0, 0
    34 0000177A 4883E4F0            <1>  and rsp, ~15
  1837 0000177E 48837D1802                      cmp COUNT, 2
  1838 00001783 0F851C060000                    jne L_error_arg_count_2
  1839 00001789 488B7520                        mov rsi, PARAM(0)
  1840                                          assert_real(rsi)
    42 0000178D 803E12              <1>  cmp byte [%1], %2
    43 00001790 0F85AE060000        <1>  jne L_error_incorrect_type
  1841 00001796 488B7D28                        mov rdi, PARAM(1)
  1842                                          assert_real(rdi)
    42 0000179A 803F12              <1>  cmp byte [%1], %2
    43 0000179D 0F85A1060000        <1>  jne L_error_incorrect_type
  1843 000017A3 F20F104601                      movsd xmm0, qword [rsi + 1]
  1844 000017A8 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1845 000017AD 660F2FC1                        comisd xmm0, xmm1
  1846 000017B1 750C                            jne .L_false
  1847 000017B3 48B8-                           mov rax, sob_boolean_true
  1847 000017B5 [0300000000000000] 
  1848 000017BD EB0A                            jmp .L_exit
  1849                                  .L_false:
  1850 000017BF 48B8-                           mov rax, sob_boolean_false
  1850 000017C1 [0200000000000000] 
  1851                                  .L_exit:
  1852                                          LEAVE
    38 000017C9 C9                  <1>  leave
  1853 000017CA C22000                          ret AND_KILL_FRAME(2)
  1854                                          
  1855                                  L_code_ptr_raw_equal_qq:
  1856                                          ENTER
    33 000017CD C8000000            <1>  enter 0, 0
    34 000017D1 4883E4F0            <1>  and rsp, ~15
  1857 000017D5 48837D1802                      cmp COUNT, 2
  1858 000017DA 0F85C5050000                    jne L_error_arg_count_2
  1859 000017E0 488B7520                        mov rsi, PARAM(0)
  1860                                          assert_rational(rsi)
    42 000017E4 803E11              <1>  cmp byte [%1], %2
    43 000017E7 0F8557060000        <1>  jne L_error_incorrect_type
  1861 000017ED 488B7D28                        mov rdi, PARAM(1)
  1862                                          assert_rational(rdi)
    42 000017F1 803F11              <1>  cmp byte [%1], %2
    43 000017F4 0F854A060000        <1>  jne L_error_incorrect_type
  1863 000017FA 488B4601                        mov rax, qword [rsi + 1] ; num1
  1864 000017FE 4899                            cqo
  1865 00001800 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1866 00001804 4889C1                          mov rcx, rax
  1867 00001807 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1868 0000180B 4899                            cqo
  1869 0000180D 48F76F01                        imul qword [rdi + 1]          ; num2
  1870 00001811 4829C1                          sub rcx, rax
  1871 00001814 750C                            jne .L_false
  1872 00001816 48B8-                           mov rax, sob_boolean_true
  1872 00001818 [0300000000000000] 
  1873 00001820 EB0A                            jmp .L_exit
  1874                                  .L_false:
  1875 00001822 48B8-                           mov rax, sob_boolean_false
  1875 00001824 [0200000000000000] 
  1876                                  .L_exit:
  1877                                          LEAVE
    38 0000182C C9                  <1>  leave
  1878 0000182D C22000                          ret AND_KILL_FRAME(2)
  1879                                  
  1880                                  L_code_ptr_quotient:
  1881                                          ENTER
    33 00001830 C8000000            <1>  enter 0, 0
    34 00001834 4883E4F0            <1>  and rsp, ~15
  1882 00001838 48837D1802                      cmp COUNT, 2
  1883 0000183D 0F8562050000                    jne L_error_arg_count_2
  1884 00001843 488B7520                        mov rsi, PARAM(0)
  1885                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001847 803E11              <2>  cmp byte [%1], %2
    43 0000184A 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00001850 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001855 0F85E9050000        <1>  jne L_error_incorrect_type
  1886 0000185B 488B7D28                        mov rdi, PARAM(1)
  1887                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000185F 803F11              <2>  cmp byte [%1], %2
    43 00001862 0F85DC050000        <2>  jne L_error_incorrect_type
    48 00001868 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000186D 0F85D1050000        <1>  jne L_error_incorrect_type
  1888 00001873 488B4601                        mov rax, qword [rsi + 1]
  1889 00001877 488B5F01                        mov rbx, qword [rdi + 1]
  1890 0000187B 4883FB00                        cmp rbx, 0
  1891 0000187F 0F84F0050000                    je L_error_division_by_zero
  1892 00001885 4899                            cqo
  1893 00001887 48F7FB                          idiv rbx
  1894 0000188A 4889C7                          mov rdi, rax
  1895 0000188D E852040000                      call make_integer
  1896                                          LEAVE
    38 00001892 C9                  <1>  leave
  1897 00001893 C22000                          ret AND_KILL_FRAME(2)
  1898                                          
  1899                                  L_code_ptr_remainder:
  1900                                          ENTER
    33 00001896 C8000000            <1>  enter 0, 0
    34 0000189A 4883E4F0            <1>  and rsp, ~15
  1901 0000189E 48837D1802                      cmp COUNT, 2
  1902 000018A3 0F85FC040000                    jne L_error_arg_count_2
  1903 000018A9 488B7520                        mov rsi, PARAM(0)
  1904                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018AD 803E11              <2>  cmp byte [%1], %2
    43 000018B0 0F858E050000        <2>  jne L_error_incorrect_type
    48 000018B6 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018BB 0F8583050000        <1>  jne L_error_incorrect_type
  1905 000018C1 488B7D28                        mov rdi, PARAM(1)
  1906                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000018C5 803F11              <2>  cmp byte [%1], %2
    43 000018C8 0F8576050000        <2>  jne L_error_incorrect_type
    48 000018CE 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018D3 0F856B050000        <1>  jne L_error_incorrect_type
  1907 000018D9 488B4601                        mov rax, qword [rsi + 1]
  1908 000018DD 488B5F01                        mov rbx, qword [rdi + 1]
  1909 000018E1 4883FB00                        cmp rbx, 0
  1910 000018E5 0F848A050000                    je L_error_division_by_zero
  1911 000018EB 4899                            cqo
  1912 000018ED 48F7FB                          idiv rbx
  1913 000018F0 4889D7                          mov rdi, rdx
  1914 000018F3 E8EC030000                      call make_integer
  1915                                          LEAVE
    38 000018F8 C9                  <1>  leave
  1916 000018F9 C22000                          ret AND_KILL_FRAME(2)
  1917                                  
  1918                                  L_code_ptr_set_car:
  1919                                          ENTER
    33 000018FC C8000000            <1>  enter 0, 0
    34 00001900 4883E4F0            <1>  and rsp, ~15
  1920 00001904 48837D1802                      cmp COUNT, 2
  1921 00001909 0F8596040000                    jne L_error_arg_count_2
  1922 0000190F 488B4520                        mov rax, PARAM(0)
  1923                                          assert_pair(rax)
    42 00001913 803821              <1>  cmp byte [%1], %2
    43 00001916 0F8528050000        <1>  jne L_error_incorrect_type
  1924 0000191C 488B5D28                        mov rbx, PARAM(1)
  1925 00001920 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1926 00001924 48B8-                           mov rax, sob_void
  1926 00001926 [0000000000000000] 
  1927                                          LEAVE
    38 0000192E C9                  <1>  leave
  1928 0000192F C22000                          ret AND_KILL_FRAME(2)
  1929                                  
  1930                                  L_code_ptr_set_cdr:
  1931                                          ENTER
    33 00001932 C8000000            <1>  enter 0, 0
    34 00001936 4883E4F0            <1>  and rsp, ~15
  1932 0000193A 48837D1802                      cmp COUNT, 2
  1933 0000193F 0F8560040000                    jne L_error_arg_count_2
  1934 00001945 488B4520                        mov rax, PARAM(0)
  1935                                          assert_pair(rax)
    42 00001949 803821              <1>  cmp byte [%1], %2
    43 0000194C 0F85F2040000        <1>  jne L_error_incorrect_type
  1936 00001952 488B5D28                        mov rbx, PARAM(1)
  1937 00001956 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1938 0000195A 48B8-                           mov rax, sob_void
  1938 0000195C [0000000000000000] 
  1939                                          LEAVE
    38 00001964 C9                  <1>  leave
  1940 00001965 C22000                          ret AND_KILL_FRAME(2)
  1941                                  
  1942                                  L_code_ptr_string_ref:
  1943                                          ENTER
    33 00001968 C8000000            <1>  enter 0, 0
    34 0000196C 4883E4F0            <1>  and rsp, ~15
  1944 00001970 48837D1802                      cmp COUNT, 2
  1945 00001975 0F852A040000                    jne L_error_arg_count_2
  1946 0000197B 488B7D20                        mov rdi, PARAM(0)
  1947                                          assert_string(rdi)
    42 0000197F 803F03              <1>  cmp byte [%1], %2
    43 00001982 0F85BC040000        <1>  jne L_error_incorrect_type
  1948 00001988 488B7528                        mov rsi, PARAM(1)
  1949                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000198C 803E11              <2>  cmp byte [%1], %2
    43 0000198F 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00001995 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000199A 0F85A4040000        <1>  jne L_error_incorrect_type
  1950 000019A0 488B5701                        mov rdx, qword [rdi + 1]
  1951 000019A4 488B4E01                        mov rcx, qword [rsi + 1]
  1952 000019A8 4839D1                          cmp rcx, rdx
  1953 000019AB 0F8D59030000                    jge L_error_integer_range
  1954 000019B1 4883F900                        cmp rcx, 0
  1955 000019B5 0F8C4F030000                    jl L_error_integer_range
  1956 000019BB 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1957 000019BF BF02000000                      mov rdi, 2
  1958 000019C4 E836EDFFFF                      call malloc
  1959 000019C9 C60002                          mov byte [rax], T_char
  1960 000019CC 885801                          mov byte [rax + 1], bl
  1961                                          LEAVE
    38 000019CF C9                  <1>  leave
  1962 000019D0 C22000                          ret AND_KILL_FRAME(2)
  1963                                  
  1964                                  L_code_ptr_vector_ref:
  1965                                          ENTER
    33 000019D3 C8000000            <1>  enter 0, 0
    34 000019D7 4883E4F0            <1>  and rsp, ~15
  1966 000019DB 48837D1802                      cmp COUNT, 2
  1967 000019E0 0F85BF030000                    jne L_error_arg_count_2
  1968 000019E6 488B7D20                        mov rdi, PARAM(0)
  1969                                          assert_vector(rdi)
    42 000019EA 803F22              <1>  cmp byte [%1], %2
    43 000019ED 0F8551040000        <1>  jne L_error_incorrect_type
  1970 000019F3 488B7528                        mov rsi, PARAM(1)
  1971                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019F7 803E11              <2>  cmp byte [%1], %2
    43 000019FA 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001A00 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A05 0F8539040000        <1>  jne L_error_incorrect_type
  1972 00001A0B 488B5701                        mov rdx, qword [rdi + 1]
  1973 00001A0F 488B4E01                        mov rcx, qword [rsi + 1]
  1974 00001A13 4839D1                          cmp rcx, rdx
  1975 00001A16 0F8DEE020000                    jge L_error_integer_range
  1976 00001A1C 4883F900                        cmp rcx, 0
  1977 00001A20 0F8CE4020000                    jl L_error_integer_range
  1978 00001A26 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1979                                          LEAVE
    38 00001A2B C9                  <1>  leave
  1980 00001A2C C22000                          ret AND_KILL_FRAME(2)
  1981                                  
  1982                                  L_code_ptr_vector_set:
  1983                                          ENTER
    33 00001A2F C8000000            <1>  enter 0, 0
    34 00001A33 4883E4F0            <1>  and rsp, ~15
  1984 00001A37 48837D1803                      cmp COUNT, 3
  1985 00001A3C 0F85CD030000                    jne L_error_arg_count_3
  1986 00001A42 488B7D20                        mov rdi, PARAM(0)
  1987                                          assert_vector(rdi)
    42 00001A46 803F22              <1>  cmp byte [%1], %2
    43 00001A49 0F85F5030000        <1>  jne L_error_incorrect_type
  1988 00001A4F 488B7528                        mov rsi, PARAM(1)
  1989                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A53 803E11              <2>  cmp byte [%1], %2
    43 00001A56 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001A5C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A61 0F85DD030000        <1>  jne L_error_incorrect_type
  1990 00001A67 488B5701                        mov rdx, qword [rdi + 1]
  1991 00001A6B 488B4E01                        mov rcx, qword [rsi + 1]
  1992 00001A6F 4839D1                          cmp rcx, rdx
  1993 00001A72 0F8D92020000                    jge L_error_integer_range
  1994 00001A78 4883F900                        cmp rcx, 0
  1995 00001A7C 0F8C88020000                    jl L_error_integer_range
  1996 00001A82 488B4530                        mov rax, PARAM(2)
  1997 00001A86 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1998 00001A8B 48B8-                           mov rax, sob_void
  1998 00001A8D [0000000000000000] 
  1999                                          LEAVE
    38 00001A95 C9                  <1>  leave
  2000 00001A96 C22800                          ret AND_KILL_FRAME(3)
  2001                                  
  2002                                  L_code_ptr_string_set:
  2003                                          ENTER
    33 00001A99 C8000000            <1>  enter 0, 0
    34 00001A9D 4883E4F0            <1>  and rsp, ~15
  2004 00001AA1 48837D1803                      cmp COUNT, 3
  2005 00001AA6 0F8563030000                    jne L_error_arg_count_3
  2006 00001AAC 488B7D20                        mov rdi, PARAM(0)
  2007                                          assert_string(rdi)
    42 00001AB0 803F03              <1>  cmp byte [%1], %2
    43 00001AB3 0F858B030000        <1>  jne L_error_incorrect_type
  2008 00001AB9 488B7528                        mov rsi, PARAM(1)
  2009                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001ABD 803E11              <2>  cmp byte [%1], %2
    43 00001AC0 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001AC6 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001ACB 0F8573030000        <1>  jne L_error_incorrect_type
  2010 00001AD1 488B5701                        mov rdx, qword [rdi + 1]
  2011 00001AD5 488B4E01                        mov rcx, qword [rsi + 1]
  2012 00001AD9 4839D1                          cmp rcx, rdx
  2013 00001ADC 0F8D28020000                    jge L_error_integer_range
  2014 00001AE2 4883F900                        cmp rcx, 0
  2015 00001AE6 0F8C1E020000                    jl L_error_integer_range
  2016 00001AEC 488B4530                        mov rax, PARAM(2)
  2017                                          assert_char(rax)
    42 00001AF0 803802              <1>  cmp byte [%1], %2
    43 00001AF3 0F854B030000        <1>  jne L_error_incorrect_type
  2018 00001AF9 8A4001                          mov al, byte [rax + 1]
  2019 00001AFC 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2020 00001B00 48B8-                           mov rax, sob_void
  2020 00001B02 [0000000000000000] 
  2021                                          LEAVE
    38 00001B0A C9                  <1>  leave
  2022 00001B0B C22800                          ret AND_KILL_FRAME(3)
  2023                                  
  2024                                  L_code_ptr_make_vector:
  2025                                          ENTER
    33 00001B0E C8000000            <1>  enter 0, 0
    34 00001B12 4883E4F0            <1>  and rsp, ~15
  2026 00001B16 48837D1802                      cmp COUNT, 2
  2027 00001B1B 0F8584020000                    jne L_error_arg_count_2
  2028 00001B21 488B4D20                        mov rcx, PARAM(0)
  2029                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B25 803911              <2>  cmp byte [%1], %2
    43 00001B28 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001B2E 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B33 0F850B030000        <1>  jne L_error_incorrect_type
  2030 00001B39 488B4901                        mov rcx, qword [rcx + 1]
  2031 00001B3D 4883F900                        cmp rcx, 0
  2032 00001B41 0F8CC3010000                    jl L_error_integer_range
  2033 00001B47 488B5528                        mov rdx, PARAM(1)
  2034 00001B4B 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2035 00001B53 E8A7EBFFFF                      call malloc
  2036 00001B58 C60022                          mov byte [rax], T_vector
  2037 00001B5B 48894801                        mov qword [rax + 1], rcx
  2038 00001B5F 41B800000000                    mov r8, 0
  2039                                  .L0:
  2040 00001B65 4939C8                          cmp r8, rcx
  2041 00001B68 740A                            je .L1
  2042 00001B6A 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2043 00001B6F 49FFC0                          inc r8
  2044 00001B72 EBF1                            jmp .L0
  2045                                  .L1:
  2046                                          LEAVE
    38 00001B74 C9                  <1>  leave
  2047 00001B75 C22000                          ret AND_KILL_FRAME(2)
  2048                                          
  2049                                  L_code_ptr_make_string:
  2050                                          ENTER
    33 00001B78 C8000000            <1>  enter 0, 0
    34 00001B7C 4883E4F0            <1>  and rsp, ~15
  2051 00001B80 48837D1802                      cmp COUNT, 2
  2052 00001B85 0F851A020000                    jne L_error_arg_count_2
  2053 00001B8B 488B4D20                        mov rcx, PARAM(0)
  2054                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B8F 803911              <2>  cmp byte [%1], %2
    43 00001B92 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001B98 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B9D 0F85A1020000        <1>  jne L_error_incorrect_type
  2055 00001BA3 488B4901                        mov rcx, qword [rcx + 1]
  2056 00001BA7 4883F900                        cmp rcx, 0
  2057 00001BAB 0F8C59010000                    jl L_error_integer_range
  2058 00001BB1 488B5528                        mov rdx, PARAM(1)
  2059                                          assert_char(rdx)
    42 00001BB5 803A02              <1>  cmp byte [%1], %2
    43 00001BB8 0F8586020000        <1>  jne L_error_incorrect_type
  2060 00001BBE 8A5201                          mov dl, byte [rdx + 1]
  2061 00001BC1 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2062 00001BC5 E835EBFFFF                      call malloc
  2063 00001BCA C60003                          mov byte [rax], T_string
  2064 00001BCD 48894801                        mov qword [rax + 1], rcx
  2065 00001BD1 41B800000000                    mov r8, 0
  2066                                  .L0:
  2067 00001BD7 4939C8                          cmp r8, rcx
  2068 00001BDA 740A                            je .L1
  2069 00001BDC 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2070 00001BE1 49FFC0                          inc r8
  2071 00001BE4 EBF1                            jmp .L0
  2072                                  .L1:
  2073                                          LEAVE
    38 00001BE6 C9                  <1>  leave
  2074 00001BE7 C22000                          ret AND_KILL_FRAME(2)
  2075                                  
  2076                                  L_code_ptr_numerator:
  2077                                          ENTER
    33 00001BEA C8000000            <1>  enter 0, 0
    34 00001BEE 4883E4F0            <1>  and rsp, ~15
  2078 00001BF2 48837D1801                      cmp COUNT, 1
  2079 00001BF7 0F8573010000                    jne L_error_arg_count_1
  2080 00001BFD 488B4520                        mov rax, PARAM(0)
  2081                                          assert_rational(rax)
    42 00001C01 803811              <1>  cmp byte [%1], %2
    43 00001C04 0F853A020000        <1>  jne L_error_incorrect_type
  2082 00001C0A 488B7801                        mov rdi, qword [rax + 1]
  2083 00001C0E E8D1000000                      call make_integer
  2084                                          LEAVE
    38 00001C13 C9                  <1>  leave
  2085 00001C14 C21800                          ret AND_KILL_FRAME(1)
  2086                                          
  2087                                  L_code_ptr_denominator:
  2088                                          ENTER
    33 00001C17 C8000000            <1>  enter 0, 0
    34 00001C1B 4883E4F0            <1>  and rsp, ~15
  2089 00001C1F 48837D1801                      cmp COUNT, 1
  2090 00001C24 0F8546010000                    jne L_error_arg_count_1
  2091 00001C2A 488B4520                        mov rax, PARAM(0)
  2092                                          assert_rational(rax)
    42 00001C2E 803811              <1>  cmp byte [%1], %2
    43 00001C31 0F850D020000        <1>  jne L_error_incorrect_type
  2093 00001C37 488B7809                        mov rdi, qword [rax + 1 + 8]
  2094 00001C3B E8A4000000                      call make_integer
  2095                                          LEAVE
    38 00001C40 C9                  <1>  leave
  2096 00001C41 C21800                          ret AND_KILL_FRAME(1)
  2097                                  
  2098                                  L_code_ptr_eq:
  2099                                  	ENTER
    33 00001C44 C8000000            <1>  enter 0, 0
    34 00001C48 4883E4F0            <1>  and rsp, ~15
  2100 00001C4C 48837D1802              	cmp COUNT, 2
  2101 00001C51 0F854E010000            	jne L_error_arg_count_2
  2102 00001C57 488B7D20                	mov rdi, PARAM(0)
  2103 00001C5B 488B7528                	mov rsi, PARAM(1)
  2104 00001C5F 4839F7                  	cmp rdi, rsi
  2105 00001C62 744A                    	je .L_eq_true
  2106 00001C64 8A17                    	mov dl, byte [rdi]
  2107 00001C66 3A16                    	cmp dl, byte [rsi]
  2108 00001C68 7550                    	jne .L_eq_false
  2109 00001C6A 80FA02                  	cmp dl, T_char
  2110 00001C6D 7437                    	je .L_char
  2111 00001C6F 80FA04                  	cmp dl, T_symbol
  2112 00001C72 742A                    	je .L_symbol
  2113 00001C74 80FA12                  	cmp dl, T_real
  2114 00001C77 741D                    	je .L_real
  2115 00001C79 80FA11                  	cmp dl, T_rational
  2116 00001C7C 7402                    	je .L_rational
  2117 00001C7E EB3A                    	jmp .L_eq_false
  2118                                  .L_rational:
  2119 00001C80 488B4601                	mov rax, qword [rsi + 1]
  2120 00001C84 483B4701                	cmp rax, qword [rdi + 1]
  2121 00001C88 7530                    	jne .L_eq_false
  2122 00001C8A 488B4609                	mov rax, qword [rsi + 1 + 8]
  2123 00001C8E 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2124 00001C92 7526                    	jne .L_eq_false
  2125 00001C94 EB18                    	jmp .L_eq_true
  2126                                  .L_real:
  2127 00001C96 488B4601                	mov rax, qword [rsi + 1]
  2128 00001C9A 483B4701                	cmp rax, qword [rdi + 1]
  2129                                  .L_symbol:
  2130                                  	; never reached, because symbols are static!
  2131                                  	; but I'm keeping it in case, I'll ever change
  2132                                  	; the implementation
  2133 00001C9E 488B4601                	mov rax, qword [rsi + 1]
  2134 00001CA2 483B4701                	cmp rax, qword [rdi + 1]
  2135                                  .L_char:
  2136 00001CA6 8A5E01                  	mov bl, byte [rsi + 1]
  2137 00001CA9 3A5F01                  	cmp bl, byte [rdi + 1]
  2138 00001CAC 750C                    	jne .L_eq_false
  2139                                  .L_eq_true:
  2140 00001CAE 48B8-                   	mov rax, sob_boolean_true
  2140 00001CB0 [0300000000000000] 
  2141 00001CB8 EB0A                    	jmp .L_eq_exit
  2142                                  .L_eq_false:
  2143 00001CBA 48B8-                   	mov rax, sob_boolean_false
  2143 00001CBC [0200000000000000] 
  2144                                  .L_eq_exit:
  2145                                  	LEAVE
    38 00001CC4 C9                  <1>  leave
  2146 00001CC5 C22000                  	ret AND_KILL_FRAME(2)
  2147                                  
  2148                                  make_real:
  2149                                          ENTER
    33 00001CC8 C8000000            <1>  enter 0, 0
    34 00001CCC 4883E4F0            <1>  and rsp, ~15
  2150 00001CD0 BF09000000                      mov rdi, (1 + 8)
  2151 00001CD5 E825EAFFFF                      call malloc
  2152 00001CDA C60012                          mov byte [rax], T_real
  2153 00001CDD F20F114001                      movsd qword [rax + 1], xmm0
  2154                                          LEAVE
    38 00001CE2 C9                  <1>  leave
  2155 00001CE3 C3                              ret
  2156                                          
  2157                                  make_integer:
  2158                                          ENTER
    33 00001CE4 C8000000            <1>  enter 0, 0
    34 00001CE8 4883E4F0            <1>  and rsp, ~15
  2159 00001CEC 4889FE                          mov rsi, rdi
  2160 00001CEF BF11000000                      mov rdi, (1 + 8 + 8)
  2161 00001CF4 E806EAFFFF                      call malloc
  2162 00001CF9 C60011                          mov byte [rax], T_rational
  2163 00001CFC 48897001                        mov qword [rax + 1], rsi
  2164 00001D00 48C7400901000000                mov qword [rax + 1 + 8], 1
  2165                                          LEAVE
    38 00001D08 C9                  <1>  leave
  2166 00001D09 C3                              ret
  2167                                          
  2168                                  L_error_integer_range:
  2169 00001D0A 488B3C25[00000000]              mov rdi, qword [stderr]
  2170 00001D12 48BE-                           mov rsi, fmt_integer_range
  2170 00001D14 [5303000000000000] 
  2171 00001D1C B800000000                      mov rax, 0
  2172                                  	ENTER
    33 00001D21 C8000000            <1>  enter 0, 0
    34 00001D25 4883E4F0            <1>  and rsp, ~15
  2173 00001D29 E8(00000000)                    call fprintf
  2174                                  	LEAVE
    38 00001D2E C9                  <1>  leave
  2175 00001D2F 48C7C0FBFFFFFF                  mov rax, -5
  2176 00001D36 E8(00000000)                    call exit
  2177                                  
  2178                                  L_error_arg_count_0:
  2179 00001D3B 488B3C25[00000000]              mov rdi, qword [stderr]
  2180 00001D43 48BE-                           mov rsi, fmt_arg_count_0
  2180 00001D45 [5102000000000000] 
  2181 00001D4D 488B5518                        mov rdx, COUNT
  2182 00001D51 B800000000                      mov rax, 0
  2183                                  	ENTER
    33 00001D56 C8000000            <1>  enter 0, 0
    34 00001D5A 4883E4F0            <1>  and rsp, ~15
  2184 00001D5E E8(00000000)                    call fprintf
  2185                                  	LEAVE
    38 00001D63 C9                  <1>  leave
  2186 00001D64 48C7C0FDFFFFFF                  mov rax, -3
  2187 00001D6B E8(00000000)                    call exit
  2188                                  
  2189                                  L_error_arg_count_1:
  2190 00001D70 488B3C25[00000000]              mov rdi, qword [stderr]
  2191 00001D78 48BE-                           mov rsi, fmt_arg_count_1
  2191 00001D7A [7902000000000000] 
  2192 00001D82 488B5518                        mov rdx, COUNT
  2193 00001D86 B800000000                      mov rax, 0
  2194                                  	ENTER
    33 00001D8B C8000000            <1>  enter 0, 0
    34 00001D8F 4883E4F0            <1>  and rsp, ~15
  2195 00001D93 E8(00000000)                    call fprintf
  2196                                  	LEAVE
    38 00001D98 C9                  <1>  leave
  2197 00001D99 48C7C0FDFFFFFF                  mov rax, -3
  2198 00001DA0 E8(00000000)                    call exit
  2199                                  
  2200                                  L_error_arg_count_2:
  2201 00001DA5 488B3C25[00000000]              mov rdi, qword [stderr]
  2202 00001DAD 48BE-                           mov rsi, fmt_arg_count_2
  2202 00001DAF [DF02000000000000] 
  2203 00001DB7 488B5518                        mov rdx, COUNT
  2204 00001DBB B800000000                      mov rax, 0
  2205                                  	ENTER
    33 00001DC0 C8000000            <1>  enter 0, 0
    34 00001DC4 4883E4F0            <1>  and rsp, ~15
  2206 00001DC8 E8(00000000)                    call fprintf
  2207                                  	LEAVE
    38 00001DCD C9                  <1>  leave
  2208 00001DCE 48C7C0FDFFFFFF                  mov rax, -3
  2209 00001DD5 E8(00000000)                    call exit
  2210                                  
  2211                                  L_error_arg_count_12:
  2212 00001DDA 488B3C25[00000000]              mov rdi, qword [stderr]
  2213 00001DE2 48BE-                           mov rsi, fmt_arg_count_12
  2213 00001DE4 [9F02000000000000] 
  2214 00001DEC 488B5518                        mov rdx, COUNT
  2215 00001DF0 B800000000                      mov rax, 0
  2216                                  	ENTER
    33 00001DF5 C8000000            <1>  enter 0, 0
    34 00001DF9 4883E4F0            <1>  and rsp, ~15
  2217 00001DFD E8(00000000)                    call fprintf
  2218                                  	LEAVE
    38 00001E02 C9                  <1>  leave
  2219 00001E03 48C7C0FDFFFFFF                  mov rax, -3
  2220 00001E0A E8(00000000)                    call exit
  2221                                  
  2222                                  L_error_arg_count_3:
  2223 00001E0F 488B3C25[00000000]              mov rdi, qword [stderr]
  2224 00001E17 48BE-                           mov rsi, fmt_arg_count_3
  2224 00001E19 [0603000000000000] 
  2225 00001E21 488B5518                        mov rdx, COUNT
  2226 00001E25 B800000000                      mov rax, 0
  2227                                  	ENTER
    33 00001E2A C8000000            <1>  enter 0, 0
    34 00001E2E 4883E4F0            <1>  and rsp, ~15
  2228 00001E32 E8(00000000)                    call fprintf
  2229                                  	LEAVE
    38 00001E37 C9                  <1>  leave
  2230 00001E38 48C7C0FDFFFFFF                  mov rax, -3
  2231 00001E3F E8(00000000)                    call exit
  2232                                          
  2233                                  L_error_incorrect_type:
  2234 00001E44 488B3C25[00000000]              mov rdi, qword [stderr]
  2235 00001E4C 48BE-                           mov rsi, fmt_type
  2235 00001E4E [2F03000000000000] 
  2236 00001E56 B800000000                      mov rax, 0
  2237                                  	ENTER
    33 00001E5B C8000000            <1>  enter 0, 0
    34 00001E5F 4883E4F0            <1>  and rsp, ~15
  2238 00001E63 E8(00000000)                    call fprintf
  2239                                  	LEAVE
    38 00001E68 C9                  <1>  leave
  2240 00001E69 48C7C0FCFFFFFF                  mov rax, -4
  2241 00001E70 E8(00000000)                    call exit
  2242                                  
  2243                                  L_error_division_by_zero:
  2244 00001E75 488B3C25[00000000]              mov rdi, qword [stderr]
  2245 00001E7D 48BE-                           mov rsi, fmt_division_by_zero
  2245 00001E7F [7003000000000000] 
  2246 00001E87 B800000000                      mov rax, 0
  2247                                  	ENTER
    33 00001E8C C8000000            <1>  enter 0, 0
    34 00001E90 4883E4F0            <1>  and rsp, ~15
  2248 00001E94 E8(00000000)                    call fprintf
  2249                                  	LEAVE
    38 00001E99 C9                  <1>  leave
  2250 00001E9A 48C7C0F8FFFFFF                  mov rax, -8
  2251 00001EA1 E8(00000000)                    call exit
  2252                                  
  2253                                  section .data
  2254                                  fmt_char:
  2255 0000024E 256300                          db `%c\0`
  2256                                  fmt_arg_count_0:
  2257 00000251 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2257 0000025A 74696E67207A65726F-
  2257 00000263 20617267756D656E74-
  2257 0000026C 732E20466F756E6420-
  2257 00000275 25640A00           
  2258                                  fmt_arg_count_1:
  2259 00000279 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2259 00000282 74696E67206F6E6520-
  2259 0000028B 617267756D656E742E-
  2259 00000294 20466F756E64202564-
  2259 0000029D 0A00               
  2260                                  fmt_arg_count_12:
  2261 0000029F 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2261 000002A8 74696E67206F6E6520-
  2261 000002B1 726571756972656420-
  2261 000002BA 616E64206F6E65206F-
  2261 000002C3 7074696F6E616C2061-
  2261 000002CC 7267756D656E742E20-
  2261 000002D5 466F756E642025640A-
  2261 000002DE 00                 
  2262                                  fmt_arg_count_2:
  2263 000002DF 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2263 000002E8 74696E672074776F20-
  2263 000002F1 617267756D656E7473-
  2263 000002FA 2E20466F756E642025-
  2263 00000303 640A00             
  2264                                  fmt_arg_count_3:
  2265 00000306 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2265 0000030F 74696E672074687265-
  2265 00000318 6520617267756D656E-
  2265 00000321 74732E20466F756E64-
  2265 0000032A 2025640A00         
  2266                                  fmt_type:
  2267 0000032F 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2267 00000338 696F6E207061737365-
  2267 00000341 6420696E636F727265-
  2267 0000034A 637420747970650A00 
  2268                                  fmt_integer_range:
  2269 00000353 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2269 0000035C 7265637420696E7465-
  2269 00000365 6765722072616E6765-
  2269 0000036E 0A00               
  2270                                  fmt_division_by_zero:
  2271 00000370 212121204469766973-             db `!!! Division by zero\n\0`
  2271 00000379 696F6E206279207A65-
  2271 00000382 726F0A00           
  2272                                  fmt_scheme_error_part_1:
  2273 00000386 0A2121212054686520-             db `\n!!! The procedure \0`
  2273 0000038F 70726F636564757265-
  2273 00000398 2000               
  2274                                  fmt_scheme_error_part_2:
  2275 0000039A 2061736B656420746F-             db ` asked to terminate the program\n`
  2275 000003A3 207465726D696E6174-
  2275 000003AC 65207468652070726F-
  2275 000003B5 6772616D0A         
  2276 000003BA 202020207769746820-             db `    with the following message:\n\n\0`
  2276 000003C3 74686520666F6C6C6F-
  2276 000003CC 77696E67206D657373-
  2276 000003D5 6167653A0A0A00     
  2277                                  fmt_scheme_error_part_3:
  2278 000003DC 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2278 000003E5 210A0A00           
